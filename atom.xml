<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiao Space</title>
  
  <subtitle>日常学习记录博客</subtitle>
  <link href="https://zypnb.top/atom.xml" rel="self"/>
  
  <link href="https://zypnb.top/"/>
  <updated>2022-08-23T00:54:33.206Z</updated>
  <id>https://zypnb.top/</id>
  
  <author>
    <name>MPCB_Bishop</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的 Linux 深度学习工作环境丨环境搭建教程</title>
    <link href="https://zypnb.top/tech/my_workspace/"/>
    <id>https://zypnb.top/tech/my_workspace/</id>
    <published>2022-08-07T16:00:00.000Z</published>
    <updated>2022-08-23T00:54:33.206Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>Linux 因为其巨大优势（如可以无图形界面运行，对系统资源占用小，包管理方便，编程工具安装便利等）常被用于程序开发工作。本文主要介绍作者所使用的编程环境以及深度学习的工作流。好的工作流可以极大地提升编程的效率，也能提升自己编程的积极性。当然，工作流的配置因人而异，具有很强的主观性，自己使用舒适即可。作者使用的工作流也不可能适用于每个人，如果你有你觉得更好的工作流，也欢迎在评论区交流。</p></div><span id="more"></span><div class="story post-story"><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><div class="note warning"><p>本教程遵守<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议</a>，您可以自由地<strong>共享、演绎</strong>，但需遵守<strong>署名、非商业使用、相同方式共享</strong>条件，并且保证<strong>没有附加限制</strong>。更详细的说明可参见<a href="/about/">关于页面</a>。</p></div><div class="note warning"><p>教程中提到的部分内容可能因为更新而不再适用，请您自行检查位于<a href="#bottom">文章尾部</a>的教程最后更新时间加以判断。如果教程内有过时内容，欢迎在评论中指出，作者会 <emp>尽快</emp> 修改。</p></div><div class="note guide clear"><p>本教程的前提是读者有一定的 Linux 基础，能够理解 Linux 的基础命令，如果读者目前对 Linux 命令并不了解，可以参考作者的另一篇文章 <a href="/tech/linux_tutorial/">Linux 速成教程丨从零开始使用 Linux 命令</a> 其详细介绍了 Linux 命令及其使用方法。</p></div></div><div class="story post-story"><h2 id="安装-Linux-服务器"><a href="#安装-Linux-服务器" class="headerlink" title="安装 Linux 服务器"></a>安装 Linux 服务器</h2><p>正在施工中…… 让作者摸会儿鱼吧……</p></div><div class="story post-story"><h2 id="终端配置与美化"><a href="#终端配置与美化" class="headerlink" title="终端配置与美化"></a>终端配置与美化</h2><p>正在施工中…… 让作者摸会儿鱼吧……</p></div><div class="story post-story"><h2 id="VS-Code-安装与美化"><a href="#VS-Code-安装与美化" class="headerlink" title="VS Code 安装与美化"></a>VS Code 安装与美化</h2><p>正在施工中…… 让作者摸会儿鱼吧……</p><!--字体：更纱黑体扩展：Chinese (simplified) languagePythonRainbow brackets 彩色括号Material icon theme 精致图标Dracula official 吸血鬼主题Gitlens-git supercharged 可视化管理 git 库--></div><div class="story post-story"><h2 id="相关软件推荐"><a href="#相关软件推荐" class="headerlink" title="相关软件推荐"></a>相关软件推荐</h2><p>正在施工中…… 让作者摸会儿鱼吧……</p></div><div class="story post-story"><h2 id="深度学习工具安装与使用"><a href="#深度学习工具安装与使用" class="headerlink" title="深度学习工具安装与使用"></a>深度学习工具安装与使用</h2><p>正在施工中…… 让作者摸会儿鱼吧……</p></div><div class="story post-story"><h2 id="深度学习工作流"><a href="#深度学习工作流" class="headerlink" title="深度学习工作流"></a>深度学习工作流</h2><p>正在施工中…… 让作者摸会儿鱼吧……</p></div><div class="story post-story"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>正在施工中…… 让作者摸会儿鱼吧……</p></div><div class="story post-story"><h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>这里记录了本页面所有的显著更改。<br>All notable changes to this page will be documented in here.</p><div class="timeline"><div class="timenode"><div class="meta"><p><p>什么时候才能完成呢？</p></p></div><div class="body"><p>什么时候才能完成呢？</p></div></div><div class="timenode"><div class="meta"><p><p>2022-08-04</p></p></div><div class="body"><p>完成教程大纲编写。</p></div></div></div></div>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Linux 因为其巨大优势（如可以无图形界面运行，对系统资源占用小，包管理方便，编程工具安装便利等）常被用于程序开发工作。本文主要介绍作者所使用的编程环境以及深度学习的工作流。好的工作流可以极大地提升编程的效率，也能提升自己编程的积极性。当然，工作流的配置因人而异，具有很强的主观性，自己使用舒适即可。作者使用的工作流也不可能适用于每个人，如果你有你觉得更好的工作流，也欢迎在评论区交流。&lt;/p&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="技术" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="环境搭建" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Python" scheme="https://zypnb.top/tags/Python/"/>
    
    <category term="Linux" scheme="https://zypnb.top/tags/Linux/"/>
    
    <category term="环境配置" scheme="https://zypnb.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux 速成教程丨从零开始使用 Linux 命令</title>
    <link href="https://zypnb.top/tech/linux_tutorial/"/>
    <id>https://zypnb.top/tech/linux_tutorial/</id>
    <published>2022-08-03T16:00:00.000Z</published>
    <updated>2022-08-23T00:54:33.206Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>Linux 是一种开放源码 (open-source) 的类 UNIX 作业系统。虽然原先 Linux 只是由 Linus Torvalds 出于个人爱好而编写，但目前，Linux 已逐渐成为人们生活中不可或缺的一部分。从嵌入式设备到超级计算机，各处都有 Linux 的身影，在移动设备上广泛使用的 Android 系统正是建立在 Linux 内核之上。得益于其优雅的权限控制及优美的学习曲线，越来越多的服务器使用 Linux 以部署服务。</p></div><div class="note info"><p>通常，我们安装使用的 Linux 是指经打包后的 Linux 发行版，其中包括 Debian（包括衍生版本 Ubuntu、Linux Mint）、Fedora（包括相关版本 Red Hat Enterprise Linux、CentOS）、openSUSE、Arch Linux（包括衍生版本 Manjaro）、Gentoo，不一而足。目前，Linux 发行版基本配备了各自的图形界面，使用与 Windows 系统相仿，容易入门。</p><p>但在一些服务器系统上，如 Ubuntu Server、CentOS 等，安装图形界面（GUI）导致系统正常运行的性能需求飙升，因此通常服务器仅安装命令行界面（CLI）。同时，即使在带有图形界面的 Linux 发行版，也 <emp>不是所有</emp> 的操作都能通过图形界面完成，命令行的学习有很大的 <emp>必要性</emp>。</p></div><div class="note guide clear"><p>本文希望使用 <emp>浅显易懂</emp> 的语言带读者入门 Linux。教程主要针对初学者在实际使用中 <emp>最常用</emp> 的内容展开，加入了作者自己的理解与认识，希望读者能在很短的时间内学会 Linux 的基本操作。如有更好的展开思路，欢迎各位朋友在评论区批评指正。</p></div><span id="more"></span><div class="story post-story"><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><div class="note warning"><p>本教程遵守<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh">署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0) 协议</a>，您可以自由地<strong>共享、演绎</strong>，但需遵守<strong>署名、非商业使用、相同方式共享</strong>条件，并且保证<strong>没有附加限制</strong>。更详细的说明可参见<a href="/about/">关于页面</a>。</p></div><div class="note warning"><p>教程中提到的部分内容可能因为更新而不再适用，请您自行检查位于<a href="#bottom">文章尾部</a>的教程最后更新时间加以判断。如果教程内有过时内容，欢迎在评论中指出，作者会 <emp>尽快</emp> 修改。</p></div><div class="note guide clear"><p>学习本教程的前提是有一台可以正常工作的 Linux 计算机。虽然安装 Linux 系统并不是一件困难的事情，但却是一件复杂的事情，Linux 的发行版数量众多，安装过程并不能很容易地归纳为几个简单的步骤，因此本教程 <emp>并不涉及</emp> Linux 安装方面的内容。如果您手边不幸没有 Linux 电脑，可以考虑购置一台 Linux 云服务器，或自行在实体机或虚拟机上安装 Linux 系统，相关教程很多。如果您想要和作者安装一样的工作环境，可以参考作者的另一篇文章 <a href="/tech/my_workspace/">我的 Linux 深度学习工作环境丨环境搭建教程</a> 的前半部分，其介绍了 <code>Ubuntu Server 22.04 LTS</code> 的安装过程。</p><p>本教程中涉及的命令较多且很常用，推荐大家在阅读时能 <emp>实际运行一下</emp> 这些命令，查看它们的效果。对于较短的命令，建议初学者使用键盘输入以增强记忆；对于较长的命令，鼠标移入代码块后，右上角有 <code>COPY</code> 按钮，可以复制，粘贴后运行，查看结果。</p></div><h3 id="样式说明"><a href="#样式说明" class="headerlink" title="样式说明"></a>样式说明</h3><p>本教程正文部分以正常方式书写。</p><p>对于较为重要的附加说明或建议阅读的可选内容以 <emp>默认打开的折叠框展示</emp>。</p><details open><summary> 这是一个默认打开的折叠框（点击可以折叠） </summary>              <div class='content'>              <p>里面是较为重要的附加说明，建议阅读。</p>              </div>            </details><p>对于非重要的附加说明或引申内容以 <emp>默认关闭的折叠框展示</emp>。</p><details ><summary> 这是一个默认关闭的折叠框（点击可以展开） </summary>              <div class='content'>              <p>里面是非重要的附加说明，或一些延伸，可以略过。</p>              </div>            </details></div><div class="story post-story"><h2 id="第〇章-什么是-Linux-命令"><a href="#第〇章-什么是-Linux-命令" class="headerlink" title="第〇章 什么是 Linux 命令"></a>第〇章 什么是 Linux 命令</h2><div class="note warning"><p>本章仅对 Linux 命令做一个初步的介绍，主要是给读者一个感性的认识，介绍一些命令的基本语法以及 Linux 自带的帮助文档如何查阅。如果读者暂时还不能连接上 Linux 终端，可以在大致浏览第〇章后，仔细阅读第一章的内容，确保连接上 Linux 终端后，再阅读第〇章的内容。第〇章的内容是 Linux 的 <emp>基础之基础</emp>，还请 <emp>务必仔细</emp> 阅读。</p></div><p>通常，第一次进入 Linux 命令行后，你可能会不知所措。因为你目力所及只有一个黑框框，里面有一些奇怪的英文字符，它通常是这样的：</p><figure class="highlight k"><figcaption><span>你的命令行大概长这样</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xiao@server ~]$ </span><br></pre></td></tr></table></figure><p>其实，光标前面的这一串字符叫做 <code>shell prompt</code>，中文可称为“命令行提示符”。默认状态下是 <code>用户名@主机名</code> 的格式，在上面例子中，用户名为 <code>xiao</code>，主机名为 <code>server</code>，后面跟的 <code>~</code> 是命令行的当前目录，这将在后面介绍。美元符号（<code>$</code>）后面就是你的光标，你输入的字符将显示在后面。</p><p>试着输入 <code>echo &quot;Hello World&quot;</code> 然后回车，你会看到命令行输出了 <code>Hello World</code>。</p><div class="note success"><p>恭喜你运行了你的第一个 Linux 命令！</p></div><p>让我们乘胜追击，理解一下 Linux 命令的基本结构：</p><figure class="highlight k"><figcaption><span>Linux 命令基本结构</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xiao@server ~]$ command [-options] [arguments]</span><br></pre></td></tr></table></figure><ul><li><p><code>command</code> 命令：表示命令的名称，例如 <code>ls</code>, <code>chmod</code>, <code>git</code> 等等</p></li><li><p><code>options</code> 选项：表示命令的选项，中括号只是一个标记作用，表示这个选项是可选的，在实际书写时并不需要。通常，选项可以分为短选项与长选项。</p><ul><li>短选项：通常使用 <code>-</code> 引导，通常后面跟单个字符，例如 <code>-l</code>, <code>-h</code> 等。多个短选项可以直接组合，例如命令 <code>ls -l -h</code> 可以直接表示为 <code>ls -lh</code></li><li>长选项：通常使用 <code>--</code> 引导，后面跟完整的单词，例如 <code>--human-readable</code>。例如上面的命令 <code>ls -lh</code> 还可写成 <code>ls -l --human-readable</code></li></ul></li><li><p><code>arguments</code> 参数：表示命令的作用对象，有些命令可能有多个参数，也可以没有参数</p></li></ul><div class="note warning"><p>Linux 中命令、选项、参数之间使用空格来区分；</p><p>Linux 中命令严格区分大小写，对 Linux 而言 <code>ls</code> 与 <code>LS</code> 完全不同！</p></div><p>分析一下刚刚使用的命令 <code>echo &quot;Hello World&quot;</code> 的结构，<code>echo</code> 是这个命令（command）的名称，<code>echo</code> 有回声之意，所以其效果就是把参数字符串回显到命令行上；<code>&quot;Hello World&quot;</code> 就是命令的参数（arguments），在这里就是被回显的字符串。</p><p>如果要尝试一下选项（options）对命令的影响，试着输入 <code>echo -n &quot;Hello World&quot;</code>，你大概会看到以下输出：</p><figure class="highlight k"><figcaption><span>echo 不换行示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xiao@server ~]$ echo -n <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">Hello World[xiao@server ~]$</span><br></pre></td></tr></table></figure><p><code>-n</code> 选项的含义是不输出最后一个换行，所以你看到 <code>Hello World</code> 直接连在了 <code>shell prompt</code> 之后。</p><div class="note warning"><p>此后为了 <emp>方便起见</emp>，在代码说明时不再添加 <code>shell prompt</code>，读者清楚即可。即不再使用：</p><figure class="highlight k"><figcaption><span>弃用的写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xiao@server ~]$ echo -n <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><p>转而使用：</p><figure class="highlight shell"><figcaption><span>后续 Linux 命令使用的写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;Hello World&quot;</span><br></pre></td></tr></table></figure></div><h3 id="折行"><a href="#折行" class="headerlink" title="折行"></a>折行</h3><p>在 Linux 如果输入命令很长，可以使用反斜杠 (<code>\</code>) 折行，使指令续行，例如：</p><figure class="highlight shell"><figcaption><span>折行示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello world. \</span><br><span class="line">I think that Xiao Space is a fascinating website. \</span><br><span class="line">What you think?&quot;</span><br></pre></td></tr></table></figure><p>其实等价于:</p><figure class="highlight shell"><figcaption><span>原始命令</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello world. I think that Xiao Space is a fascinating website. What you think?&quot;</span><br></pre></td></tr></table></figure><p>显然，使用反斜杠折行后，代码的可读性更好了一些。一般来说，为了终端的兼容性，一行不应超过 79 个字符，如果多于 79 个字符，需要考虑折行，当然，这个规则也适用于其他编程语言。</p><div class="note warning"><p>需要注意反斜杠后必须立刻接换行符，否则可能会产生转义字符而失去续行效果。</p></div><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><p>如果在 Linux 中突然遇到有些记得名字的命令的选项或参数遗忘，可以查看 Linux 自带的帮助。通常，帮助命令可以归纳为 <code>whatis</code>, <code>--help</code>, <code>man</code>, <code>info</code>。</p><h4 id="whatis-命令"><a href="#whatis-命令" class="headerlink" title="whatis 命令"></a><code>whatis</code> 命令</h4><p><code>whatis</code> 会显示命令简短的功能描述，命令语法：</p><figure class="highlight shell"><figcaption><span>whatis 命令语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatis command</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><figcaption><span>whatis 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whatis echo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> (1)             - display a line of text</span></span><br></pre></td></tr></table></figure><h4 id="help-选项"><a href="#help-选项" class="headerlink" title="--help 选项"></a><code>--help</code> 选项</h4><p>在命令后加上 <code>--help</code> 通常可以显示使用方法和参数列表，有些时候，这个选项可以简写为 <code>-h</code>，但要注意并不是所有命令都能如此简写，例如后面将要介绍的 <code>ls -h</code> 就是代表以人类可读的方式显示结果，这里 <code>-h</code> 是 <code>--human-readable</code> 的简写。因此，使用 <code>--help</code> 更具兼容性，命令语法：</p><figure class="highlight shell"><figcaption><span>--help 选项语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command --help</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><figcaption><span>--help 选项示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls --help</span><br></pre></td></tr></table></figure><p>就会显示 <code>ls</code> 命令的帮助。</p><h4 id="man-命令"><a href="#man-命令" class="headerlink" title="man 命令"></a><code>man</code> 命令</h4><p><code>man</code> 命令可以查看命令描述或帮助手册（man 是 manual 的简称，是帮助文档的意思），命令语法：</p><figure class="highlight shell"><figcaption><span>man 命令语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man [section] command</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><figcaption><span>man 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man echo</span><br></pre></td></tr></table></figure><p>就会进入 <code>echo</code> 命令的帮助手册。按 <kbd>q</kbd> 键可以退出。</p><details open><summary> 如果出现 No manual entry for command （点击可以折叠） </summary>              <div class='content'>              <p>通常情况，Linux 发行版会自带帮助手册。但对于一些精简的系统，可能并未安装 <code>man</code>，如果出现此提示，可以学习本教程第四章如何在 Linux 上安装软件，然后安装 <code>man-pages</code> 包及 <code>man-db</code> 包。</p>              </div>            </details><details ><summary> 关于 section 参数（点击可以展开） </summary>              <div class='content'>              <p>在 <code>man</code> 命令的语法中，可以看到 section 参数，section 表示帮助手册的章节数，对应关系可以通过 <code>man man-pages</code> 查看</p><figure class="highlight shell"><figcaption><span>man sections description</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MANUAL SECTIONS</span><br><span class="line">The standard sections of the manual include:</span><br><span class="line"></span><br><span class="line">    1      User Commands</span><br><span class="line">    2      System Calls</span><br><span class="line">    3      C Library Functions</span><br><span class="line">    4      Devices and Special Files</span><br><span class="line">    5      File Formats and Conventions</span><br><span class="line">    6      Games et. al.</span><br><span class="line">    7      Miscellanea</span><br><span class="line">    8      System Administration tools and Daemons</span><br><span class="line"></span><br><span class="line">    Distributions customize the manual section to their specifics,</span><br><span class="line">    which often include additional sections.</span><br></pre></td></tr></table></figure><p>因为有些命令可能在不同的章节有重复，例如 <code>printf</code> 既在第 1 节，又在第 3 节，如果是要查看用户命令的 <code>printf</code>，使用 <code>man 1 printf</code>，如果是要查看 C 库中的 <code>printf</code>，应使用 <code>man 3 printf</code>。</p>              </div>            </details><h4 id="info-命令"><a href="#info-命令" class="headerlink" title="info 命令"></a><code>info</code> 命令</h4><p><code>info</code> 命令可以查看比 <code>man</code> 更详细的说明，命令语法：</p><figure class="highlight shell"><figcaption><span>info 命令语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info command</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><figcaption><span>info 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info echo</span><br></pre></td></tr></table></figure><p>就会进入 <code>echo</code> 命令的说明，按 <kbd>Q</kbd> 键可以退出。</p><details open><summary> 命令帮助的特殊符号 （点击可以折叠） </summary>              <div class='content'>              <p>在查看命令帮助时，会出现 <code>[]</code>, <code>&lt;&gt;</code>, <code>|</code> 等符号，它们的含义如下：<br><code>[]</code> 表示是可选的;<br><code>&lt;&gt;</code> 表示是可变化的;<br><code>x|y|z</code> 表示只能选择一个;<br><code>-abc</code> 表示三个参数（或任何二个）的混合使用</p>              </div>            </details><h3 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h3><p>在 Linux 下，我们有时希望知道最近执行的命令，<code>history</code> 会帮上大忙：</p><figure class="highlight shell"><figcaption><span>history 示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history 5         # 显示最近使用的5个命令</span><br><span class="line">history | more    # 显示使用过的所有命令</span><br></pre></td></tr></table></figure><p>在 Linux 下，我们有时还希望直接运行历史执行过的命令，<code>!</code> 会帮上大忙：</p><figure class="highlight shell"><figcaption><span>! 的用法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!5   # 执行历史编号为 5 的命令，注意感叹号与数字间没有空格</span><br><span class="line">!ls  # 执行最后一次以 ls 开头的命令</span><br><span class="line">!!   # 执行上一次命令</span><br></pre></td></tr></table></figure><h3 id="一些便利的功能与快捷键"><a href="#一些便利的功能与快捷键" class="headerlink" title="一些便利的功能与快捷键"></a>一些便利的功能与快捷键</h3><p>在 Linux 命令行中，你可能想中断一些耗时很长的命令的运行，亦或者是修改一些命令，或者是快速调出上一次的命令，实际上，这些操作都有快捷键可以完成，当然 Linux 命令行中的快捷键众多，这里只列出常用的部分。如对其他快捷键有兴趣，可以自行查阅 <code>man bash</code></p><p>快捷键 <kbd>CTRL</kbd> + <kbd>A</kbd>：将光标移到行首</p><p>快捷键 <kbd>CTRL</kbd> + <kbd>C</kbd>：停止正在运行的任务</p><p>快捷键 <kbd>CTRL</kbd> + <kbd>L</kbd>：清屏</p><p>快捷键 <kbd>TAB</kbd>：命令补全</p><p>快捷键 <kbd>↑</kbd>：历史命令，可以不断向上翻阅</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><div class="note success"><p>至此，恭喜你完成了第〇章的学习！第〇章主要带读者了解了 Linux 命令的基本结构、 Linux 的一些帮助命令及一些好用的快捷键。有了这些前置知识后，现在，让我们正式开始学习 Linux 吧！</p></div></div><div class="story post-story"><h2 id="第一章-连接到-Linux-终端"><a href="#第一章-连接到-Linux-终端" class="headerlink" title="第一章 连接到 Linux 终端"></a>第一章 连接到 Linux 终端</h2><p>要想熟练使用 Linux 终端，头等要事当然是打开 Linux 终端。但可能，这件事可能有些时候并没有想象中那么容易。</p><h3 id="图形界面-Linux-发行版"><a href="#图形界面-Linux-发行版" class="headerlink" title="图形界面 Linux 发行版"></a>图形界面 Linux 发行版</h3><p>如果你在计算机上安装了带图形界面的 Linux 发行版，通常当你进入桌面系统后，可以在所有程序中找到“终端”软件，然后打开。</p><p>如果你使用 GNOME 或 KDE 桌面，你通常可以使用快捷键 <kbd>CTRL</kbd> + <kbd>ALT</kbd> + <kbd>T</kbd> 打开终端。这里的 <kbd>T</kbd> 是 Terminal（终端）的首字母。</p><h3 id="不带图形界面的-Linux-发行版"><a href="#不带图形界面的-Linux-发行版" class="headerlink" title="不带图形界面的 Linux 发行版"></a>不带图形界面的 Linux 发行版</h3><p>如果你使用了不带图形界面的 Linux 发行版，那么你启动计算机后，就会自动进入终端，你只需输入账户名及密码即可。</p><h3 id="远程连接上-Linux-终端"><a href="#远程连接上-Linux-终端" class="headerlink" title="远程连接上 Linux 终端"></a>远程连接上 Linux 终端</h3><p>如果你的服务器安装了 Linux，但你希望通过远程方式访问，那么通常会使用 <code>ssh</code> (Secure SHell, 安全外壳协议) 命令连接到 Linux 服务器。这时，服务端与客户端都需要进行一些配置。虽然配置 ssh 服务端（简称 sshd）很明显超出了本章的内容，但好在，通常 Linux 服务器版本都自带 sshd 服务，因此本章中我们默认认为其是开启的。即服务端的配置是完美的。</p><details ><summary> 如果你一定要检查 ssh 服务端是否开启 （点击可以展开） </summary>              <div class='content'>              <p>如果你想确认自己的 Linux 服务器是否开启了 ssh 服务，那么可以分为以下两种情况：</p><p>如果你的服务器是使用的 service 作为守护进程服务，那么可以运行以下命令：</p><figure class="highlight shell"><figcaption><span>使用 service 检查 sshd 是否开启</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd status</span><br></pre></td></tr></table></figure><p>如果看到 <code>Active: active (running)</code> 字样，说明 sshd 正在运行。</p><p>如果你的服务器使用 <code>init.d</code> 作为守护进程服务，那么可以运行以下命令：</p><figure class="highlight shell"><figcaption><span>直接使用 status 检查 sshd 是否开启</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/sshd status</span><br></pre></td></tr></table></figure><p>当然如果你不清楚具体的使用，你可以尝试运行上述两种命令，如果有一种提示正常，那么说明服务器已经开启了 ssh 服务。</p><p>如果你的 ssh 未做特殊配置，那通常开放在 22 端口，所以若你没有更改端口，你还可以通过以下命令检查：</p><figure class="highlight shell"><figcaption><span>使用 lsof 命令检查 sshd 是否开启</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :22</span><br></pre></td></tr></table></figure><p>如果你没有安装 <code>lsof</code> 命令，那么可以使用相应的包管理器安装后再进行检查，具体可以参见第四章内容。</p>              </div>            </details><p>下面就要进行客户端的配置了，其实这一部分并不复杂，如果你的个人电脑就是 Linux 系统或是 macOS 系统，那么默认是安装了 ssh 客户端的，这里并不需要多做配置；如果你是 Windows 电脑，并且是 Windows 8 或更高的系统，那么 ssh 客户端也已经安装；如果是 Windows XP 或 Windows 7，那么需要自行安装 OpenSSH 程序。由于安装程序较为简单，因此这一部分不再赘述。下面分系统介绍如何打开客户端电脑的终端（命令提示符）。</p><h4 id="Linux-macOS-系统打开终端"><a href="#Linux-macOS-系统打开终端" class="headerlink" title="Linux, macOS 系统打开终端"></a>Linux, macOS 系统打开终端</h4><p>如果使用 Linux 或 macOS 系统，可以打开系统内置的终端（在 macOS 上，这通常被称为终端模拟器）。</p><h4 id="Windows-系统打开命令提示符"><a href="#Windows-系统打开命令提示符" class="headerlink" title="Windows 系统打开命令提示符"></a>Windows 系统打开命令提示符</h4><p>在 Windows 系统下，你要先打开命令提示符（cmd）或 PowerShell 才能输入命令。</p><p>打开命令提示符，你可以使用 <kbd>Win</kbd> + <kbd>R</kbd> 快捷键打开运行，在里面输入 <code>cmd</code> 后回车（或点击确定），即可打开命令提示符。当然也可以使用 Windows 搜索，搜索命令提示符或 PowerShell 后打开。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220816002808.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220816002808.png" srcset="/images/placeholder.svg" alt="命令提示符界面"/></div><span class="image-caption">命令提示符界面</span></div><h4 id="运行-ssh-命令"><a href="#运行-ssh-命令" class="headerlink" title="运行 ssh 命令"></a>运行 <code>ssh</code> 命令</h4><p>打开终端后，可以输入以下命令：</p><figure class="highlight shell"><figcaption><span>ssh 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh username@IP [-p port]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">ssh xiao@192.168.1.100</span><br><span class="line">ssh xiao@192.168.1.100 -p 1000</span><br></pre></td></tr></table></figure><p>ssh 是命令的名称，username 是你想登录的远程账号的用户名，后面接 <code>@</code> 符号，然后紧跟远程主机的 IP 地址。如果你的服务器的 ssh 服务监听的端口不是 22 端口，那么可以使用 <code>-p</code> 选项指定端口，后面跟端口号即可。如果你不确定远程主机的 IP 地址，通常可以在远程主机上运行 <code>ifconfig</code> 命令查看，当然，对于初学者，往往直接询问网管或服务器相关人员更佳。</p><p>运行后，大概率会提示以下内容：</p><figure class="highlight shell"><figcaption><span>ssh 第一次连接显示的警告</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;192.168.1.100 (92.168.1.100)&#x27; cant be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:ZNfwzV12wqfsO0iYpIywNsBPYhta5TTaKBfzEl5TBos.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure><p>这是因为第一次连接到这个服务器，这个服务器的 IP 和对应的指纹还没有被客户端记录为可信的，所以弹出了一个警告，这时输入 <code>yes</code> 然后回车即可。当你同意后，你会发现提示了以下内容：</p><figure class="highlight shell"><figcaption><span>永久添加指纹后显示的警告</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &#x27;192.168.1.100&#x27; (ECDSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>这个警告提醒你已经将这个 IP 和对应的指纹加入了信任的列表，以后将不再提示。</p><div class="note success"><p>恭喜你已经连接上终端了！</p></div><details open><summary> 不输入密码连接 ssh（点击可以折叠） </summary>              <div class='content'>              <p>当你使用 ssh 连接服务器时，每次都要输入密码，如果密码简单还好，但通常，服务器密码为了安全，都有大小写字母、数字、特殊字符构成，每次登录都要输入未免太过麻烦，那么，有没有一种方法可以不输入密码连接 ssh 呢？</p><p>当然有！而且还使用广泛！并且还更加安全！那就是使用密钥的方式登录。</p><p>密钥形式登录的原理是：利用密钥生成器制作一对密钥 —— 一只公钥和一只私钥。将公钥添加到服务器的某个账户上，然后在客户端利用私钥即可完成认证并登录。这样一来，没有私钥，任何人都无法通过 ssh 暴力破解你的密码来远程登录到系统。此外，如果将公钥复制到其他账户甚至主机，利用私钥也可以登录。</p><p>下面来讲解如何制作密钥对，将公钥添加给账户，设置 ssh，最后通过客户端登录。</p><p>如果你的客户端使用的是 Windows 系统，那么作者这里建议你安装 <a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/git-for-windows/git/LatestRelease/">Git for Windows</a>，这会为后面的安装带来很多的便利。你可以点击上面的连接，下载最新的 64 位版本，然后安装。Git 其实是一个非常好用的版本控制工具，作者也会在后面的章节进行介绍。在安装完成后，可以在开始菜单找到刚刚安装的 Git，并且会生成几个快捷方式，双击打开 Git Bash。如果你使用的是 Linux 系统或 macOS系统，直接打开终端即可。</p><p>为了与后面的 github 更好地兼容，我们运行以下命令生成一对密钥：</p><figure class="highlight shell"><figcaption><span>ssh-keygen 使用个人邮箱生成密钥对</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>注意将 <code>your_email@example.com</code> 改为你的邮箱，如果你有 github 的账号，请改为你的 github 账号的注册邮箱。按回车后，会提示密钥的存储位置，这里保持默认即可。确认后，提示输入密钥的密码，通常情况下，这里可以留空，所以直接回车即可。按回车后，需要重复一遍密码，由于上次留空，这里再按一次回车即可。这样就生成好了公钥、私钥对。通常默认命名下，公钥是 <code>id_rsa.pub</code> 后缀是 public 的前三个字母，私钥是 <code>id_rsa</code> 无后缀。</p><div class="note warning"><p>私钥可以认为就是你的电脑的指纹，请务必妥善保存，否则别人就可以任意登录你的服务器，这是非常危险的！请注意，任何网站或服务器都不会索要你的私钥，因此请记住，私钥不上网！</p></div><p>第二步，就是在服务器上安装公钥。这一步只需运行命令：</p><figure class="highlight shell"><figcaption><span>使用 ssh-copy-id 将公钥安装到服务器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub username@IP</span><br></pre></td></tr></table></figure><p>需要注意，要将 <code>-i</code> 选项后的路径替换为你的 <code>id_rsa.pub</code> 的路径，username 为服务器端的用户名，IP 为服务器的地址。实际上 <code>ssh-copy-id</code> 命令就是将公钥写入服务器的 <code>~/.ssh/authorized_key</code> 文件中，只不过帮我们自动完成了上传公钥、写入文件、修改权限的操作。</p><p>最后，测试一下是否可以无密码登入：</p><figure class="highlight shell"><figcaption><span>测试 ssh 免密登录</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@IP</span><br></pre></td></tr></table></figure><p>如果你没有输入密码就已经登录了终端，恭喜你完成了无密码登录。实际上这一生成的密钥对中的公钥可以用于多个服务器，如果想要免密登陆第二台服务器时，只需要运行第二步即可。</p>              </div>            </details><details ><summary> 终端与 shell 的争论（点击可以展开） </summary>              <div class='content'>              <p>其实，在上面的叙述中，作者将终端与 shell 混为一谈，但严谨来看，它们是完全的不同的事物。通常意义下，可以认为终端负责输入命令，而 shell 负责解释命令并传递给内核。终端一词其实诞生在上世纪，诞生在那个计算机计算中心化，人们使用的通常是一套输入设备来操作计算机的时代（这套输入设备被称为终端）。因此，终端一词发展至今已然日渐式微，目前已经很难明晰终端与 shell 的界限。</p><p>当然，本文将终端与 shell 不做区分，并不是认为这两者区分并无必要，只是方便初学者的理解考量。因为初学者更在意与他交互的这个黑色窗口好不好用，而并不是这个窗口的名字到底是什么！</p>              </div>            </details><h3 id="终端的介绍"><a href="#终端的介绍" class="headerlink" title="终端的介绍"></a>终端的介绍</h3><p>通常情况下，当你使用 Linux 终端时，默认使用的 shell 是 bash（Bourne-Again SHell），它是 sh 的后继兼容版本。对初学者而言，这个 shell 功能已经足够强大。但如果你还有其他追求，例如代码补全、自动目录跳转等等，在后续使用中也可以使用其他 shell，例如 zsh、fish 等。需要注意的是，不同的 shell 的语法有微妙的区别，有时一种 shell 的脚本并不能在另一种 shell 中运行。本教程默认使用 bash 教学。</p><h3 id="我不想在命令提示符中敲命令"><a href="#我不想在命令提示符中敲命令" class="headerlink" title="我不想在命令提示符中敲命令"></a>我不想在命令提示符中敲命令</h3><p>如果你使用的是 Windows 系统，那你大概会觉得命令提示符实在是太丑陋了，实际上，正常的 Linux 使用者也不会将命令提示符作为自己的主要工作环境。目前已经有相当多好用、易用的终端工具，例如 PuTTY、MobaXterm 等等，这些工具或多或少方便了 Linux 终端使用，有些还自带了文件传输的功能，推荐初学者尝试。作者的工作流主要使用 Windows Terminal + Visual Studio Code 两款软件。限于篇幅，作者将自用的 Linux 环境搭建以及一些终端的美化技巧放在了 <a href="/tech/my_workspace/">我的 Linux 深度学习工作环境丨环境搭建教程</a> 中，欢迎读者查看。</p><div class="note success"><p>至此，恭喜你完成了第一章的学习！第一章主要带读者了解了如何连接到 Linux 终端。并且还讲解了一些关于免密登录终端的技巧及一些关于终端的小知识。后者仅是一些拓展，并不需要完全掌握。阅读完本章后，你只需要连接上一个可以正常运行 Linux 命令的终端即可，不论这是本地的终端，还是通过 ssh 远程连接的终端，并不会影响后续章节的学习。</p></div></div><div class="story post-story"><h2 id="第二章-了解-Linux-文件操作"><a href="#第二章-了解-Linux-文件操作" class="headerlink" title="第二章 了解 Linux 文件操作"></a>第二章 了解 Linux 文件操作</h2><p>了解了 Linux 命令的基本结构并且连接上终端之后，我们就要正式开始学习 Linux 命令了。但是在学习之前，还请允许作者介绍一下 Linux 的文件系统，不同于 Windows 系统，Linux <emp>万物皆文件</emp>。正确理解 Linux 文件系统是后续学习 Linux 的基石。</p><h3 id="Linux-文件系统"><a href="#Linux-文件系统" class="headerlink" title="Linux 文件系统"></a>Linux 文件系统</h3><p>不同于 Windows 系统的盘符，Linux 系统只有一个根目录，不同的分区可以使用 <emp>挂载的方式</emp> 挂载到指定的挂载点上。Linux 所有的文件和目录都被组织成一个以根节点开始的树状结构。根目录使用 <code>/</code> 表示。当你在终端中输入：<code>ls /</code> 后会看到以下输出：</p><figure class="highlight shell"><figcaption><span>ls / 命令的输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin  boot  dev  etc  home  lib  lib32  lib64  libx32  lost+found  media</span><br><span class="line">mnt  opt  proc  root  run  sbin  snap  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>下面对其中的重要目录进行一些解释：</p><ul><li><p><code>/bin</code> 目录<br>bin 是 binaries (二进制文件) 的缩写，这个目录存放着最经常使用的命令。</p></li><li><p><code>/boot</code> 目录<br>这里存放的是 <emp>启动</emp> Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><code>/dev</code> 目录<br>dev 是 device (设备) 的缩写，该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><code>/etc</code> 目录<br>etc 是 etcetera (等等) 的缩写，这个目录用来存放所有的系统管理所需要的 <emp>配置文件</emp> 和子目录。</p></li><li><p><code>/home</code> 目录<br>用户的 <emp>主目录</emp>，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，例如，如果你的用户名是 <code>xiao</code>，那么你的主目录就是 <code>/home/xiao</code>。</p></li><li><p><code>/lib</code> 目录<br>lib 是 library (库) 的缩写，这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><code>/lost+found</code> 目录<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><code>/media</code> 目录<br>Linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><code>/mnt</code> 目录<br>mnt 是 mount (挂载) 的缩写，系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 <code>/mnt/</code> 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><code>/opt</code> 目录<br>opt 是 optional (可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><code>/proc</code> 目录<br>proc 是 processes (进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p></li><li><p><code>/root</code> 目录<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><code>/sbin</code> 目录<br>s 就是 super user 的意思，sbin 是 superuser binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><code>/srv</code> 目录<br>src 是 service (服务) 的缩写，该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><code>/sys</code> 目录<br>sys 是 system (系统) 的缩写，具体的内容这里并不介绍。</p></li><li><p><code>/tmp</code> 目录<br>tmp 是 temporary (临时) 的缩写，这个目录是用来存放一些临时文件的。</p></li><li><p><code>/usr</code> 目录<br>usr 是 unix shared resources (共享资源) 的缩写，注意不是 user 的缩写，这是一个 <emp>非常重要</emp> 的目录，用户的很多应用程序和文件都放在这个目录下，类似于 Windows 下的 Program Files 目录。</p></li><li><p><code>/usr/bin</code> 目录<br>系统用户使用的应用程序。</p></li><li><p><code>/usr/sbin</code> 目录<br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><code>/usr/src</code> 目录<br>src 是 source (源代码) 的缩写，该目录是内核源代码默认的放置目录。</p></li><li><p><code>/var</code> 目录<br>var 是 variable (变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><code>/run</code> 目录<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</p></li></ul><p>在实际使用过程中，系统管理员操作最多的当属 <code>/etc</code>, <code>/usr</code>, <code>/root</code> 目录，普通用户访问最多的是自己的用户目录，即 <code>/home/username</code> 目录。</p><p>在 Linux 文件系统中，还有几个特殊的目录，一个是用户所在的工作目录（working directory），也被称为当前目录，可以使用一个点 <code>.</code> 表示。还有一个是当前目录的上一级目录，也称为父目录，可以使用两个点 <code>..</code> 表示。还有一个是用户的用户目录，也被称为家目录，可以使用一个波浪号 <code>~</code> 表示，对普通用户来说，就是代表 <code>/home/username</code> 目录，对超级用户来说，就是代表 <code>/root</code> 目录。</p><p>另外，如果一个目录或文件名以一个点 <code>.</code> 开始，表示这个目录或文件是一个隐藏目录或文件 (如：.bashrc)。即以默认方式查找时，不显示该目录或文件。</p><p>注意，如果你的 Linux 系统还有 <code>/swap</code> 目录，这说明你的系统启用了交换分区，交换分区是可以使用硬盘的一部分空间当作内容使用，对于小内存的机器非常有用，如果你的机器有很大的内存，也 <emp>并不意味着</emp> 你可以不使用交换分区。Linux 系统会在交换分区中存储一些重要运行时，请 <emp>务必不要</emp> 将交换分区关闭。当然，目前已经不再推荐使用交换分区，因为分区后交换空间的大小难以更改，目前更推荐的是使用 swapfile（交换文件），即使用一个文件代替分区。</p><details ><summary> 使用命令创建交换文件并启用 （点击可以展开） </summary>              <div class='content'>              <p>通常，这是系统管理员需要做的事情，这里做一些介绍，并不推荐初学者运行，除非你清楚每个命令的作用及后果。</p><figure class="highlight shell"><figcaption><span>创建交换文件并启用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo dd if=/dev/zero of=/swapfile bs=1M count=2048  # 创建一个 2GB 的位于根目录下的</span><br><span class="line">                                                    # 交换文件</span><br><span class="line">sudo mkswap /swapfile    # 将文件格式化为交换文件</span><br><span class="line">sudo chmod 600 /swapfile # 修改权限为仅 root 可读写</span><br><span class="line">sudo swapon /swapfile    # 启用交换文件</span><br><span class="line">free -m                  # 查看 Linux 的内存情况</span><br></pre></td></tr></table></figure><p>如果你看到 Swap 一项增加了 2GB ，那么恭喜你已经开启交换文件成功了。但是现在每次启动后都要手动输入 <code>swapon</code> 命令才能开启，所以我们还需要写入开机启动项。</p><figure class="highlight shell"><figcaption><span>将交换文件设为开机启动</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;/swapfile swap swap defaults 0 0&quot; &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure><p>这样重启后，系统会自动挂载交换文件。当然，在实际使用中，你会发现内存占用少的时候，交换空间基本不起作用，如果你想在有充裕的内存的情况下也使用交换空间，可以使用以下命令查看交换空间的使用倾向：</p><figure class="highlight shell"><figcaption><span>查看交换空间的偏好值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br></pre></td></tr></table></figure><p>这个值越接近 100，意味着越偏向于使用交换空间而非物理内存，需要注意，将这个值增大会显著影响 Linux 系统的运行效率。你可以这样修改交换空间的偏好值：</p><figure class="highlight shell"><figcaption><span>修改交换空间偏好值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;vm.swappiness=90&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>修改完成后重启即可看到更改。</p>              </div>            </details><div class="note warning"><p>Linux 的文件和目录严格区分大小写，<code>./me/</code> 和 <code>./Me/</code> 是完全不同的两个目录，<code>./me.py</code> 与 <code>./Me.py</code> 是完全不同的两个文件，这一点与 Windows 系统的默认行为大不相同，Windows 下目录和文件是不区分大小写的，这意味着同一文件夹下不可能同时出现 <code>./me.py</code> 与 <code>./Me.py</code> 文件，因为 Windows 认为这两个是同一个文件！请初学者务必注意其差别。</p></div><h3 id="Linux-文件系统相关命令"><a href="#Linux-文件系统相关命令" class="headerlink" title="Linux 文件系统相关命令"></a>Linux 文件系统相关命令</h3><p>在了解了 Linux 文件系统后，我们就可以正式开始 Linux 文件系统相关命令的学习了。Linux 中和文件操作相关的命令很多，这里只列举初学者最常用的一些命令，主要有 <code>pwd</code>, <code>cd</code>, <code>ls</code>, <code>cp</code>, <code>mv</code>, <code>touch</code>, <code>rm</code>, <code>mkdir</code>, <code>rmdir</code>, <code>cat</code>, <code>head</code>, <code>tail</code>, <code>grep</code>, <code>find</code>, <code>zip</code>, <code>tar</code>, <code>nano</code>, <code>vi</code>, <code>ln</code>。</p><p>你很有可能会觉得这些命令都难以理解，但这是为了输入效率而做出的 <emp>妥协</emp>。因为毕竟所有命令都需要手动输入，如果命令本身能短一些，那么输入的效率就会高很多。实际上，这些命令大多是其功能的缩写，如果理解了，还是很好记忆的！</p><p>另外，由于 Linux 中万物皆文件，其实上 <emp>目录也是一种特殊的文件</emp>，后文我们在讲解命令语法时，不再区分文件路径和目录路径这两个名词，都统一使用 <code>FILE</code> 指代。</p><h4 id="目录相关"><a href="#目录相关" class="headerlink" title="目录相关"></a>目录相关</h4><ul><li><p><code>pwd</code><br>pwd 可以显示当前工作目录，是 Print Working Directory 的缩写。</p></li><li><p><code>cd</code><br>cd 可以更改当前的工作目录，是 Change Directory 的缩写。</p></li></ul><figure class="highlight shell"><figcaption><span>cd 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd [FILE]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">cd        # 回到家目录</span><br><span class="line">cd ~      # 回到家目录，与 cd 等价</span><br><span class="line">cd ..     # 进入上级目录</span><br><span class="line">cd /      # 进入根目录</span><br></pre></td></tr></table></figure><ul><li><code>ls</code><br>ls 可以查看目录或文件信息，是 list 的缩写。</li></ul><figure class="highlight shell"><figcaption><span>ls 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ls [OPTION]... [FILE]...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">ls        # 列出当前目录下的文件</span><br><span class="line">ls /      # 列出根目录下的文件</span><br><span class="line">ls -a     # -a (--all) 列出当前目录下的所有文件，含隐藏文件</span><br><span class="line">ls -l     # 这里的 -l 是 long 的意思，列出当前目录下文件的详细信息，包含权限、</span><br><span class="line">          # 修改信息等</span><br><span class="line">ls -lh    # -h (--human-readable) 使用人类可读的方式列出，空间占用会使用 K、G 等单位</span><br></pre></td></tr></table></figure><h4 id="复制、移动、创建、删除文件或目录"><a href="#复制、移动、创建、删除文件或目录" class="headerlink" title="复制、移动、创建、删除文件或目录"></a>复制、移动、创建、删除文件或目录</h4><ul><li><code>cp</code><br>cp 可以复制文件或目录，是 copy 的缩写。</li></ul><figure class="highlight shell"><figcaption><span>cp 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cp [OPTION]... [-T] SOURCE DEST</span><br><span class="line">cp [OPTION]... SOURCE... DIRECTORY</span><br><span class="line">cp [OPTION]... -t DIRECTORY SOURCE...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">cp a.txt b.txt  # 复制 a.txt 并另存为 b.txt</span><br><span class="line">cp a.txt ../    # 复制 a.txt 到父目录</span><br><span class="line">cp -r ./a ../   # -r (--recursive) 可以递归复制文件夹，这个命令是将文件夹 a 及其所有</span><br><span class="line">                # 内容复制到父目录</span><br></pre></td></tr></table></figure><ul><li><code>mv</code><br>mv 可以移动或重命名文件，是 move 的缩写。</li></ul><figure class="highlight shell"><figcaption><span>mv 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mv [OPTION]... [-T] SOURCE DEST</span><br><span class="line">mv [OPTION]... SOURCE... DIRECTORY</span><br><span class="line">mv [OPTION]... -t DIRECTORY SOURCE...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">mv a.txt b.txt # 将 a.txt 重命名为 b.txt</span><br><span class="line">mv a.txt ../   # 移动 a.txt 到父目录</span><br><span class="line">mv ./a ../     # 移动文件夹 a 到父目录，注意 mv 可以直接移动文件夹所有内容，不需要</span><br><span class="line">               # 加上递归选项</span><br></pre></td></tr></table></figure><ul><li><code>touch</code><br>touch 可以创建一个空白文件，如果当前目录有同样的文件，则会更新文件的修改时间</li></ul><figure class="highlight shell"><figcaption><span>touch 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch [OPTION]... FILE...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">touch a.txt   # 在当前目录下创建 a.txt</span><br></pre></td></tr></table></figure><ul><li><code>rm</code><br>rm 可以删除文件或文件夹，是 remove 的缩写。</li></ul><figure class="highlight shell"><figcaption><span>rm 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm [OPTION]... [FILE]...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">rm ./a.txt    # 删除文件 a.txt</span><br><span class="line">rm -r ./a     # -r (--recursive) 递归删除文件夹 a</span><br><span class="line">rm -f [FILE]  # -f (--force) 强制删除</span><br></pre></td></tr></table></figure><div class="note danger"><p><code>rm</code> 命令是一个非常危险的命令，不像 Windows 系统，Linux 系统没有回收站，因此删除后就无法找回。因此，一般的 shell 会将 <code>rm</code> 作为 <code>rm -i</code> 的别名，具体的别名方式会在第三章介绍，这里只需要知道在 bash 中，<code>rm</code> 其实是 <code>rm -i</code>，而 <code>-i</code> 选项会在每次移除时提示你，并要求你做确认。</p><p>！！！如果不是特殊需求，慎用 <code>-f</code> 选项强制删除！！！</p></div><ul><li><code>mkdir</code><br>mkdir 可以创建一个文件夹，是 make directory 的缩写，有的 shell 还可以进一步简写为 <code>md</code>。</li></ul><figure class="highlight shell"><figcaption><span>mkdir 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir [OPTION]... DIRECTORY...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">mkdir a         # 在当前目录下新建 a 文件夹</span><br><span class="line">mkdir -p ./a/b  # -p (--parents) 递归地创建文件夹，如果 a 不存在，则会先创建 a </span><br><span class="line">                # 文件夹，再在 a 下创建 b 文件夹</span><br><span class="line">                # 等价于 mkdir ./a ./a/b</span><br><span class="line">mkdir -v ./a    # -v (--verbose) 显示创建文件夹的详细信息</span><br></pre></td></tr></table></figure><ul><li><code>rmdir</code><br>rmdir 可以删除一个空文件夹，是 remove directory 的缩写，有的 shell 可以进一步简写为 <code>rd</code>。</li></ul><figure class="highlight shell"><figcaption><span>rmdir 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rmdir [OPTION]... DIRECTORY...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">rmdir a         # 删除当前目录下的空文件夹 a</span><br><span class="line">rmdir -p ./a/b  # -p (--parents) 递归地删除文件夹</span><br><span class="line">                # 等价于 rmkdir ./a/b ./a</span><br></pre></td></tr></table></figure><p><code>rmdir</code> 一般用于删除空文件夹，如果文件夹中有文件，建议使用 <code>rm</code> 命令。</p><h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><ul><li><code>cat</code><br>cat 命令可以查看文件的内容，是 concatenate 的缩写。<code>cat</code> 命令常和输入输出重定向运算共同使用，以完成拼接文件等操作。</li></ul><figure class="highlight shell"><figcaption><span>cat 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat [OPTION]... [FILE]...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">cat a.txt     # 在终端上打印 a.txt 中的内容</span><br><span class="line">cat &gt; a.txt   # 创建 a.txt 文件，并且接受终端输入，按 Ctrl + C 停止输入并保存</span><br><span class="line">              # 这里第一次出现了重定向运算符，不理解没有关系，这将在后面介绍</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 &lt;&lt;<span class="string">EOF 可以输入大段文字，结束输入时使用 EOF</span> 即可，EOF 不会出现在文件中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这种语法被称为 heredoc，初学者只需了解即可</span></span><br><span class="line">cat &gt; a.txt &lt;&lt;EOF</span><br><span class="line">Hello world.</span><br><span class="line">I think that Xiao Space is a fascinating website.</span><br><span class="line">What you think?</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ul><li><code>head</code><br>head 命令可以打印文件的开头几行</li></ul><figure class="highlight shell"><figcaption><span>head 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">head [OPTION]... [FILE]...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">head a.txt        # 打印 a.txt 的开头 10 行</span><br><span class="line">head -n 5 a.txt   # -n (--lines=) 打印 a.txt 的开头 5 行</span><br><span class="line">head -n -5 a.txt  # 从 a.txt 的开头打印到倒数第 5 行，不含倒数第五行</span><br></pre></td></tr></table></figure><ul><li><code>tail</code><br>tail 命令可以打印文件的结尾几行</li></ul><figure class="highlight shell"><figcaption><span>tail 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tail [OPTION]... [FILE]...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">tail a.txt        # 打印 a.txt 的结尾 10 行</span><br><span class="line">tail -n 5 a.txt   # -n (--lines=) 打印 a.txt 的结尾 5 行</span><br><span class="line">tail -n -5 a.txt  # 从 a.txt 的开头第 5 行打印到文件结尾，不含第五行</span><br></pre></td></tr></table></figure><ul><li><p><code>grep</code><br>grep 命令用于查找文件里符合条件的字符串，属于高级的 Linux 命令，这里仅作介绍，初学者用到的频率很少。</p></li><li><p><code>find</code><br>find 命令用来在指定目录下查找文件，也是属于高级的 Linux 命令，这里仅作介绍，初学者用到的频率很少。</p></li></ul><h4 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h4><p>在 Windows 上，我们经常会进行文件压缩、解压的操作，在 Linux 中，也有同样的操作。</p><ul><li><code>zip</code><br>zip 是文件压缩命令，命令参数很多，这里只介绍常用的内容，如有需求，可以使用 <code>man zip</code> 查看更多帮助。</li></ul><figure class="highlight shell"><figcaption><span>zip 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip -r test.zip ./test  # 压缩 test 文件夹生成 test.zip</span><br><span class="line">unzip test.zip          # 解压 test.zip</span><br></pre></td></tr></table></figure><ul><li><code>tar</code><br>tar 可以创建文件归档包，在 Linux 中非常常用，是 tape archive 的缩写。tar 的命令参数很多，这里只介绍常用的内容，如有需求，可以使用 <code>man tar</code> 查看更多帮助。</li></ul><figure class="highlight shell"><figcaption><span>tar 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf test.tar.gz ./test  # 压缩 test 文件夹生成 test.tar.gz</span><br><span class="line">tar -xzvf test.tar.gz         # 解压 test.tar.gz</span><br></pre></td></tr></table></figure><p>这里的选项较多，<code>-c</code> 表示 <code>--create</code> 即创建压缩文件；<code>-z</code> 表示 <code>--gzip</code> 即使用 gzip 压缩；<code>-v</code> 表示 <code>--verbose</code> 即显示命令的详细执行过程；<code>-f</code> 表示 <code>--file</code> 后面跟要创建的归档名，也就是压缩包名；<code>-x</code> 表示 <code>--extract</code> 即提取压缩文件。</p><p>当然，如果不使用 gzip 压缩，还可以使用以下的命令：</p><figure class="highlight shell"><figcaption><span>tar 命令示例，不使用 gzip</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf test.tar ./test   # 压缩 test 文件夹生成 test.tar</span><br><span class="line">tar -xvf test.tar          # 解压 test.tar</span><br></pre></td></tr></table></figure><h4 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h4><p>在 Linux 上，我们常常会有文本编辑的需求，通常，我们使用 <code>nano</code> 或 <code>vi</code> 进行文本编辑。</p><ul><li><code>nano</code><br>nano 是一个字符终端的文本编辑器，它比 vi、vim 要简单得多，比较适合 Linux 初学者使用。</li></ul><figure class="highlight shell"><figcaption><span>nano 使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nano test.txt       # 编辑 test.txt</span><br><span class="line">nano -w test.txt    # 关闭 nano 的自动换行</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220816155730.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220816155730.png" srcset="/images/placeholder.svg" alt="nano 编辑器截图"/></div><span class="image-caption">nano 编辑器截图</span></div><p>进入 nano 编辑器后，你会在整个终端的下侧看见快捷键提示，使用其提示的快捷键即可完成文件编辑，保存的操作，其中，<code>^X</code> 表示 <kbd>CTRL</kbd> + <kbd>X</kbd>，<code>M-U</code> 表示 <kbd>ALT</kbd> + <kbd>U</kbd>，依此类推。</p><p>编辑完成后，使用 <kbd>CTRL</kbd> + <kbd>O</kbd> 写入所做的修改，这时 nano 会询问你写入文件的文件名，如果文件名不改变，直接回车即可，这样就可以保存文件，然后使用 <kbd>CTRL</kbd> + <kbd>X</kbd> 退出 nano。</p><ul><li><code>vi</code> &#x2F; <code>vim</code><br>所有的 Unix Like 系统都会内置 vi 文书编辑器，其他的编辑器则不一定会存在。但是 vi 有一定的学习成本，目前使用更多的是 <code>vi</code> 的改进版 <code>vim</code>。<code>vim</code> 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。<code>vim</code> 的键盘图如下：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/vi-vim-cheat-sheet-sch.gif" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/vi-vim-cheat-sheet-sch.gif" srcset="/images/placeholder.svg" alt="vim 键盘图"/></div><span class="image-caption">vim 键盘图</span></div><p>不要被这些花花绿绿的按键吓住，其实在实际使用中，常用的按键并不多，也很好记忆。如果你想学习 <code>vim</code> 的使用，可以在终端输入 <code>vimtutor</code>，这时会有一个帮助教程教你使用 <code>vim</code>。放心，这个教程非常简单！整个教程的时长大约 20 ~ 40 分钟，学习完成后，多使用几天 vim 就能熟练掌握，这会给编程效率带来很大的提升。如果你对作者使用的 <code>vim</code> 环境感兴趣，可以点击作者的另一篇文章 <a href="/tech/my_workspace/">我的 Linux 深度学习工作环境丨环境搭建教程</a> 查看。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220816161321.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220816161321.png" srcset="/images/placeholder.svg" alt="作者的 vim 截图"/></div><span class="image-caption">作者的 vim 截图</span></div><p>由于 <code>vim</code> 非常常用，所以这里也大略介绍一下 <code>vim</code>，旨在让初学者迅速了解如何编辑、保存一个文件，如果想进一步学习，最好还是跟随 <code>vimtutor</code> 学习。</p><details open><summary> vim 简要教程 （点击可以折叠） </summary>              <div class='content'>              <p>基本上 vi&#x2F;vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p><details open><summary> 命令模式 </summary>              <div class='content'>              <p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下 <code>i</code>，并不会输入一个字符，<code>i</code> 被当作了一个命令。</p><p>以下是常用的几个命令：</p><p><code>i</code>  切换到输入模式，以输入字符。<br><code>:</code>  切换到底线命令模式，以在最底一行输入命令。<br><code>x</code>  删除当前光标所在处的字符.<br><code>dd</code> 删除当前光标所在行的所有字符。<br><code>gg</code> 将光标定位到文件的开头<br><code>G</code>  将光标定位到文件的结尾<br><code>^</code>  将光标定位到一行的开头<br><code>$</code>  将光标定位到一行的结尾</p><p>若想要编辑文本：启动 Vim，进入了命令模式，按下 <code>i</code>，切换到输入模式。初学者常犯的错误就是在命令模式下输入字符，必须要切换到输入模式才能输入字符！</p><p>当然，命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>              </div>            </details><details open><summary> 输入模式 </summary>              <div class='content'>              <p>在命令模式下按下 <code>i</code> 就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><p>字符按键以及 <kbd>Shift</kbd> 组合键，输入字符；<br>回车键 <kbd>Enter</kbd>，换行;<br>退格键 <kbd>Backspace</kbd>，删除光标前一个字符;<br>删除键 <kbd>Delete</kbd>，删除光标后一个字符;<br>方向键，在文本中移动光标<br>退出 <kbd>ESC</kbd>，退出输入模式，切换到命令模式</p>              </div>            </details><details open><summary> 底线命令模式 </summary>              <div class='content'>              <p>在命令模式下按下 <code>:</code>（英文冒号）就进入了底线命令模式。底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><p><code>q</code>  退出程序<br><code>w</code>  保存文件<br><code>wq</code> 保存并退出<br><code>q!</code> 不保存，强制退出</p>              </div>            </details>              </div>            </details><h4 id="文件链接-ln-命令"><a href="#文件链接-ln-命令" class="headerlink" title="文件链接 ln 命令"></a>文件链接 <code>ln</code> 命令</h4><p><code>ln</code> 是 Linux 的一个 <emp>非常重要</emp> 的命令，是 link files 的缩写，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用 ln 命令链接（link）它就可以，不必重复的占用磁盘空间。</p><p>链接分为两种：硬链接 (hard link) 与软链接 (symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。通常，我们使用 <emp>软链接</emp>。</p><figure class="highlight shell"><figcaption><span>ln 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ln [OPTION]... [-T] TARGET LINK_NAME</span><br><span class="line">ln [OPTION]... TARGET</span><br><span class="line">ln [OPTION]... TARGET... DIRECTORY</span><br><span class="line">ln [OPTION]... -t DIRECTORY TARGET...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">ln a.txt b.txt        # 给文件创建硬连接，b.txt 和 a.txt 的各项属性均相同</span><br><span class="line">ln -s a.txt b.txt     # -s (--symbolic) 给文件创建软链接，b.txt 相当于 a.txt 的</span><br><span class="line">                      # 快捷方式</span><br><span class="line">ln -s -f a.txt b.txt  # -f (--force) 如果 b.txt 存在，也强制链接到 a.txt</span><br></pre></td></tr></table></figure><div class="note warning"><p>硬连接只能链接在同一文件系统下的文件，既不能跨文件系统，也不能链接目录，而软链接皆可链接。</p></div><details open><summary> 随处可见的链接（点击可以折叠） </summary>              <div class='content'>              <p>在 Linux 中，随处可见链接，例如使用 <code>ls -lh /</code>，你可以看到以下输出：</p><figure class="highlight shell"><figcaption><span>ls -lh / 命令的输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">total 8.1G</span><br><span class="line">lrwxrwxrwx   1 root root    7 Apr 21 00:57 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   4 root root 4.0K Jun 17 07:52 boot</span><br><span class="line">drwxr-xr-x  20 root root 4.4K Jun 17 08:47 dev</span><br><span class="line">drwxr-xr-x 125 root root 4.0K Jun 22 05:59 etc</span><br><span class="line">drwxr-xr-x   3 root root 4.0K Jun 11 07:51 home</span><br><span class="line">lrwxrwxrwx   1 root root    7 Apr 21 00:57 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root    9 Apr 21 00:57 lib32 -&gt; usr/lib32</span><br><span class="line">lrwxrwxrwx   1 root root    9 Apr 21 00:57 lib64 -&gt; usr/lib64</span><br><span class="line">lrwxrwxrwx   1 root root   10 Apr 21 00:57 libx32 -&gt; usr/libx32</span><br><span class="line">drwx------   2 root root  16K Jun 11 07:41 lost+found</span><br><span class="line">drwxr-xr-x   2 root root 4.0K Apr 21 00:57 media</span><br><span class="line">drwxr-xr-x   2 root root 4.0K Apr 21 00:57 mnt</span><br><span class="line">drwxr-xr-x   3 root root 4.0K Jun 11 09:09 opt</span><br><span class="line">dr-xr-xr-x 713 root root    0 Jun 17 07:54 proc</span><br><span class="line">drwx------   6 root root 4.0K Jun 17 06:48 root</span><br><span class="line">drwxr-xr-x  31 root root 1020 Aug 16 13:09 run</span><br><span class="line">lrwxrwxrwx   1 root root    8 Apr 21 00:57 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   6 root root 4.0K Apr 21 01:02 snap</span><br><span class="line">drwxr-xr-x   2 root root 4.0K Apr 21 00:57 srv</span><br><span class="line">-rw-------   1 root root 8.0G Jun 11 07:42 swap.img</span><br><span class="line">dr-xr-xr-x  13 root root    0 Jun 17 07:54 sys</span><br><span class="line">drwxrwxrwt  21 root root  12K Aug 16 10:42 tmp</span><br><span class="line">drwxr-xr-x  14 root root 4.0K Apr 21 00:57 usr</span><br><span class="line">drwxr-xr-x  13 root root 4.0K Apr 21 01:01 var</span><br></pre></td></tr></table></figure><p>在每行的开头，你会发现有一串奇怪的字符，其中第一个字符就是这个文件的属性，<code>d</code> 表示 <code>directory</code> 即目录，<code>l</code> 表示 <code>link</code> 即链接，<code>-</code> 表示普通文件。观察链接项，后面使用了 <code>-&gt;</code> 符号表示了链接到的内容。说明在根目录下，其实 <code>/bin</code> 目录是 <code>/usr/bin</code> 的一个软链接。如果你运行 <code>ls -lh /bin/</code> 和 <code>ls -lh /usr/bin/</code>，你会发现它们的输出一模一样！当然，如果你使用 <code>ls -lh /bin</code>，<code>ls</code> 命令会告诉你这是一个链接。</p><p>使用链接，我们也可以像 Windows 一样创建快捷方式。</p>              </div>            </details><h3 id="终端命令补充"><a href="#终端命令补充" class="headerlink" title="终端命令补充"></a>终端命令补充</h3><p>以上介绍了 Linux 常用的文件处理命令，了解这些命令后，基本就可以很愉快地处理 Linux 上的文件了，也恭喜你有耐心看到这里，下面作者打算补充两个小知识点，可以让终端命令使用更加高效。</p><h4 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h4><p>在 Linux 实际使用过程中，我们可能希望将一些命令打印的内容输出到文件，或是将一些命令的输入从文件中读取，shell 也提供了这样的方法，即使用输入输出重定向运算符 <code>&gt;</code>, <code>&gt;&gt;</code>, <code>&lt;</code>。</p><figure class="highlight shell"><figcaption><span>输出重定向示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello World&quot; &gt; hello.txt</span><br><span class="line">echo &quot;Hello World&quot; &gt;&gt; hello.txt</span><br></pre></td></tr></table></figure><p>其中，<code>&gt;</code> 直接把内容生成到指定文件，会 <emp>覆盖</emp> 源文件中的内容，如果文件不存在会直接生成该文件；<code>&gt;&gt;</code> 则在文件尾部 <emp>追加</emp>，不会覆盖掉文件中原有的内容，如果文件不存在会直接生成该文件。</p><details ><summary> 重定向深入讲解（点击可以展开） </summary>              <div class='content'>              <p>一般情况下，每个Linux 命令运行时都会打开三个文件</p><ul><li>标准输入文件 (stdin)：stdin 的文件描述符为0，Linux 程序默认从 stdin 读取数据。</li><li>标准输出文件 (stdout)：stdout 的文件描述符为1，Linux 程序默认向 stdout 输出数据。</li><li>标准错误文件 (stderr)：stderr 的文件描述符为2，Linux 程序会向 stderr 流中写入错误信息。</li></ul><p>默认情况下，<code>command &gt; file</code> 将 stdout 重定向到 file，<code>command &lt; file</code> 将 stdin 重定向到 file。如果希望 stderr 重定向到 file，可以这样写：</p><figure class="highlight shell"><figcaption><span>标准错误重定向</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command 2&gt;file</span><br></pre></td></tr></table></figure><p>其中，<code>2</code> 表示标准错误文件 (stderr)。</p><p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p><figure class="highlight shell"><figcaption><span>标准输出与标准错误重定向</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command &gt; file 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>在 Linux 中，有一个特殊文件，<code>/dev/null</code>，写入它的所有内容都会被直接丢弃，如果尝试从该文件读取内容，那么什么也读不到。所以，如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 <code>/dev/null</code>：</p><figure class="highlight shell"><figcaption><span>丢弃命令输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command &gt; /dev/null</span><br></pre></td></tr></table></figure><p>如果也想同时屏蔽标准错误信息，则可以写为：</p><figure class="highlight shell"><figcaption><span>丢弃命令所有输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><div class="note warning"><p>这里的 <code>2</code> 和 <code>&gt;</code> 之间不可以有空格，<code>2&gt;</code> 是一体的时候才表示错误输出。</p></div>              </div>            </details><h4 id="在一行执行多条命令"><a href="#在一行执行多条命令" class="headerlink" title="在一行执行多条命令"></a>在一行执行多条命令</h4><p>很多情况下，我们需要在同一行输入多条命令，或是根据上一条命令的结果执行一些命令，这时可以使用 <code>&amp;&amp;</code>, <code>||</code> 完成命令的连接，用法如下：</p><figure class="highlight shell"><figcaption><span>&&, || 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command1 &amp;&amp; command2</span><br><span class="line">command1 || command2</span><br></pre></td></tr></table></figure><p>其中，<code>&amp;&amp;</code> 是如果前一条命令执行成功则执行下一条命令，即如果 <code>command1</code> 执行成功，则执行 <code>command2</code>；<code>||</code> 与 <code>&amp;&amp;</code> 命令相反，执行不成功时执行后续命令，即如果 <code>command1</code> 执行失败，则执行 <code>command2</code>。</p><p>例如我们可以使用</p><figure class="highlight shell"><figcaption><span>&& 举例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir a &amp;&amp; cd a</span><br></pre></td></tr></table></figure><p>这样就可以先创建文件夹 a，如果文件夹创建成功，则进入文件夹 a。</p><p>还有一种不同寻常的命令连接方式，就是通过管道运算符 <code>|</code>，使用如下：</p><figure class="highlight shell"><figcaption><span>管道运算示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command1 | command2</span><br></pre></td></tr></table></figure><p>管道运算可以将前面进程的输出（stdout）直接作为下一个进程的输入（stdin），这在一些命令使用时非常便利。</p><figure class="highlight shell"><figcaption><span>管道使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep bash</span><br></pre></td></tr></table></figure><p>其中 <code>ps aux</code> 是显示 Linux 的所有进程，然后使用管道传递到 <code>grep</code> 命令，表示查找其中的 <code>bash</code> 字符串，这样终端就会输出 <code>bash</code> 进程的信息。</p><div class="note success"><p>至此，恭喜你完成了第二章的学习！第二章主要带读者了解了 Linux 文件系统及其对应的命令，学会后，就可以愉快地操作 Linux 系统的文件了，当然，在使用过程中，你可能会遇到你没有修改某个文件的权限，或是无法进入某个目录。下面，第三章将介绍 Linux 的用户与权限控制的相关内容，让你的普通用户也能在运行一些命令时提权为管理员用户！</p></div></div><div class="story post-story"><h2 id="第三章-Linux-用户与权限控制"><a href="#第三章-Linux-用户与权限控制" class="headerlink" title="第三章 Linux 用户与权限控制"></a>第三章 Linux 用户与权限控制</h2><p>我们都说，Linux 很安全，这与 Linux 的用户权限控制是分不开的。在 Linux 上，没有权限意味着你没有办法读、写、执行一些文件。并且，对 Linux 而言，root 用户（特权用户）几乎能干任何事，甚至可以删除整个系统！</p><p>Linux 的权限管理，与两个重要的特性关联紧密：一切皆文件；多用户操作系统。多用户操作系统，意味着用户之间的资源需要隔离，就有了权限存在的必要性；一切皆文件，意味着权限管理的目标只有文件。</p><p>本教程主要针对 Linux 原生的权限管理机制（Discretionary Access Control, DAC），不会涉及 SELinux 的内容，如果你的服务器使用的是 SELinux 权限控制，会非常严格，这显然不在本文的讨论范围内。</p><h3 id="用户与组"><a href="#用户与组" class="headerlink" title="用户与组"></a>用户与组</h3><p>Linux 对账户和组的管理通过 ID 实现，而不是用户名。用户和组的 ID 分别对应 UID (User ID) 和 GID (Group ID)。一个用户可以属于多个组，但只能属于一个基本组，可以属于多个附加组。用户用于精确授权，组用于批量授权。</p><details ><summary> 基本组和附加组的区别（点击可以展开） </summary>              <div class='content'>              <p>基本组：如果没有指定用户组，创建用户的时候系统会默认同时创建一个和这个用户名同名的组，这个组就是基本组，不可以把用户从基本组中删除。在创建文件时，文件的所属组就是用户的基本组。</p><p>附加组：除了基本组之外，用户所在的其他组，都是附加组。用户是可以从附加组中被删除的。</p>              </div>            </details><h3 id="sudo-命令"><a href="#sudo-命令" class="headerlink" title="sudo 命令"></a><code>sudo</code> 命令</h3><p>如果你是普通用户，那你如果要进行系统软件安装或是访问系统文件夹，<code>sudo</code> 会是你最常用的命令。<code>sudo</code> 是 superuser do 的简称，意思就是使用特权用户命令后面的命令，使用方式非常简单：</p><figure class="highlight shell"><figcaption><span>sudo 的使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo command</span><br></pre></td></tr></table></figure><p>当你使用管理员权限运行命令时，<code>sudo</code> 会要求你输入你的账号密码。如果你的账号没有使用 <code>sudo</code> 的权限，请使用管理员账号登录并使用 <code>sudo</code>。</p><details ><summary> 决定用户是否能使用 sudo（点击可以展开） </summary>              <div class='content'>              <p>通过文件 <code>/etc/sudoers</code> 可以控制用户能否使用 <code>sudo</code>。</p><figure class="highlight shell"><figcaption><span>/etc/sudoers 文件内容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file MUST be edited with the &#x27;visudo&#x27; command as root.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Please consider adding local content in /etc/sudoers.d/ instead of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">directly modifying this file.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># See the man page for details on how to write a sudoers file.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">Defaults        env_reset</span></span><br><span class="line">Defaults        mail_badpass</span><br><span class="line">Defaults        secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin&quot;</span><br><span class="line">Defaults        use_pty</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This allows running arbitrary commands, but so does ALL, and it means</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">different sudoers have their choice of editor respected.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Defaults:%sudo env_keep += <span class="string">&quot;EDITOR&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Completely harmless preservation of a user preference.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Defaults:%sudo env_keep += <span class="string">&quot;GREP_COLOR&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">While you shouldn<span class="string">&#x27;t normally run git as root, you need to with etckeeper</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">Defaults:%sudo env_keep += &quot;GIT_AUTHOR_* GIT_COMMITTER_*&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Per-user preferences; root won&#x27;</span>t have sensible values <span class="keyword">for</span> them.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Defaults:%sudo env_keep += <span class="string">&quot;EMAIL DEBEMAIL DEBFULLNAME&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;sudo scp&quot;</span> or <span class="string">&quot;sudo rsync&quot;</span> should be able to use your SSH agent.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Defaults:%sudo env_keep += <span class="string">&quot;SSH_AGENT_PID SSH_AUTH_SOCK&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ditto <span class="keyword">for</span> GPG agent</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Defaults:%sudo env_keep += <span class="string">&quot;GPG_AGENT_INFO&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Host <span class="built_in">alias</span> specification</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User <span class="built_in">alias</span> specification</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmnd <span class="built_in">alias</span> specification</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">User privilege specification</span></span><br><span class="line">root    ALL=(ALL:ALL) ALL</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Members of the admin group may gain root privileges</span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">admin ALL=(ALL) ALL</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Allow members of group sudo to execute any <span class="built_in">command</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">sudo   ALL=(ALL:ALL) ALL</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See sudoers(5) <span class="keyword">for</span> more information on <span class="string">&quot;@include&quot;</span> directives:</span></span><br><span class="line"></span><br><span class="line">@includedir /etc/sudoers.d</span><br></pre></td></tr></table></figure><p>文件的注释很详尽，从中可以看出，root 用户可以无限制地使用 sudo，sudo 组下的所有用户也能够使用 sudo。所以，让一个用户使用 sudo 的最好方式，就是将其添加入 sudo 组中。</p>              </div>            </details><h3 id="创建、删除、修改用户或组"><a href="#创建、删除、修改用户或组" class="headerlink" title="创建、删除、修改用户或组"></a>创建、删除、修改用户或组</h3><div class="note warning"><p>本节所有的内容都需要使用超级用户权限才能运行，也就是说，你需要可以使用 <code>sudo</code> 命令才能运行。如果你没有使用 <code>sudo</code> 的权限，也不必担心，你不需要在机器上实际运行这些指令，本教程会详细讲解其效果。</p></div><h4 id="useradd-命令"><a href="#useradd-命令" class="headerlink" title="useradd 命令"></a><code>useradd</code> 命令</h4><p><code>useradd</code> 可以创建一个账号，具体用法如下：</p><figure class="highlight shell"><figcaption><span>useradd 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd xiao</span><br></pre></td></tr></table></figure><p>上述命令可以创建一个名为 xiao 的用户，前面的 <code>sudo</code> 说明 <code>useradd</code> 命令需要使用特权用户运行。</p><p>创建完成后，可以查看 <code>/etc/passwd</code> 文件下查看刚刚创建的用户：</p><figure class="highlight shell"><figcaption><span>查看 passwd 文件信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p>在最后一行可以看到刚刚添加的用户，当然如果你觉得终端输出了大量的无用信息，你可以使用前面章节提到的管道运算符查找：</p><figure class="highlight shell"><figcaption><span>利用管道查看指定用户名的信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd | grep xiao</span><br></pre></td></tr></table></figure><p>终端的输出为：</p><figure class="highlight shell"><figcaption><span>账号的信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiao:x:1001:1001::/home/xiao:/bin/sh</span><br></pre></td></tr></table></figure><p>在 Linux 系统文件中，通常不同的字段用 <code>:</code> 分隔，所以你可以看到这个文件里面有 7 个字段，分别是 <code>用户名:密码:UID:GID:描述信息:家目录:登录shell</code> 注意密码字段，里面只存储了一个 <code>x</code>，表示有密码，真正的密码出于安全考虑，存储在 <code>/etc/shadow</code> 中。另外这个账号没有描述信息，所以你看到描述信息对应的字段是空的。</p><p>如果你想更改登录 shell，可以直接修改 <code>/etc/passwd</code> 文件，将其改为你想要的 shell，例如 <code>/bin/bash</code>，当然，更推荐你使用 <code>chsh</code> 命令更改。chsh 就是 change shell 的缩写，你可以使用 <code>chsh [-s shell] [username]</code> 修改指定用户的登录 shell。</p><h4 id="groupadd-命令"><a href="#groupadd-命令" class="headerlink" title="groupadd 命令"></a><code>groupadd</code> 命令</h4><p><code>groupadd</code> 可以创建一个组，具体用法如下：</p><figure class="highlight shell"><figcaption><span>groupadd 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd xx</span><br></pre></td></tr></table></figure><p>上述命令可以创建一个名为 xx 的组，前面的 <code>sudo</code> 说明 <code>groupadd</code> 命令需要使用特权用户运行。</p><p>创建完成后，可以查看 <code>/etc/group</code> 文件下查看刚刚创建的组：</p><figure class="highlight shell"><figcaption><span>利用管道查看指定组的信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group | grep xx</span><br></pre></td></tr></table></figure><p>终端的输出为：</p><figure class="highlight shell"><figcaption><span>组的信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xx:x:1002:</span><br></pre></td></tr></table></figure><p>可以看出，组的文件有 4 个字段，分别是 <code>组名:组密码:GID:组内用户列表</code> 在这里，组密码是指非本组用户切换到本组时的密码。</p><h4 id="id-命令"><a href="#id-命令" class="headerlink" title="id 命令"></a><code>id</code> 命令</h4><p><code>id</code> 可以查看一个用户的详情，会显示 UID，GID，以及所属的组。</p><figure class="highlight shell"><figcaption><span>id 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id xiao</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">uid=1000(xiao) gid=1000(xiao)</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">groups</span>=1000(xiao),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd)</span></span><br></pre></td></tr></table></figure><p>这里 xiao 用户就在很多组里面，由于其在 <code>sudo</code> 组中，所以 xiao 用户可以使用 <code>sudo</code>。</p><h4 id="passwd-命令"><a href="#passwd-命令" class="headerlink" title="passwd 命令"></a><code>passwd</code> 命令</h4><p><code>passwd</code> 命令用于修改某个用户的密码</p><figure class="highlight shell"><figcaption><span>passwd 命令示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd xiao</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">New password:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Retype new password:</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">passwd: password updated successfully</span></span><br></pre></td></tr></table></figure><p>你需要使用 <code>sudo</code> 权限才能修改密码。注意， Linux 为了安全起见，在输入密码时并不会显示位数，所以你不会看到终端有任何改变，不用担心，大胆输入后回车即可。</p><h4 id="usermod-命令"><a href="#usermod-命令" class="headerlink" title="usermod 命令"></a><code>usermod</code> 命令</h4><p><code>usermod</code> 命令可以修改用户信息，如密码、家目录、组信息等等。这里的 mod 是 modify 的简称。</p><figure class="highlight shell"><figcaption><span>usermod 示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod xiao -c 好耶</span><br><span class="line">cat /etc/passwd | grep xiao</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xiao:x:1001:1001:好耶:/home/xiao:/bin/sh</span></span><br></pre></td></tr></table></figure><p>其中常用参数如下，如果想获取所有参数，可以使用 <code>usermod --help</code></p><figure class="highlight shell"><figcaption><span>usermod 常用参数列表</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Usage: usermod [options] LOGIN</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -c, --comment COMMENT         new value of the GECOS field</span><br><span class="line">  -d, --home HOME_DIR           new home directory for the user account</span><br><span class="line">  -g, --gid GROUP               force use GROUP as new primary group</span><br><span class="line">  -G, --groups GROUPS           new list of supplementary GROUPS</span><br><span class="line">  -p, --password PASSWORD       use encrypted password for the new password</span><br><span class="line">  -s, --shell SHELL             new login shell for the user account</span><br><span class="line">  -u, --uid UID                 new UID for the user account</span><br></pre></td></tr></table></figure><h4 id="userdel-groupdel-命令"><a href="#userdel-groupdel-命令" class="headerlink" title="userdel, groupdel 命令"></a><code>userdel</code>, <code>groupdel</code> 命令</h4><p><code>userdel</code>, <code>groupdel</code> 命令分别用于删除用户与删除组。</p><figure class="highlight shell"><figcaption><span>userdel, groupdel 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel xiao</span><br><span class="line">sudo groupdel xx</span><br></pre></td></tr></table></figure><h4 id="其他相关文件"><a href="#其他相关文件" class="headerlink" title="其他相关文件"></a>其他相关文件</h4><p>上面已经介绍了 <code>/etc/passwd</code> 及 <code>/etc/group</code> 两个文件，实际上，<code>/etc/shadow</code> 及 <code>/etc/gshadow</code> 也与 Linux 用户密切相关：</p><ul><li><code>/etc/shadow</code> 文件</li></ul><figure class="highlight shell"><figcaption><span>利用管道查找指定用户的信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/shadow | grep xiao</span><br></pre></td></tr></table></figure><p>需要注意，这个文件读取就需要超级管理员的权限，所以需要使用 <code>sudo</code>，命令输出如下：</p><figure class="highlight shell"><figcaption><span>/etc/shadow 文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiao:Dj/alNi.YlkeDIZ0:19154:0:99999:7:::</span><br></pre></td></tr></table></figure><p>总计有 9 个字段，分别是 <code>用户名:加密密码:最后修改时间:最小修改时间间隔:密码有效期:密码需要变更前的警告天数:密码过期后的宽限时间:账号失效时间:保留字段</code>，其中，加密密码使用了 SHA-512 散列算法，难以从散列后的值推算原来的值。因此密码存储是安全的。</p><ul><li><code>/etc/gshadow</code> 文件</li></ul><figure class="highlight shell"><figcaption><span>利用管道查找指定组的信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/gshadow | grep xiao</span><br></pre></td></tr></table></figure><p>需要注意，这个文件读取就需要超级管理员的权限，所以需要使用 <code>sudo</code>，命令输出如下：</p><figure class="highlight shell"><figcaption><span>/etc/gshadow 文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiao:!::</span><br></pre></td></tr></table></figure><p>总计有 4 个字段，分别是 <code>组名:组密码:组管理员名:支持的账号名</code>。</p><h4 id="用户登录时的系统行为"><a href="#用户登录时的系统行为" class="headerlink" title="用户登录时的系统行为"></a>用户登录时的系统行为</h4><p>当用户登录系统时，实际上是调用了 <code>login</code> 程序进行验证，首先 <code>login</code> 程序会对用户名进行分析：如果用户名不是 root，且存在 <code>/etc/nologin</code> 文件，login 将输出 nologin 文件的内容，然后退出。通过验证后，会校验用户名及密码，如果校验成功，那么会启动登录 shell。</p><p>在启动登录 shell 时，如果登录 shell 是 <code>bash</code>，那么会读取对应家目录下的 <code>.bashrc</code> 并执行。<code>.bashrc</code> 由于是 <code>.</code> 开头的文件，所以在使用 <code>ls</code> 时不会显示，需要使用 <code>ls -a</code> 才会显示。<code>.bashrc</code> 中的 <code>rc</code> 的含义有很多种说法，常见的可以认为是 runcom, run configuration, run control 的缩写。</p><p>查看 <code>.bashrc</code> 的内容，你会发现一些有趣的代码：</p><figure class="highlight shell"><figcaption><span>.bashrc 的有趣内容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">some more <span class="built_in">ls</span> aliases</span></span><br><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias la=&#x27;ls -A&#x27;</span><br><span class="line">alias l=&#x27;ls -CF&#x27;</span><br></pre></td></tr></table></figure><p><code>alias</code> 命令是别名的意思，你可以为一个较长的命令起一个简短的别名，例如，在 <code>bash</code> 中，你输入 <code>ll</code> 就相当于 <code>ls -alF</code>。</p><details open><summary> 利用 .bashrc 配置环境变量（点击可以折叠） </summary>              <div class='content'>              <p>环境变量是指 shell 程序运行时能够直接使用的变量，例如：</p><figure class="highlight shell"><figcaption><span>环境变量示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>其中 <code>PATH</code> 就是一个环境变量，访问时在前面加上美元符号 <code>$</code> 即可，我们可以这样将环境变量赋值：</p><figure class="highlight shell"><figcaption><span>赋值环境变量</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD=/home/xiao/lib</span><br></pre></td></tr></table></figure><p>如果想在 <code>PATH</code> 变量中追加内容，可以这么写：</p><figure class="highlight shell"><figcaption><span>在 PATH 中追加内容</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/home/xiao/lib</span><br></pre></td></tr></table></figure><p>这就相当于把 <code>/home/xiao/lib</code> 追加到 <code>PATH</code> 变量后。但是这么写，有一个巨大的问题，那就是如果关闭后，重新启动一个 shell，那么辛辛苦苦配置的变量就没有了，这时，我们就可以在 <code>.bashrc</code> 文件末尾添加这样的 <code>export</code> 命令，使得环境变量在注销重新登录后依然有效。</p><p>那么类似 PATH 这样的环境变量有什么用呢？通常，在不同的 shell 程序中，可能会读取不同的环境变量，但 PATH 变量是一个很特殊的环境变量，它是 shell 查找可执行程序的路径集合。如果你想使用的程序不在 PATH 目录下，那么你就不能直接调用。你可以使用 <code>which</code> 命令查看当前使用的程序的绝对路径，例如：</p><figure class="highlight shell"><figcaption><span>查找程序的绝对路径</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">which ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/bin/ls</span></span><br></pre></td></tr></table></figure><p>你会发现，我们常用的 <code>ls</code> 命令，其实在 <code>/usr/bin</code> 目录下，而这个目录，正是在 PATH 环境变量里。如果你运行：</p><figure class="highlight shell"><figcaption><span>将 PATH 清空</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=</span><br></pre></td></tr></table></figure><p>那么你再试试能不能使用 <code>ls</code> 命令了，你会发现 shell 提醒你找不到 ls 命令。这就是环境变量的作用。</p>              </div>            </details><details open><summary> 偏题一下，其实 Windows 也有环境变量（点击可以折叠） </summary>              <div class='content'>              <p>其实 Windows 系统在运行时也有环境变量，并且也有 PATH 变量。在使用命令提示符时，除了命令提示符的内置命令，大多命令也是在 PATH 中寻找，在 Windows 中设置环境变量使用 <code>set</code>, <code>setx</code> 命令，这里不再展开。或者直接打开高级系统设置，环境变量，进行修改。需要注意备份，如果环境变量丢失，有很多程序都不能正常运行！</p>              </div>            </details><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p>我们随便查看一个文件 <code>ls -lh /etc/passwd</code>：</p><figure class="highlight shell"><figcaption><span>/etc/passwd 的权限</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- 1 root root 1.9K Aug 16 16:30 /etc/passwd</span><br></pre></td></tr></table></figure><p>从左到右，依次是：</p><ul><li>1 个字符，表示文件类型：<code>-</code> 表示文件，<code>d</code> 表示目录，<code>c</code> 表示字符型文件，<code>l</code> 表示链接文件，这里是 <code>-</code> 表示文件</li><li>9 个字符，表示文件权限：分别是文件所有者、文件所有人所属组、其它人的权限，依次为读、写、执行，即 rwx，如果有权限则用字母，如果没有对应的权限，则使用 <code>-</code> 代替，这里是 <code>rw-r--r--</code> 表示文件所有者 root 有读写权限，同属于 root 组的用户有读权限，其他用户有读权限</li><li>1 个数字，表示连接计数，这里是 1</li><li>文件所有者，这里是 root</li><li>文件所属组，这里是 root</li><li>文件大小，这里是 1.9K</li><li>修改日期，这里是 8 月 16 日 16 时 30 分</li><li>文件名，这里是 &#x2F;etc&#x2F;passwd</li></ul><p><code>rwx</code> 权限很好理解，<code>r</code> 是 read，表示读权限， <code>w</code> 是 write，表示写权限， <code>x</code> 是 execute，表示可执行权限。我们可以通过 <code>chmod</code> 及 <code>chown</code> 命令更改文件权限。</p><h4 id="chmod-命令"><a href="#chmod-命令" class="headerlink" title="chmod 命令"></a><code>chmod</code> 命令</h4><p><code>chmod</code> 命令可以修改文件或目录的权限，是 change file mode bits 的简称。</p><figure class="highlight shell"><figcaption><span>chmod 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x hello.sh</span><br></pre></td></tr></table></figure><p>这就是为 <code>hello.sh</code> 文件添加可执行权限。为了更好地进行权限管理，人们发明了一种计数的方法，实现快速的权限控制，其中 <code>r</code> 读权限等于 4，<code>w</code> 写权限等于 2，<code>x</code> 可执行权限 等于 1，如果需要几种权限，将其加起来即可，这样我们就可以用 3 个数字代表这三种权限了。例如要将 <code>hello.sh</code> 的权限更改为 <code>rwxr-xr-x</code>，只需运行：</p><figure class="highlight shell"><figcaption><span>chmod 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 755 hello.sh</span><br></pre></td></tr></table></figure><p>之前使用的 <code>chmod 600 FILE</code> 其实就是将文件权限改为仅所有者用户可以读写，同组用户或其他用户都不可读写也不能执行。</p><h4 id="chown-命令"><a href="#chown-命令" class="headerlink" title="chown 命令"></a><code>chown</code> 命令</h4><p><code>chown</code> 命令可以修改文件的所有者与所有组，是 change owner 的简称。</p><figure class="highlight shell"><figcaption><span>chown 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chown root:root hello.sh   # 将 hello.sh 的所有者及所有组均设为 root</span><br><span class="line">sudo chown -R xiao:xiao ~/a     # 将家目录下 a 目录的所有子目录与文件的</span><br><span class="line">                                # 所有者及所有组设为 xiao</span><br></pre></td></tr></table></figure><div class="note success"><p>至此，恭喜你完成了第三章的学习！第三章主要带读者了解了 Linux 用户与权限控制的有关内容，同时也简要涉及了环境变量，命令别名等内容，能看到这里，实属不易！目前，你已经学会了 Linux 文件处理，并且大部分的权限问题都能正确处理了。现在，我们已经可以愉快地使用 Linux 系统了。第四章就将介绍 Linux 上软件的安装与卸载，学会后，你就可以扩充自己的 Linux 命令库，使用其他人写好的，便利的程序辅助自己的开发与科研，也可以自己探索 Linux 系统了！</p></div></div><div class="story post-story"><h2 id="第四章-在-Linux-上安装-x2F-卸载软件"><a href="#第四章-在-Linux-上安装-x2F-卸载软件" class="headerlink" title="第四章 在 Linux 上安装 &#x2F; 卸载软件"></a>第四章 在 Linux 上安装 &#x2F; 卸载软件</h2><div class="note success"><p>首先恭喜你看到了这里，后面的内容将会轻松不少，大多就是安装一些软件与一些好的软件的推荐。不再会有大段知识性的内容。</p></div><p>你可能还不清楚 Linux 软件安装的便利之处，我先询问一个问题，如何在 Windows 上安装软件？可能有人会说，有 XX 软件管家，但马上有人反驳，这个 XX 软件管家上面的软件并不是官方来源，里面有可能有捆绑或是广告，所以正确的方法应该是去找软件的官网，然后下载安装包，安装，然后配置，再运行。</p><p>实际上，这个流程听上去就非常麻烦。在 Linux 上，你就不会有这些烦恼了，因为几乎每个 Linux 发行版都内置了一个包管理器，你可以使用包管理器，输入一行命令，即可完成软件搜索、安装、卸载等等操作。相信你一定觉得很便利，下面我们就来看看如何使用 Linux 包管理器安装卸载软件。</p><h3 id="使用包管理器"><a href="#使用包管理器" class="headerlink" title="使用包管理器"></a>使用包管理器</h3><p>在不同的 Linux 发行版上，有不同的包管理器，例如，在 <code>Ubuntu</code> 上，使用 <code>apt</code> 管理；在 <code>Cent OS</code> 上，使用 <code>yum</code> 管理；在 <code>Arch Linux</code> 上，使用 <code>pacman</code> 管理；在 <code>Gentoo</code> 上，使用 <code>emerge</code> 管理，不一而足。这些包管理器作者都或多或少接触过，它们的使用思路其实都是相通的，本教程为了便利起见，就以 <code>apt</code> 包管理器为例，讲解使用方法。</p><p>首先，在使用包管理器前，应该先换源，因为一些原因，部分包的下载连接在国内无法访问，所以我们需要把包管理器的软件更新源改为国内源。对于 <code>ubuntu</code> 而言，访问 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华大学开源镜像站丨Ubuntu 镜像使用帮助</a>，上面详细介绍了如何更换软件源。你需要根据 Ubuntu 的版本选择，如果你不清楚你的 Ubuntu 的版本号，可以使用 <code>cat /etc/issue</code> 查看。</p><p>更换软件源后，你就可以正常使用包管理器了。</p><figure class="highlight shell"><figcaption><span>apt 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update       # 更新软件源，这是安装、升级包前必做的命令</span><br><span class="line">sudo apt upgrade      # 升级所有可升级的软件包</span><br><span class="line">sudo apt install &lt;package_name&gt; # 安装软件包</span><br><span class="line">sudo apt search &lt;keyword&gt;       # 根据关键字查找软件包</span><br><span class="line">sudo apt remove &lt;package_name&gt;  # 移除软件包</span><br><span class="line">sudo apt purge &lt;package_name&gt;   # 移除软件包和配置文件</span><br><span class="line">sudo apt autoremove             # 清理不再使用的依赖和库文件</span><br><span class="line">sudo apt show &lt;package_name&gt;    # 显示软件包具体信息</span><br><span class="line">apt list --installed            # 列出所有已安装的软件包</span><br></pre></td></tr></table></figure><p><code>apt</code> 的强大之处就在于可以自动处理软件包的依赖，它会帮你安装这个软件所依赖的其他软件，免去你配置环境的苦恼。</p><p>下面举几个实际使用的例子，加深读者的理解</p><figure class="highlight shell"><figcaption><span>apt 升级系统中的所有包</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>apt 安装 ranger 软件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ranger</span><br></pre></td></tr></table></figure><p>你会看到这样的输出：</p><figure class="highlight shell"><figcaption><span>apt 安装 ranger 的输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  bzip2 libdeflate0 libgc1 libgif7 libid3tag0 libimlib2 libjbig0</span><br><span class="line">  libjpeg-turbo8 libjpeg8 libtiff5 libwebp7 libx11-xcb1</span><br><span class="line">  libxcb-shm0 w3m w3m-img</span><br><span class="line">Suggested packages:</span><br><span class="line">  bzip2-doc atool caca-utils highlight | python3-pygments mediainfo | </span><br><span class="line">  exiftool poppler-utils | mupdf-tools unoconv</span><br><span class="line">  cmigemo dict dict-wn dictd libsixel-bin mime-support w3m-el xdg-utils xsel</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  bzip2 libdeflate0 libgc1 libgif7 libid3tag0 libimlib2 libjbig0 </span><br><span class="line">  libjpeg-turbo8 libjpeg8 libtiff5 libwebp7 libx11-xcb1</span><br><span class="line">  libxcb-shm0 ranger w3m w3m-img</span><br><span class="line">0 upgraded, 16 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 2,390 kB of archives.</span><br><span class="line">After this operation, 7,365 kB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y/n]</span><br></pre></td></tr></table></figure><p><code>apt</code> 询问你是否继续，大写 <code>Y</code> 说明 <code>Y</code> 是默认选择，也就是说如果你想继续，可以直接回车，或者输入 <code>y</code> 或 <code>Y</code> 然后回车都可安装。如果你后悔了，那么输入 <code>n</code> 即可退出安装。</p><p>选择继续后，稍事等待，即可安装完成。这时，你可以在终端输入 <code>ranger</code> 使用刚刚安装的软件。ranger 是一个方便的文件管理软件，左右方向键可以切换上下级目录，上下键可以更改目录，这样就可以快速浏览文件了，按 <kbd>Q</kbd> 可以退出。</p><p>如果想要卸载 ranger 可以使用以下命令：</p><figure class="highlight shell"><figcaption><span>apt 卸载 ranger</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove ranger      # 移除 ranger 软件包</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者直接使用下面的命令，完全清除 ranger 包及所有数据</span></span><br><span class="line">sudo apt purge ranger</span><br></pre></td></tr></table></figure><p>这就是 Linux 安装软件的基本步骤了，非常便利。如果你想安装软件，只要使用 <code>apt</code> 即可。那么如果我想安装一个软件，但我不清楚这个软件包的名称怎么办呢？这时可以使用 <code>apt search</code> 搜索。</p><figure class="highlight shell"><figcaption><span>apt 搜索示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt search python</span><br></pre></td></tr></table></figure><p>你会看到所有含有 python 的软件包，当然这个数量实在是太多了，我们可以使用 <code>grep</code> 进一步查找 python 开头的软件包</p><figure class="highlight shell"><figcaption><span>apt 搜索结合 grep 命令</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt search python | grep ^python</span><br></pre></td></tr></table></figure><p>比方说你找到了你想要的 <code>python3.10</code>，那么就可以使用 <code>sudo apt install python3.10</code> 安装了。</p><h3 id="编译安装软件"><a href="#编译安装软件" class="headerlink" title="编译安装软件"></a>编译安装软件</h3><p>有些情况下，部分软件没有提供二进制包，也就是说，有些软件只提供了源代码，或是只有其他 Linux 发行版格式的软件包。这时，我们可以选择自行编译安装。</p><p>还有些情况，你不是系统的管理员（没有 <code>sudo</code> 权限），无法使用包管理器 <code>apt</code> 安装软件，那么你就可以使用编译安装的方法，这样，你就没有必要使用管理员权限安装软件了。</p><p>你或许认为这太麻烦，毕竟我自己写的程序还不能编译通过，我还能很容易地编译其他人的程序吗？实际上，在 Linux 下使用源代码形式发行的软件，大多编译步骤非常简单，你只需要在第一次编译前安装好编译环境，后面的操作也就相当便利了。</p><p>一般来说，编译过程可以分为两步，第一步是将源码编译为目标文件，第二步是将目标文件链接为可执行程序。其中第二步需要处理错综复杂的依赖关系，好在，Linux 有 <code>make</code> 命令，可以通过 Makefile 文件自动地完成链接功能。大多数软件的源代码都会自带一个 <code>configure</code> 脚本，他可以根据当前系统的环境生成 Makefile 文件，然后就可以愉快地使用 <code>make</code> 完成源代码的编译。</p><p>Linux 源码安装步骤基本可以分为 5 步：</p><ol><li>获取源代码并解压</li><li>查看 INSTALL 或 README 文件，开发者会在文件中详细描述如果安装</li><li>使用 <code>configure</code> 命令，生成 Makefile 文件</li><li>编译，执行 <code>make</code> 命令</li><li>安装，执行 <code>make install</code> 将上一步编译好的文件安装到指定的目录或系统中</li></ol><p>不同的软件编译安装方法可能并不相同，所以需要仔细阅读 INSTALL 或 README 文件，开发者会详细说明其编译安装的方法，以及编译所需的软件。</p><p>下面，我将以编译安装 nginx 为例，进行说明：</p><h4 id="编译安装-nginx"><a href="#编译安装-nginx" class="headerlink" title="编译安装 nginx"></a>编译安装 nginx</h4><ul><li>安装编译所需的软件</li></ul><p>在 Ubuntu 系统中，你可以使用 <code>sudo apt install build-essential</code> 安装基本的编译工具链。</p><figure class="highlight shell"><figcaption><span>安装编译工具链</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt install wget curl git </span><br><span class="line">sudo apt install libpcre3 libpcre3-dev libssl-dev zlib1g zlib1g-dev</span><br></pre></td></tr></table></figure><ul><li>下载源代码并解压</li></ul><p>在这里，我们使用 <code>wget</code> 命令下载源代码，如果源代码是用 git 存储库形式存储，你可以使用 <code>git clone</code> 命令克隆下来。</p><figure class="highlight shell"><figcaption><span>下载源代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.21.4.tar.gz</span><br></pre></td></tr></table></figure><p><code>wget</code> 命令其实就是将文件下载到当前目录下，与浏览器提供的下载功能是一样的。</p><figure class="highlight shell"><figcaption><span>解压源代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.21.4.tar.gz</span><br></pre></td></tr></table></figure><ul><li>阅读安装说明</li></ul><p>源代码解压完成后，我们进入源代码的目录，查看安装的说明</p><figure class="highlight shell"><figcaption><span>查看安装说明</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.21.4</span><br><span class="line">cat README</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Documentation is available at http://nginx.org</span></span><br></pre></td></tr></table></figure><p>软件告诉你查看其官网，在官网下，可以看到右侧有 <code>Building nginx from Sources</code> 一项，点击即可查看 <a href="http://nginx.org/en/docs/configure.html">相关说明</a>。</p><ul><li>生成 Makefile 文件</li></ul><p>阅读说明后，我们可以生成 Makefile 文件了</p><figure class="highlight shell"><figcaption><span>生成 Makefile 文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx \</span><br><span class="line">            --with-http_ssl_module \</span><br><span class="line">            --with-http_stub_status_module \</span><br><span class="line">            --with-file-aio \</span><br><span class="line">            --with-http_v2_module \</span><br><span class="line">            --with-http_realip_module \</span><br><span class="line">            --user=nginx \</span><br><span class="line">            --group=nginx</span><br></pre></td></tr></table></figure><p>这里为了说明 configure 的作用，我们使用了很多个选项，这些选项的详细说明在上面的网页中可以查看，其中 <code>--prefix</code> 是指软件编译完后，安装的位置，这里我们设置成了 <code>/usr/local/nginx</code>，这个目录通常就是 Linux 建议的用户编译软件的安装目录。</p><p>当你执行后，你会看到 <code>configure</code> 程序正在检查你的系统环境以及编译器的信息，如果报错 <code>Error</code> 的话，可以查看缺少的库，并使用软件包安装即可。在执行完毕后，你可以看到一些摘要。</p><figure class="highlight shell"><figcaption><span>configure 完成后的摘要</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + using system OpenSSL library</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: &quot;/usr/local/nginx&quot;</span><br><span class="line">  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;</span><br><span class="line">  nginx modules path: &quot;/usr/local/nginx/modules&quot;</span><br><span class="line">  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;</span><br><span class="line">  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;</span><br><span class="line">  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;</span><br><span class="line">  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;</span><br><span class="line">  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;</span><br><span class="line">  nginx http client request body temporary files: &quot;client_body_temp&quot;</span><br><span class="line">  nginx http proxy temporary files: &quot;proxy_temp&quot;</span><br><span class="line">  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;</span><br><span class="line">  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;</span><br><span class="line">  nginx http scgi temporary files: &quot;scgi_temp&quot;</span><br></pre></td></tr></table></figure><ul><li>开始编译</li></ul><p>在生成 Makefile 后，就可以使用 <code>make</code> 命令编译程序了。</p><figure class="highlight shell"><figcaption><span>使用 make 编译</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>如果你想多线程编译程序（默认是单核），那么你可以使用 <code>-j</code> 选项</p><figure class="highlight shell"><figcaption><span>使用多线程编译</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j 8</span><br></pre></td></tr></table></figure><p>这里的数字 8 是指编译的线程数，如果你是 8 核的电脑，那就使用 8，请注意编译的线程数不要超过核心数，否则会影响编译效率，如果你还想在编译期间使用服务器，也不要占满核心数，否则服务器会非常卡顿。</p><p>如果没有报错，那么你会看到</p><figure class="highlight shell"><figcaption><span>make 编译完成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make[1]: Leaving directory &#x27;/home/xiao/nginx-1.21.4&#x27;</span><br></pre></td></tr></table></figure><p>如果不幸报错了，那么你可以自行搜索错误的信息，并进行相关配置，然后清除之前编译的内容，再重新编译</p><figure class="highlight shell"><figcaption><span>清除上次编译的残留后重新编译</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean &amp;&amp; make</span><br></pre></td></tr></table></figure><ul><li>安装程序</li></ul><p>编译完成后，你就可以使用 <code>make install</code> 安装。需要注意的是，之前我的安装目录设置为 <code>/usr/local/nginx</code>，这个目录需要管理员才能创建，所以安装时要使用 <code>sudo</code>。</p><figure class="highlight shell"><figcaption><span>安装程序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>然后你就可以正常使用 nginx 程序了，nginx 是异步框架的网页服务器，也可以用作反向代理、负载平衡器和HTTP缓存。在此处不介绍其使用。</p><div class="note success"><p>至此，恭喜你完成了第四章的学习！第四章主要带读者了解了 Linux 上安装卸载软件的方式，相较于 Windows 系统，这种安装方式显得简单了许多，你会花更少的时间在环境的配置上，无形中提高了开发的效率。至此，读者已经掌握了 Linux 的基本内容，对于初学者而言，这些知识已经足够使用。第五章主要是介绍 Linux 的其他常用命令以及推荐一些 Linux 上很好用的软件。</p></div></div><div class="story post-story"><h2 id="第五章-Linux-常用命令及软件"><a href="#第五章-Linux-常用命令及软件" class="headerlink" title="第五章 Linux 常用命令及软件"></a>第五章 Linux 常用命令及软件</h2><div class="note success"><p>恭喜你能看到这里，现在，你已经能够在 Linux 上完成几乎所有的文件操作，权限操作，也学会了安装、卸载软件，那么接下来，作者要再补充介绍几个 Linux 的常用命令，并且推荐一些 Linux 上好用的软件，让我们继续吧。</p></div><h3 id="网络文件下载"><a href="#网络文件下载" class="headerlink" title="网络文件下载"></a>网络文件下载</h3><p>在 Linux 命令行中，我们也会有下载一些网络上的文件的需求，通常，我们使用 <code>wget</code> 或 <code>curl</code> 命令下载网络上的文件。<code>wget</code> 在第四章 编译安装软件时已经有所涉及，使用非常简单，<code>wget URL</code> 就可以下载文件了。</p><figure class="highlight shell"><figcaption><span>wget 使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget [option]... [URL]...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">e.g.</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.21.4.tar.gz</span><br></pre></td></tr></table></figure><p><code>curl</code> 命令会默认将下载的内容输出到终端，如果你需要保存到文件，需要使用 <code>--output</code> 选项。</p><figure class="highlight shell"><figcaption><span>curl 输出到终端</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.baidu.com</span><br></pre></td></tr></table></figure><p>你会看到百度的网页源码，如果你想使用 curl 下载文件，可以这么写：</p><figure class="highlight shell"><figcaption><span>curl 下载文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://nginx.org/download/nginx-1.21.4.tar.gz --output nginx-1.21.4.tar.gz</span><br></pre></td></tr></table></figure><h3 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h3><p>如果你想将自己电脑上的文件上传到服务器上，或是将服务器上的文件下载到电脑上，那么可以使用 sftp (SSH File Transfer Protocol, also Secure File Transfer Protocol) 协议完成，由于这个使用代码不太优雅。所以这里推荐使用软件完成文件的上传下载。</p><p>如果你使用的终端程序自带了文件传输功能，那么当然可以使用终端自带的文件传输，如果没有，这里推荐使用 <code>Filezilla</code>。其安装使用非常简单。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817151611.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817151611.png" srcset="/images/placeholder.svg" alt="Filezilla 软件截图"/></div><span class="image-caption">Filezilla 软件截图</span></div><p>软件左侧是本地的文件，右侧是服务器的文件，如果要下载，可以直接使用右键单击服务器的文件或文件夹，点击下载即可，如果要上传，也只需要右击本地的文件或文件夹，点击上传即可。</p><h3 id="系统性能监控"><a href="#系统性能监控" class="headerlink" title="系统性能监控"></a>系统性能监控</h3><p>有时，我们需要监控系统的运行情况，例如 CPU、内存等的使用，这时，可以使用内置的命令 <code>top</code> 查看。</p><p>输入 <code>top</code> 命令后，就能看到 CPU、内存的占用，也能看到正在运行的进程，但是其界面比较丑陋，所以我们通常使用其他程序代替 <code>top</code>。</p><p>例如，我们可以使用 <code>htop</code> 查看系统资源占用。<code>htop</code> 需要额外安装，运行 <code>sudo apt install htop</code> 即可。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817152037.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817152037.png" srcset="/images/placeholder.svg" alt="htop 界面"/></div><span class="image-caption">htop 界面</span></div><p><code>htop</code> 界面默认上部是 CPU、内存、交换空间的信息，还有电脑负载以及开启时长。下面是进程的信息。</p><p>如果你还想再极客一点，也可以使用 <code>btop</code>。<code>btop</code> 也需要额外安装，运行 <code>sudo apt install btop</code> 即可。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/btop-normal.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/btop-normal.png" srcset="/images/placeholder.svg" alt="btop 界面"/></div><span class="image-caption">btop 界面</span></div><p>很酷，不是吗？</p><p>如果你想要查看网络的使用情况，你当然可以查看 <code>btop</code>，当然，你也可以使用 <code>bmon</code> 软件，运行 <code>sudo apt install bmon</code> 即可。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817152646.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817152646.png" srcset="/images/placeholder.svg" alt="bmon 界面"/></div><span class="image-caption">bmon 界面</span></div><p>如果你想查看服务器的端口占用情况，可以使用 <code>netstat</code> 命令，使用 <code>sudo apt install net-tools</code> 安装即可。</p><figure class="highlight shell"><figcaption><span>查看服务器端口占用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntlp</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>netstat 简要输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto   Local Address     State       PID/Program name</span><br><span class="line">tcp     0.0.0.0:22        LISTEN      889/sshd</span><br><span class="line">tcp     127.0.0.1:8888    LISTEN      1159/python3</span><br><span class="line">tcp     127.0.0.1:25      LISTEN      1171/master</span><br><span class="line">tcp     0.0.0.0:443       LISTEN      923/nginx: master p</span><br><span class="line">tcp     127.0.0.1:8360    LISTEN      1363/docker-proxy</span><br><span class="line">tcp     0.0.0.0:80        LISTEN      923/nginx: master p</span><br><span class="line">tcp6    :::22             LISTEN      889/sshd</span><br><span class="line">tcp6    ::1:25            LISTEN      1171/master</span><br><span class="line">tcp6    :::8000           LISTEN      890/frps</span><br><span class="line">tcp6    :::30000          LISTEN      893/v2ray</span><br></pre></td></tr></table></figure><p>你会看到服务器上所有监听的端口。</p><h3 id="文件浏览"><a href="#文件浏览" class="headerlink" title="文件浏览"></a>文件浏览</h3><p>如果你想快速地在服务器上浏览文件，那么我推荐你使用 ranger 程序。直接使用 <code>sudo apt install ranger</code> 安装即可。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817153920.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817153920.png" srcset="/images/placeholder.svg" alt="ranger 截图"/></div><span class="image-caption">ranger 截图</span></div><p>如果你想尝试更复杂的文件管理器，你可以使用 mc 程序，直接使用 <code>sudo apt install mc</code> 安装即可。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817154315.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817154315.png" srcset="/images/placeholder.svg" alt="mc 截图"/></div><span class="image-caption">mc 截图</span></div><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>有时，我们需要有一个类似 Windows 任务管理器一样的软件，查看 Linux 的进程，或是强行停止一些进程。在 Linux 下，你可以使用 <code>ps</code> 命令查看当前的进程。<code>ps</code> 是 process snapshot 的缩写。</p><figure class="highlight shell"><figcaption><span>ps 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps       # 查看当前用户进程</span><br><span class="line">ps aux   # 查看所有进程</span><br></pre></td></tr></table></figure><p>你会发现，<code>ps aux</code> 的输出太长了，所以我们可以使用 <code>grep</code> 查找里面的进程。</p><figure class="highlight shell"><figcaption><span>ps 查找进程</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep python</span><br></pre></td></tr></table></figure><p>终端会输出所有的 python 进程。仔细观察输出，其有 11 个字段，依次是：</p><ul><li>USER 是进程运行的用户</li><li>PID 是进程的 ID</li><li>%CPU 是进程的 CPU 占用情况</li><li>%MEM 是进程的内存占用情况</li><li>VSZ 是 虚拟内存的使用情况</li><li>RSS 是驻留集的大小，是非交换物理内存的使用</li><li>TTY 是进程是依存于什么终端</li><li>STAT 是进程的状态</li><li>START 是进程启动的时间或日期</li><li>TIME 是进程的累计 CPU 时间</li><li>COMMAND 是进程的命令与参数</li></ul><p>有了进程的 PID，就可以唯一确定一个进程，我们就可以对进程进行一些操作了。你可以使用 <code>kill</code> 命令杀死进程，命令形式如下：</p><figure class="highlight shell"><figcaption><span>停止一个进程</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><p>例如，我在运行 <code>ps aux | grep python</code> 后，发现我这个 <code>python</code> 进程的 PID 是 10756，那么我就可以使用 <code>kill -9 10756</code> 杀死这个 <code>python</code> 进程。</p><p>由于 Linux 默认进程是依存于一个终端的，所以如果你关闭这个终端，那么进程也会停止。比如我正在用服务器计算一个东西，但是很不幸，网络断开了，这时，这个进程由于终端的关闭就会被杀死。这显然是我们不想看到的。那应该如果操作呢？我们可以使用 <code>nohup &amp;</code> 命令将命令转为后台运行。</p><figure class="highlight shell"><figcaption><span>nohup 使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup command &amp;</span><br></pre></td></tr></table></figure><p>由于不会在终端上输出，所以 <code>nohup</code> 会默认将标准输出写入到 <code>nohup.log</code> 文件中，如果你想重定向输出，可以使用重定向运算符。</p><figure class="highlight shell"><figcaption><span>nohup 重定向</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup command &gt; log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>这样就能将标准输出与标准错误都写入到 <code>log.txt</code> 中。举个例子：</p><figure class="highlight shell"><figcaption><span>nohup 案例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python3 calculating.py &gt; log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>这样就能将 <code>python3 caculating.py</code> 转到后台运行，也不用担心断网了。</p><h3 id="终端复用"><a href="#终端复用" class="headerlink" title="终端复用"></a>终端复用</h3><p>当然，你可能会觉得上面使用 <code>nohup</code> 太过麻烦，我总不能每次运行命令时都要用 <code>nohup</code> 包裹起来吧，而且网络是不稳定的，指不定什么时候就会掉线。在这种情况下，你可以使用终端复用工具。它的基本原理就是创建一个不依赖终端的虚拟终端进程，在你的终端关闭后，这个虚拟进程依然可以继续运行，常用的主要是 <code>screen</code> 工具，但是其比较古老，本教程建议使用的是 <code>tmux</code>。</p><p>你可以使用 <code>sudo apt install tmux</code> 安装这个工具。</p><p>然后你直接输入 <code>tmux</code>，就能打开一个新的终端，在里面运行的命令，在关闭终端后，仍然会运行。</p><details open><summary> tmux 小教程（点击可以折叠） </summary>              <div class='content'>              <p><code>tmux</code> 其实是一个非常好用的小工具，为其单独写一篇教程也不为过。在这里，我们就精简一下，只介绍 tmux 最实用的功能。</p><p>你可以使用 <code>tmux</code> 创建一个 <code>tmux</code> 终端。然后使用快捷键将终端分离。</p><p>注意，tmux 在未做其他配置时，默认的快捷键是由前导键和快捷键组成，你需要先按 <kbd>CTRL</kbd> + <kbd>B</kbd> 后，才能输入快捷键。</p><p>例如分离终端快捷键是 <kbd>D</kbd>，你需要先按 <kbd>CTRL</kbd> + <kbd>B</kbd> 后，再按 <kbd>D</kbd> 键。</p><p>终端分离后，你就会退回到你的终端，这时你的终端并没有被杀死，你可以用 <code>tmux ls</code> 命令查看所有正在运行的终端，最前面的一个数字表示终端的编号，此后你可以使用 <code>tmux attach-session -t ID</code> 来重新连接到这个终端。如果你想杀死这个终端，可以使用 <code>tmux kill-session -t ID</code> 命令。</p><p>使用 tmux 可以将一个终端变为好几个终端，你可以使用快捷键来分屏。</p><p>左右分屏：先 <kbd>CTRL</kbd> + <kbd>B</kbd> 后 <kbd>&#37;</kbd><br>上下分屏：先 <kbd>CTRL</kbd> + <kbd>B</kbd> 后 <kbd>&#34;</kbd><br>切换目前激活的部分：先 <kbd>CTRL</kbd> + <kbd>B</kbd> 后使用方向键</p><p>了解以上内容后，就可以正常使用 <code>tmux</code> 了，当然，如果你对 <code>tmux</code> 很感兴趣，也欢迎你查看作者的另一篇文章 <a href="/tech/my_workspace/">我的 Linux 深度学习工作环境丨环境搭建教程</a> 的终端配置，里面介绍了 <code>tmux</code> 的美化过程。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817163104.jpg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/20220817163104.jpg" srcset="/images/placeholder.svg" alt="我的 tmux 截图"/></div><span class="image-caption">我的 tmux 截图</span></div>              </div>            </details><h3 id="编程软件"><a href="#编程软件" class="headerlink" title="编程软件"></a>编程软件</h3><p>相信你使用 Linux 系统大概率是为了编程，所以当然少不了编译器等等编程软件。在 Linux 上，你可以很方便的安装这些编译器：</p><p>C 语言编译器：<code>gcc</code>, <code>clang</code><br>Python 环境：<code>python</code>, <code>miniconda</code></p><p>如果你对深度学习感兴趣，相信你也要配置 NVIDIA 显卡，这一部分通常都是系统管理员的工作，本教程不再涉及，如果你感兴趣，可以参考作者的另一篇文章 <a href="/tech/my_workspace/">我的 Linux 深度学习工作环境丨环境搭建教程</a> 的深度学习环境搭建。</p><p>这里简要介绍一个代码版本控制工具 <code>git</code></p><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p><code>git</code> 是代码控制的工具，使用 <code>sudo apt install git</code> 以安装它。当然，<code>git</code> 的高级使用也是较为复杂的，如果你只是单纯用来线性的控制版本，那么你只需要了解下面的命令即可，如果你对 <code>git</code> 很感兴趣，推荐你阅读 <a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的 Git 教程</a>，通俗易懂。</p><p>安装完成后，你需要进行 git 的基本配置，也就是填写自己的昵称与邮箱：</p><figure class="highlight shell"><figcaption><span>git 配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>需要注意，如果你想使用 github 等等代码仓库，这个邮箱请保证与注册 github 的邮箱相同。</p><table><thead><tr><th>目的</th><th>命令</th><th>简述</th></tr></thead><tbody><tr><td>建立 git 库</td><td>git init</td><td></td></tr><tr><td>将更改添加到暂存区</td><td>git add FIELNAME</td><td></td></tr><tr><td></td><td>git add –all</td><td></td></tr><tr><td>提交</td><td>git commit –m “MESSAGE”</td><td>提交目前所有已添加到暂存区的更改</td></tr><tr><td>查看更改日志</td><td>git log</td><td>可以查看每次更改记录对应的作者、日期、备注和哈希码</td></tr><tr><td></td><td>git reflog</td><td>可以查看所有记录（包括回退之前）</td></tr><tr><td>转到某个版本</td><td>git reset –hard 哈希码</td><td>输入哈希码前几位，可以与其他记录区分即可</td></tr></tbody></table><div class="note warning"><p>只建议使用 git 工具管理文本类型的文件，因为文本类型的文件更改比较独立。</p></div><h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h4><p>当然你可能会觉得，在终端里编程并不优雅，虽然 <code>vim</code> 提供了代码补全以及很多插件支持，但对于初学者而言毕竟太不友好。这时，你可以使用划时代的文本编辑器，微软的 Visual Studio Code 利用 ssh 连接到服务器上，进行文件编辑，享受与本机编程同样的体验，如果你对这种编程方式很感兴趣，可以阅读作者的另一篇文章 <a href="/tech/my_workspace/">我的 Linux 深度学习工作环境丨环境搭建教程</a>，里面详细介绍了 VS Code 软件的配置并且推荐了许多高效的插件。</p></div><div class="story post-story"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note success"><p>首先恭喜各位读者看到这里，你已经学完了这篇很长的教程，现在你可以无障碍地使用 Linux 命令行（CLI）了。</p></div><p>当然，有些读者并不会止步于此，还想了解更多 Linux 方面的内容，或是对 <code>shell</code> 编程很感兴趣，作者也提供一些链接以便深入学习：</p><div class="tag link"><a class="link-card" title="Linux 教程" href="https://github.com/dunwu/linux-tutorial"><div class="left"><img src="https://avatars.githubusercontent.com/u/19661255?s=120&v=4" class="lazyload placeholder" data-srcset="https://avatars.githubusercontent.com/u/19661255?s=120&v=4" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Linux 教程</p><p class="url">https://github.com/dunwu/linux-tutorial</p></div></a></div><div class="tag link"><a class="link-card" title="Linux Shell 视频教程" href="https://www.bilibili.com/video/BV1sq4y1K7nM"><div class="left"><img src="https://unpkg.com/volantis-static@0.0.1654736714924/media/org.volantis/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://unpkg.com/volantis-static@0.0.1654736714924/media/org.volantis/logo/256/safari.png" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Linux Shell 视频教程</p><p class="url">https://www.bilibili.com/video/BV1sq4y1K7nM</p></div></a></div></div><div class="story post-story"><h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>这里记录了本页面所有的显著更改。<br>All notable changes to this page will be documented in here.</p><div class="timeline"><div class="timenode"><div class="meta"><p><p>2022-08-10</p></p></div><div class="body"><ol><li>修改第五章 Linux 常用软件为 Linux 常用命令及软件；</li><li>在第二章中增加链接章节 <code>ln</code>；</li><li>删除了教程中的 <code>docker</code> 部分，因为对初学者并不友好。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2022-08-04</p></p></div><div class="body"><p>完成第五章 Linux 常用软件。</p></div></div><div class="timenode"><div class="meta"><p><p>2022-07-28</p></p></div><div class="body"><p>完成第四章 在 Linux 上安装 &#x2F; 卸载软件。</p></div></div><div class="timenode"><div class="meta"><p><p>2022-07-25</p></p></div><div class="body"><p>完成第三章 Linux 用户与权限控制。</p></div></div><div class="timenode"><div class="meta"><p><p>2022-07-21</p></p></div><div class="body"><p>完成第二章 了解 Linux 文件操作。</p></div></div><div class="timenode"><div class="meta"><p><p>2022-07-14</p></p></div><div class="body"><p>完成第一章 连接到 Linux 终端。</p></div></div><div class="timenode"><div class="meta"><p><p>2022-07-10</p></p></div><div class="body"><p>完成第〇章 什么是 Linux 命令。</p></div></div><div class="timenode"><div class="meta"><p><p>2022-07-04</p></p></div><div class="body"><p>完成教程大纲编写。</p></div></div></div></div>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;Linux 是一种开放源码 (open-source) 的类 UNIX 作业系统。虽然原先 Linux 只是由 Linus Torvalds 出于个人爱好而编写，但目前，Linux 已逐渐成为人们生活中不可或缺的一部分。从嵌入式设备到超级计算机，各处都有 Linux 的身影，在移动设备上广泛使用的 Android 系统正是建立在 Linux 内核之上。得益于其优雅的权限控制及优美的学习曲线，越来越多的服务器使用 Linux 以部署服务。&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;通常，我们安装使用的 Linux 是指经打包后的 Linux 发行版，其中包括 Debian（包括衍生版本 Ubuntu、Linux Mint）、Fedora（包括相关版本 Red Hat Enterprise Linux、CentOS）、openSUSE、Arch Linux（包括衍生版本 Manjaro）、Gentoo，不一而足。目前，Linux 发行版基本配备了各自的图形界面，使用与 Windows 系统相仿，容易入门。&lt;/p&gt;&lt;p&gt;但在一些服务器系统上，如 Ubuntu Server、CentOS 等，安装图形界面（GUI）导致系统正常运行的性能需求飙升，因此通常服务器仅安装命令行界面（CLI）。同时，即使在带有图形界面的 Linux 发行版，也 &lt;emp&gt;不是所有&lt;/emp&gt; 的操作都能通过图形界面完成，命令行的学习有很大的 &lt;emp&gt;必要性&lt;/emp&gt;。&lt;/p&gt;&lt;/div&gt;

&lt;div class=&quot;note guide clear&quot;&gt;&lt;p&gt;本文希望使用 &lt;emp&gt;浅显易懂&lt;/emp&gt; 的语言带读者入门 Linux。教程主要针对初学者在实际使用中 &lt;emp&gt;最常用&lt;/emp&gt; 的内容展开，加入了作者自己的理解与认识，希望读者能在很短的时间内学会 Linux 的基本操作。如有更好的展开思路，欢迎各位朋友在评论区批评指正。&lt;/p&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="技术" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Linux" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/Linux/"/>
    
    
    <category term="Linux" scheme="https://zypnb.top/tags/Linux/"/>
    
    <category term="环境配置" scheme="https://zypnb.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>实用小教程丨使用 HoloViews 绘制和弦图</title>
    <link href="https://zypnb.top/tech/holoviews_chord/"/>
    <id>https://zypnb.top/tech/holoviews_chord/</id>
    <published>2021-12-07T16:00:00.000Z</published>
    <updated>2022-08-23T00:54:33.205Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://holoviews.org/_static/logo_horizontal.png" class="lazyload placeholder" data-srcset="https://holoviews.org/_static/logo_horizontal.png" srcset="/images/placeholder.svg" alt="image"/></div></div><span id="more"></span><div class="story post-story"><h2 id="HoloViews-的安装"><a href="#HoloViews-的安装" class="headerlink" title="HoloViews 的安装"></a><code>HoloViews</code> 的安装</h2><ul><li>打开终端</li><li>使用 <code>conda</code> 新建一个环境<ul><li>如果没有安装 Anaconda 或 Miniconda 环境，可以查看 <a href="/tech/python_tutorial_1/#Anaconda-%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4">Python 教程Ⅰ丨环境安装与快速入门</a></li><li><em>这里新建环境是为了防止新装的包与默认环境中某些包发生冲突。</em></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create -n test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个叫做<span class="string">&quot;test&quot;</span>的环境</span></span><br><span class="line">conda activate test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">“唤醒”<span class="built_in">test</span> 环境</span></span><br></pre></td></tr></table></figure><ul><li>在新环境中安装 <code>HoloViews</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conda install -c pyviz holoviews bokeh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 holoviews；</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跑个题：bokeh 是前些年用来画和弦图的包，近年来不再被维护，被分到了另一个叫做 bkcharts 的包中。不幸的是，这个包是付费的。holoviews 暂时的神！</span></span><br><span class="line">conda install matplotlib plotly ipykernel</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以防万一——使用 holoviews 画某些图，需要 matplotlib 和 plotly 作为后端，因此需要安装。</span></span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="使用-HoloViews-绘制和弦图"><a href="#使用-HoloViews-绘制和弦图" class="headerlink" title="使用 HoloViews 绘制和弦图"></a>使用 <code>HoloViews</code> 绘制和弦图</h2><ul><li>首先，请确认您正确安装了 <code>HoloViews</code>。</li><li>如是，上述环境中应该已经正确安装了 <code>ipykernel</code> —— 这样，您就可以在 <code>vscode</code> 中使用 <code>jupyter notebook</code> 实时查看 <code>HoloViews</code> 画出的成图。</li><li>在文件夹内新建 <code>holochord.ipynb</code> ，开始绘制和弦图。</li></ul><h3 id="导入所需的包"><a href="#导入所需的包" class="headerlink" title="导入所需的包"></a>导入所需的包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入我们的主角——holoviews</span></span><br><span class="line"><span class="keyword">import</span> holoviews <span class="keyword">as</span> hv</span><br><span class="line"><span class="keyword">from</span> holoviews <span class="keyword">import</span> opts, dim</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作为示例，导入一份包自带的数据集</span></span><br><span class="line"><span class="keyword">import</span> bokeh.sampledata</span><br><span class="line">bokeh.sampledata.download()</span><br><span class="line"><span class="keyword">from</span> bokeh.sampledata.airport_routes <span class="keyword">import</span> routes, airports</span><br></pre></td></tr></table></figure><h3 id="准备所需的数据"><a href="#准备所需的数据" class="headerlink" title="准备所需的数据"></a>准备所需的数据</h3><h4 id="理解和弦图"><a href="#理解和弦图" class="headerlink" title="理解和弦图"></a>理解和弦图</h4><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20220809110513909.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20220809110513909.png" srcset="/images/placeholder.svg" alt="和弦图示例"/></div><span class="image-caption">和弦图示例</span></div><ul><li>和弦图描述<emp>事物之间的联系</emp>。</li><li>圆周上的一段<emp>弧</emp>表示一个<emp>事物</emp>；弧长越长，说明该事物和其他事物之间建立的联系数量越多。</li><li>圆内的每一条<emp>细线</emp>表示一个<emp>联系</emp>，我们看到的色带实际上是细线密集排布后形成的。</li></ul><h4 id="理解和弦图背后的数据"><a href="#理解和弦图背后的数据" class="headerlink" title="理解和弦图背后的数据"></a>理解和弦图背后的数据</h4><ul><li>事物之间的联系可以类比为一个<emp>向量</emp>。</li><li>它有<strong>起点</strong>、有<strong>终点</strong>，有<strong>联系的“强度”（也可以理解为数量）</strong>。</li><li>为了绘制一幅和弦图，我们需要提供一份包括待研究事物、及这些事物之间**联系(links)**的数据：<ul><li>横向上看，每一条联系由 <code>source</code>, <code>target</code>, <code>value</code> 组成，对应联系的“源”“流”“值”；</li><li>纵向上看，存在若干条联系；</li><li>因此，为了描述这些<emp>联系</emp>(即画出圆周内的部分)，我们需要准备的数据，仅仅是一个 <strong>n 行 3 列的表</strong>；此外，为了画出圆周上的弧，我们还需要提供一份<emp>事物</emp>的<strong>名单</strong>。</li></ul></li></ul><h4 id="理解之后，开始准备我们的数据"><a href="#理解之后，开始准备我们的数据" class="headerlink" title="理解之后，开始准备我们的数据"></a>理解之后，开始准备我们的数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 形成一个名叫&quot;route_counts&quot;的数据表，它包括了各个起点机场和终点机场之间的联系(即航班)数</span></span><br><span class="line">route_counts = routes.groupby(</span><br><span class="line">    [<span class="string">&#x27;SourceID&#x27;</span>, <span class="string">&#x27;DestinationID&#x27;</span>]</span><br><span class="line">).Stops.count().reset_index()</span><br><span class="line"><span class="comment"># routes 是前一部分导入的自带数据集</span></span><br><span class="line"><span class="comment"># 按照[&#x27;SourceID&#x27;, &#x27;DestinationID&#x27;]给各个 route(航线)分组，并计数(count)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nodes 是这个和弦图涉及的机场的名单</span></span><br><span class="line">nodes = hv.Dataset(airports, <span class="string">&#x27;AirportID&#x27;</span>, <span class="string">&#x27;City&#x27;</span>)</span><br><span class="line"><span class="comment"># airports 是前一部分导入的自带数据集</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 前面两份数据准备好了，下面使用 hv.chord()绘图，并起名叫&quot;chord&quot;</span></span><br><span class="line">chord = hv.Chord((route_counts, nodes), [<span class="string">&#x27;SourceID&#x27;</span>, <span class="string">&#x27;DestinationID&#x27;</span>], [<span class="string">&#x27;Stops&#x27;</span>])</span><br><span class="line"><span class="comment"># 注意这里不会显示出和弦图，因为这一行的意思是将这幅图&quot;赋给了&quot;chord，而 chord 中不一定所有部分都是我们想可视化出来的</span></span><br></pre></td></tr></table></figure><h4 id="问答时间"><a href="#问答时间" class="headerlink" title="问答时间"></a>问答时间</h4><p><strong>Q:</strong> 这里用的是包自带的数据集，如果我想给自己的数据做可视化，那么我应该如何准备数据呢？</p><p><strong>A:</strong> <code>Excel</code> yyds！将上面提到的两份表在 <code>Excel</code> 中准备好，使用 <code>python</code> <emp>必学</emp>的数据处理包 <code>pandas</code> 中的一行命令，将 <code>Excel</code> 中的数据读入就可以了~</p><p><strong>Q:</strong>  在 <code>Excel</code> 里准备这样两张表似乎挺麻烦的，因为常见的表不一定会以“起点-终点-联系数量”的形式来组织，那么如何给这些数据做前处理，让数据乖乖以 <emp>n 行 3 列</emp>的形式组织起来呢？</p><p><strong>A:</strong>  这个只要简单学一下 <code>pandas</code> 就可以了，很简单的，<emp>真的</emp>。</p><h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><ul><li>绘图需要做的，就是选择你关心的部分，命令 <code>HoloViews</code> 帮你绘图。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 制作一个名叫 busiest 的列表，这个列表包括 20 个最繁忙的机场</span></span><br><span class="line">busiest = <span class="built_in">list</span>(routes.groupby(<span class="string">&#x27;SourceID&#x27;</span>)</span><br><span class="line">                     .count()</span><br><span class="line">                     .sort_values(<span class="string">&#x27;Stops&#x27;</span>)</span><br><span class="line">                     .iloc[-<span class="number">20</span>:]</span><br><span class="line">                     .index</span><br><span class="line">                     .values)</span><br><span class="line"><span class="comment"># sort_values(&#x27;Stops&#x27;): 按照经停数升序排序</span></span><br><span class="line"><span class="comment"># iloc[-20:]: 数据&quot;切片&quot;——取排序后倒数 20 个，即经停数最多的 20 个机场</span></span><br><span class="line"><span class="comment"># 其余的一大堆命令，都是在做一件事——把这些机场变成一个列表(list)的格式，方便后续命令的使用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用刚才制作的列表，把 chord 中最繁忙的 20 个机场选出来</span></span><br><span class="line">busiest_airports = chord.select(AirportID=busiest, selection_mode=<span class="string">&#x27;nodes&#x27;</span>)</span><br><span class="line"><span class="comment"># &quot;AirportID=busiest&quot;——你懂的</span></span><br><span class="line"><span class="comment"># ”selection_mode=&#x27;nodes&#x27;“——选取的是点(node)而不是联系(link)</span></span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 最后一步——设置好看的着色方式、字体和大小、标签等</span></span><br><span class="line">busiest_airports.opts(</span><br><span class="line">    opts.Chord(</span><br><span class="line">        cmap=<span class="string">&#x27;Category20&#x27;</span>, edge_color=dim(<span class="string">&#x27;SourceID&#x27;</span>).<span class="built_in">str</span>(), </span><br><span class="line">        height=<span class="number">800</span>, labels=<span class="string">&#x27;City&#x27;</span>, node_color=dim(<span class="string">&#x27;AirportID&#x27;</span>).<span class="built_in">str</span>(), width=<span class="number">800</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 大功告成！</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; src=&quot;https://holoviews.org/_static/logo_horizontal.png&quot; alt=&quot;image&quot;/&gt;&lt;/div&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="技术" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Python" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/Python/"/>
    
    
    <category term="Python" scheme="https://zypnb.top/tags/Python/"/>
    
    <category term="HoloViews" scheme="https://zypnb.top/tags/HoloViews/"/>
    
    <category term="和弦图" scheme="https://zypnb.top/tags/%E5%92%8C%E5%BC%A6%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 教程Ⅱ丨面向对象编程初步</title>
    <link href="https://zypnb.top/tech/python_tutorial_2/"/>
    <id>https://zypnb.top/tech/python_tutorial_2/</id>
    <published>2021-10-09T16:00:00.000Z</published>
    <updated>2022-08-23T00:54:33.207Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>上次教程中，我们简要介绍了 Python 安装与快速入门，本次教程将对 Python 数据类型、面向对象编程技术（OOP）初步、Python 模块与包进行简要介绍，并向大家推荐 Python 后续学习资料。</p><div class="note warning"><p>本教程假定读者已经了解并学会使用 Python 的基本数据类型，运算符，输入输出，字符串，流程控制，函数。如果对这些基础知识尚感迷茫，可以阅读“Python 教程Ⅰ丨环境安装与快速入门”，并认真练习。</p></div><span id="more"></span><div class="tag link"><a class="link-card" title="Python 教程Ⅰ丨环境安装与快速入门" href="/tech/python_tutorial_1/"><div class="left"><img src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python 教程Ⅰ丨环境安装与快速入门</p><p class="url">/tech/python_tutorial_1/</p></div></a></div><div class="story post-story"><h2 id="Python-数据类型"><a href="#Python-数据类型" class="headerlink" title="Python 数据类型"></a>Python 数据类型</h2><p>上次介绍到 Python 内置数据类型有 <code>bool</code>, <code>int</code>, <code>float</code>, <code>complex</code>, <code>str</code>，另外还有 <code>list</code>, <code>tuple</code>, <code>set</code>, <code>dict</code> 四类。其中，<code>bool</code>, <code>int</code>, <code>float</code> 及 <code>complex</code> 与 C 语言中对应类型非常相似，所以本教程不再详述，而是将重点放在介绍 <code>str</code>, <code>list</code>, <code>tuple</code>, <code>set</code>, <code>dict</code> 五种数据类型上。由于操作函数方法较多，本篇教程无法完全涉及，大家可以参考教程后的参考资料继续深入学习。</p><h3 id="str-类型"><a href="#str-类型" class="headerlink" title="str 类型"></a><code>str</code> 类型</h3><p><code>str</code> 类型即字符串类型，较 C 语言，Python 中字符串支持许多编码格式，并且也有许多便利的运算方法。其中较常用的方法有 <code>len</code>, <code>==</code>, <code>+</code>, <code>*</code>, <code>in</code>, <code>find</code>。</p><figure class="highlight python"><figcaption><span>字符串使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s1 + s1)       <span class="comment"># 字符串拼接</span></span><br><span class="line"><span class="built_in">print</span>(s1 * <span class="number">100</span>)      <span class="comment"># 字符串重复</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(s1))       <span class="comment"># 字符串长度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;wo&#x27;</span> <span class="keyword">in</span> s1)    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">s2 = <span class="string">&#x27;goodbye&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s2 <span class="keyword">in</span> s1)      <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s2)      <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 以三个双引号或单引号开头的字符串可以折行</span></span><br><span class="line">s3 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hello,</span></span><br><span class="line"><span class="string">world!</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="list-类型"><a href="#list-类型" class="headerlink" title="list 类型"></a><code>list</code> 类型</h3><p><code>list</code> 类型即列表类型，与 C 中的动态数组类似，但使用更为方便。常用的方法有 <code>len</code>, <code>[]</code>, <code>append</code>, <code>insert</code>, <code>clear</code>, <code>pop</code>, <code>remove</code>, <code>sort</code>, <code>+</code>, <code>*</code>。</p><figure class="highlight python"><figcaption><span>列表使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;Go&#x27;</span>, <span class="string">&#x27;Kotlin&#x27;</span>]</span><br><span class="line">items.append(<span class="string">&#x27;Swift&#x27;</span>)     <span class="comment"># [&#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;, &#x27;Swift&#x27;]</span></span><br><span class="line">items.insert(<span class="number">2</span>, <span class="string">&#x27;SQL&#x27;</span>)    <span class="comment"># [&#x27;Python&#x27;, &#x27;Java&#x27;, &#x27;SQL&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;, &#x27;Swift&#x27;]</span></span><br><span class="line">items.remove(<span class="string">&#x27;Java&#x27;</span>)      <span class="comment"># [&#x27;Python&#x27;, &#x27;SQL&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;, &#x27;Swift&#x27;]</span></span><br><span class="line">items.pop(<span class="number">0</span>)              <span class="comment"># [&#x27;SQL&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;, &#x27;Swift&#x27;]</span></span><br><span class="line">items.pop(<span class="built_in">len</span>(items) - <span class="number">1</span>) <span class="comment"># [&#x27;SQL&#x27;, &#x27;Go&#x27;, &#x27;Kotlin&#x27;]</span></span><br><span class="line">items.clear()             <span class="comment"># []</span></span><br></pre></td></tr></table></figure><p>在使用列表重复(<code>*</code>)运算时，要注意可能出现的问题，例如：</p><figure class="highlight python"><figcaption><span>嵌套列表重复运算 * 导致错误结果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scores = [[<span class="number">0</span>] * <span class="number">3</span>] * <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(scores)    <span class="comment"># [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br><span class="line">scores[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">95</span></span><br><span class="line"><span class="built_in">print</span>(scores)    <span class="comment"># [[95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0], [95, 0, 0]]</span></span><br></pre></td></tr></table></figure><p>正确的做法应该是：</p><figure class="highlight python"><figcaption><span>嵌套列表重复的正确做法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scores = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line">scores[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">95</span></span><br><span class="line"><span class="built_in">print</span>(scores)    <span class="comment"># [[95, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br></pre></td></tr></table></figure><h3 id="tuple-类型"><a href="#tuple-类型" class="headerlink" title="tuple 类型"></a><code>tuple</code> 类型</h3><p><code>tuple</code> 类型即元组类型，类似一个不能改变元素的列表。元组常用于函数多变量返回，变量打包、解包中。</p><figure class="highlight python"><figcaption><span>元组类型示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>)    <span class="comment"># 打包</span></span><br><span class="line">i, j, k = a         <span class="comment"># 解包</span></span><br><span class="line"><span class="built_in">print</span>(i, j, k)      <span class="comment"># 1 10 100</span></span><br></pre></td></tr></table></figure><p>同时，我们可以借助 <code>*</code>，完成不定长元素的推测解包。需要注意，一个解包语句中只能出现一个 <code>*</code>，否则会产生歧义，编译器将不能理解如何解包。</p><figure class="highlight python"><figcaption><span>元组解包示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line">i, j, *k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># 1 10 [100, 1000]</span></span><br><span class="line">i, *j, k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># 1 [10, 100] 1000</span></span><br><span class="line">*i, j, k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)          <span class="comment"># [1, 10] 100 1000</span></span><br><span class="line">*i, j = a</span><br><span class="line"><span class="built_in">print</span>(i, j)             <span class="comment"># [1, 10, 100] 1000</span></span><br><span class="line">i, *j = a</span><br><span class="line"><span class="built_in">print</span>(i, j)             <span class="comment"># 1 [10, 100, 1000]</span></span><br><span class="line">i, j, k, *l = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k, l)       <span class="comment"># 1 10 100 [1000]</span></span><br><span class="line">i, j, k, l, *m = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k, l, m)    <span class="comment"># 1 10 100 1000 []</span></span><br></pre></td></tr></table></figure><h3 id="set-类型"><a href="#set-类型" class="headerlink" title="set 类型"></a><code>set</code> 类型</h3><p><code>set</code> 类型即集合类型，集合具有确定性、无序性和互异性，常用的有交并差及对称差。注意集合的运算使用的是 Python 中的位运算符。</p><figure class="highlight python"><figcaption><span>集合类型示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(set1)         <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(set1))    <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="comment">## 求交</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)  <span class="comment"># &#123;2, 4, 6&#125;</span></span><br><span class="line"><span class="comment">## 求并</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)  <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span></span><br><span class="line"><span class="comment">## 求差</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)  <span class="comment"># &#123;1, 3, 5, 7&#125;</span></span><br><span class="line"><span class="comment">## 求对称差</span></span><br><span class="line"><span class="built_in">print</span>(set1 ^ set2)  <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br></pre></td></tr></table></figure><h3 id="dict-类型"><a href="#dict-类型" class="headerlink" title="dict 类型"></a><code>dict</code> 类型</h3><p><code>dict</code> 类型即字典类型，通过键值对存储和访问数据。常用的有 <code>items</code>, <code>keys</code>, <code>values</code>, <code>pop</code> 等方法，类似列表生成式，也有字典生成式。</p><figure class="highlight python"><figcaption><span>字典类型示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;CZG&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">55</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&#x27;name&#x27;</span>])     <span class="comment"># CZG</span></span><br><span class="line"><span class="built_in">print</span>(person.keys())      <span class="comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;])</span></span><br><span class="line"><span class="built_in">print</span>(person.items())     <span class="comment"># dict_items([(&#x27;name&#x27;, &#x27;CZG&#x27;), (&#x27;age&#x27;, 55)])</span></span><br><span class="line"><span class="built_in">print</span>(person.pop(<span class="string">&#x27;name&#x27;</span>)) <span class="comment"># CZG</span></span><br><span class="line"><span class="built_in">print</span>(person)             <span class="comment"># &#123;&#x27;age&#x27;: 55&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 字典生成式示例</span></span><br><span class="line">stocks = &#123;</span><br><span class="line">    <span class="string">&#x27;AAPL&#x27;</span>: <span class="number">191.88</span>, <span class="string">&#x27;GOOG&#x27;</span>: <span class="number">1186.96</span>, <span class="string">&#x27;IBM&#x27;</span>: <span class="number">149.24</span>,</span><br><span class="line">    <span class="string">&#x27;ORCL&#x27;</span>: <span class="number">48.44</span>, <span class="string">&#x27;ACN&#x27;</span>: <span class="number">166.89</span>, <span class="string">&#x27;FB&#x27;</span>: <span class="number">208.09</span>, <span class="string">&#x27;SYMC&#x27;</span>: <span class="number">21.29</span></span><br><span class="line">&#125;</span><br><span class="line">stocks2 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> stocks.items() <span class="keyword">if</span> value &gt; <span class="number">100</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(stocks2)</span><br><span class="line"><span class="comment"># &#123;&#x27;AAPL&#x27;: 191.88, &#x27;GOOG&#x27;: 1186.96, &#x27;IBM&#x27;: 149.24, &#x27;ACN&#x27;: 166.89, &#x27;FB&#x27;: 208.09&#125;</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上几种数据类型构成了 Python 编程的基础，大家从这些数据类型的方法也能感受到 Python 语言的<span class='p red'>简洁与易理解</span>。相比于 C 语言，Python 更希望程序员写出<span class='p red'>容易阅读的代码</span>。</p></div><div class="story post-story"><h2 id="面向对象编程技术初步"><a href="#面向对象编程技术初步" class="headerlink" title="面向对象编程技术初步"></a>面向对象编程技术初步</h2><p>面向对象是一种目前比较流行的编程方法，是一种程序设计的方法论。相对于面向过程的编程方法，面向对象更契合人类正常的思维方式，更适用于开发、维护复杂系统。在这种编程方法下，程序中的数据和数据操作函数是一个逻辑上的整体，这个整体被称为对象。引用一段对面向对象编程的精辟描述：</p><div class="note "><p>把一组数据和处理数据的方法组成<span class='p red'>对象</span>，把行为相同的对象归纳为<span class='p red'>类</span>，通过<span class='p red'>封装</span>隐藏对象的内部细节，通过<span class='p red'>继承</span>实现类的特化和泛化，通过<span class='p red'>多态</span>实现基于对象类型的动态分派。</p></div><p>这句话并不那么好理解，接下来我们将进行一些解释。</p><p>在 Python 中，我们使用 <code>class</code> 关键字声明一个类，其语法结构为 <code>class 类名:</code>，调用时，可以使用 <code>.</code> 运算符进行调用，具体参见下例：</p><figure class="highlight python"><figcaption><span>类示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;学生正在学习<span class="subst">&#123;course_name&#125;</span>.&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;学生正在玩游戏.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stu1 = Student()</span><br><span class="line">stu2 = Student()</span><br><span class="line"><span class="comment"># 通过“类.方法”调用方法，第一个参数是接收消息的对象，第二个参数是学习的课程名称</span></span><br><span class="line">Student.study(stu1, <span class="string">&#x27;Python 程序设计&#x27;</span>)    <span class="comment"># 学生正在学习Python 程序设计.</span></span><br><span class="line"><span class="comment"># 通过“对象.方法”调用方法，点前面的对象就是接收消息的对象，只需要传入第二个参数</span></span><br><span class="line">stu1.study(<span class="string">&#x27;Python 程序设计&#x27;</span>)             <span class="comment"># 学生正在学习Python 程序设计.</span></span><br><span class="line">Student.play(stu2)    <span class="comment"># 学生正在玩游戏.</span></span><br><span class="line">stu2.play()           <span class="comment"># 学生正在玩游戏.</span></span><br></pre></td></tr></table></figure><h3 id="Python-魔术方法"><a href="#Python-魔术方法" class="headerlink" title="Python 魔术方法"></a>Python 魔术方法</h3><p>提到类，就不得不先提一下 Python 的魔术方法。在 Python 中，所有以双下划线 <code>__</code> 包裹起来的方法，统称为魔术方法（Magic Method， 由于是双下划线，也可称 dunder），它是一种特殊的方法，往往不会显式地调用。魔术方法在类或对象的某些事件触发后会自动运行，让类具有神奇的“魔力”。Python 中的魔术方法很多，例如控制算术运算符的 <code>__add__</code>, <code>__mul__</code> 等，控制比较运算符的 <code>__eq__</code> 等，还有控制类型转换、属性操作、构造析构的魔术方法。这里对常用的 <code>__init__</code>, <code>__repr__</code> 稍作介绍。</p><h3 id="init-初始化方法"><a href="#init-初始化方法" class="headerlink" title="__init__ 初始化方法"></a><code>__init__</code> 初始化方法</h3><p><code>__init__</code> 方法类似 C++类中的构造函数。需要注意的是，<code>__init__</code> 函数的第一个参数为实例本身，通常名字为 <code>self</code>，通过 <code>self</code> 可以访问实例的属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;学习&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在学习<span class="subst">&#123;course_name&#125;</span>.&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;玩耍&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在玩游戏.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;CZG&#x27;</span>, <span class="number">21</span>)</span><br><span class="line">stu2 = Student(<span class="string">&#x27;XX&#x27;</span>, <span class="number">15</span>)</span><br><span class="line">stu1.study(<span class="string">&#x27;Python 程序设计&#x27;</span>)</span><br><span class="line"><span class="comment"># CZG正在学习Python 程序设计.</span></span><br><span class="line">stu2.play()</span><br><span class="line"><span class="comment"># XX正在玩游戏.</span></span><br></pre></td></tr></table></figure><h3 id="repr-方法"><a href="#repr-方法" class="headerlink" title="__repr__ 方法"></a><code>__repr__</code> 方法</h3><p><code>__repr__</code> 方法可以改变 <code>print</code> 函数的行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法&quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>: <span class="subst">&#123;self.age&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">&#x27;CZG&#x27;</span>, <span class="number">21</span>)</span><br><span class="line"><span class="built_in">print</span>(stu1)        <span class="comment"># CZG: 21</span></span><br><span class="line">students = [</span><br><span class="line">    stu1,</span><br><span class="line">    Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">16</span>),</span><br><span class="line">    Student(<span class="string">&#x27;李四&#x27;</span>, <span class="number">25</span>)</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(students)</span><br><span class="line"><span class="comment"># [CZG: 21, 张三: 16, 李四: 25]</span></span><br></pre></td></tr></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装是为了便利代码的使用者，即程序员在编写类的过程中，隐藏一切可以隐藏的实现细节，只向外界暴露简单的调用接口。例如对于钟表类，可以定义 <code>run</code> 函数处理小时、分钟、秒的进位，使用者只需调用 <code>run</code> 即可。</p><figure class="highlight python"><figcaption><span>封装示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span><br><span class="line">        self.hour = hour</span><br><span class="line">        self.<span class="built_in">min</span> = minute</span><br><span class="line">        self.sec = second</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.sec += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.sec == <span class="number">60</span>:</span><br><span class="line">            self.sec = <span class="number">0</span></span><br><span class="line">            self.<span class="built_in">min</span> += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.<span class="built_in">min</span> == <span class="number">60</span>:</span><br><span class="line">                self.<span class="built_in">min</span> = <span class="number">0</span></span><br><span class="line">                self.hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.hour == <span class="number">24</span>:</span><br><span class="line">                    self.hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.hour:<span class="number">0</span>&gt;2d&#125;</span>:<span class="subst">&#123;self.<span class="built_in">min</span>:<span class="number">0</span>&gt;2d&#125;</span>:<span class="subst">&#123;self.sec:<span class="number">0</span>&gt;2d&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建时钟对象</span></span><br><span class="line">clock = Clock(<span class="number">23</span>, <span class="number">59</span>, <span class="number">58</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 给时钟对象发消息读取时间</span></span><br><span class="line">    <span class="built_in">print</span>(clock.show())</span><br><span class="line">    <span class="comment"># 休眠 1 秒钟</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 给时钟对象发消息使其走字</span></span><br><span class="line">    clock.run()</span><br></pre></td></tr></table></figure><p>在本例中，将时钟的进位与显示封装起来，外部调用时，只需要调用相应函数即可。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>面向对象的编程语言支持在已有类的基础上创建新类，从而减少重复代码的编写。提供继承信息的类叫做父类（超类、基类），得到继承信息的类叫做子类（派生类、衍生类）。由于 Python2.x 版本的遗留问题，虽然 Python3.x 已经不必显式继承 <code>object</code> 类，但依然建议大家显式继承。继承的语法为 <code>class 类名(父类名):</code></p><figure class="highlight python"><figcaption><span>继承示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):    <span class="comment"># 此处显式继承了 object 类</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;人类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在吃饭.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在睡觉.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;学生类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;self.name&#125;</span>正在学习<span class="subst">&#123;course_name&#125;</span>.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">&quot;CZG&quot;</span>, <span class="number">21</span>)</span><br><span class="line">p.eat()                    <span class="comment"># CZG正在吃饭.</span></span><br><span class="line">stu = Student(<span class="string">&quot;CZG1&quot;</span>, <span class="number">21</span>)</span><br><span class="line">stu.study(<span class="string">&quot;Pytorch&quot;</span>)       <span class="comment"># CZG1正在学习Pytorch.</span></span><br></pre></td></tr></table></figure><p>注意在本例中，重写了子类的 <code>__init__</code> 方法，如果不重写，将自动调用父类构造方法进行构造，如果重写，则默认不会调用，需要自己通过 <code>super().__init__</code> 调用父类构造方法。</p></div><div class="story post-story"><h2 id="Python-模块"><a href="#Python-模块" class="headerlink" title="Python 模块"></a>Python 模块</h2><p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。Python 中每个文件就代表了一个模块（module）。使用模块可以大大提升代码可维护性，同时，也让编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其它模块，包括 Python 内置的模块和来自第三方的模块。</p><p>当然，使用模块还可以避免函数名和变量名冲突。相同名字的函数、变量可以分别存在不同的模块中。在使用模块时，可以使用 <code>import</code> 关键字导入。</p><p>例如在同一文件夹下，分别有 <code>module1.py</code>, <code>module2.py</code>, <code>test.py</code> 三个文件。</p><figure class="highlight python"><figcaption><span>module1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>module2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;goodbye, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>test.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module1</span><br><span class="line"><span class="keyword">import</span> module2</span><br><span class="line"><span class="comment"># 用“模块名.函数名”的方式（完全限定名）调用函数</span></span><br><span class="line">module1.foo()    <span class="comment"># hello, world!</span></span><br><span class="line">module2.foo()    <span class="comment"># goodbye, world!</span></span><br></pre></td></tr></table></figure><p>除了自己编写的模块外，Python 本身还内置了许多模块，例如处理时间的 <code>time</code> 模块，处理文件系统的 <code>os</code> 模块等等。我们还可以自己安装第三方模块来进一步简化代码编写。例如 <code>numpy</code>, <code>pandas</code> 等就属于非常出名的第三方模块。</p><p>限于篇幅，此处不再详述如何使用 conda，pip 管理模块，大家可以参考</p><div class="tag link"><a class="link-card" title="包管理器使用教程" href="https://www.jianshu.com/p/fe8cc7b6f558"><div class="left"><img src="https://upload.jianshu.io/users/upload_avatars/265163/c9ee5112-6c96-4b20-9202-5ce474399c50.jpg" class="lazyload placeholder" data-srcset="https://upload.jianshu.io/users/upload_avatars/265163/c9ee5112-6c96-4b20-9202-5ce474399c50.jpg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">包管理器使用教程</p><p class="url">https://www.jianshu.com/p/fe8cc7b6f558</p></div></a></div><p>安装模块的常用命令：</p><figure class="highlight shell"><figcaption><span>pip conda 基础语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda install &lt;package-name&gt;</span><br><span class="line">pip install &lt;package-name&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>pip conda 使用示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">conda install numpy</span><br><span class="line">pip install scikit-learn</span><br></pre></td></tr></table></figure></div><div class="story post-story"><h2 id="后续学习"><a href="#后续学习" class="headerlink" title="后续学习"></a>后续学习</h2><p>以上是 Python 非常基础的语法，但 Python 核心语法不仅限于此。后续大家还可以学习 Python 标准库，文件读写，字符编码，正则表达式，面向对象进阶，函数式编程，各类包的使用（如 numpy，pandas）以至机器学习……</p><p>在这里，笔者再推荐几个网站。</p><details open><summary> 如果大家编程时，代码报错怎么办？ </summary>              <div class='content'>              <p>英文：</p><div class="tag link"><a class="link-card" title="Understanding the Python Traceback" href="https://realpython.com/python-traceback/"><div class="left"><img src="https://files.realpython.com/media/Understanding-Pythons-Traceback_Watermarked.138741dabfeb.jpg" class="lazyload placeholder" data-srcset="https://files.realpython.com/media/Understanding-Pythons-Traceback_Watermarked.138741dabfeb.jpg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Understanding the Python Traceback</p><p class="url">https://realpython.com/python-traceback/</p></div></a></div><p>译文：</p><div class="tag link"><a class="link-card" title="读懂 Python 中的异常信息" href="https://blog.csdn.net/muzico425/article/details/99688343"><div class="left"><img src="https://files.realpython.com/media/Understanding-Pythons-Traceback_Watermarked.138741dabfeb.jpg" class="lazyload placeholder" data-srcset="https://files.realpython.com/media/Understanding-Pythons-Traceback_Watermarked.138741dabfeb.jpg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">读懂 Python 中的异常信息</p><p class="url">https://blog.csdn.net/muzico425/article/details/99688343</p></div></a></div>              </div>            </details><details open><summary> 比较好的 Python 教程 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="Python - 100 天从新手到大师" href="https://github.com/jackfrued/Python-100-Days"><div class="left"><img src="https://avatars.githubusercontent.com/u/7474657?s=48&v=4" class="lazyload placeholder" data-srcset="https://avatars.githubusercontent.com/u/7474657?s=48&v=4" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python - 100 天从新手到大师</p><p class="url">https://github.com/jackfrued/Python-100-Days</p></div></a></div><div class="tag link"><a class="link-card" title="Python 语言基础 50 课" href="https://github.com/jackfrued/Python-Core-50-Courses"><div class="left"><img src="https://avatars.githubusercontent.com/u/7474657?s=48&v=4" class="lazyload placeholder" data-srcset="https://avatars.githubusercontent.com/u/7474657?s=48&v=4" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python 语言基础 50 课</p><p class="url">https://github.com/jackfrued/Python-Core-50-Courses</p></div></a></div><div class="tag link"><a class="link-card" title="廖雪峰的 Python 教程" href="https://www.liaoxuefeng.com/wiki/1016959663602400"><div class="left"><img src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">廖雪峰的 Python 教程</p><p class="url">https://www.liaoxuefeng.com/wiki/1016959663602400</p></div></a></div>              </div>            </details><details open><summary> 官方文档 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="Python 文档" href="https://docs.python.org/zh-cn/3/"><div class="left"><img src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python 文档</p><p class="url">https://docs.python.org/zh-cn/3/</p></div></a></div>              </div>            </details><details open><summary> Python 语法速查 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="Python CheatSheet" href="https://www.pythoncheatsheet.org/"><div class="left"><img src="https://raw.githubusercontent.com/wilfredinni/merken/master/static/merken/img/snake.svg" class="lazyload placeholder" data-srcset="https://raw.githubusercontent.com/wilfredinni/merken/master/static/merken/img/snake.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python CheatSheet</p><p class="url">https://www.pythoncheatsheet.org/</p></div></a></div><div class="tag link"><a class="link-card" title="Python CheatSheet" href="https://programming-idioms.org/cheatsheet/Python"><div class="left"><img src="https://programming-idioms.org/default_20220530t214654_/img/wheel.svg" class="lazyload placeholder" data-srcset="https://programming-idioms.org/default_20220530t214654_/img/wheel.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python CheatSheet</p><p class="url">https://programming-idioms.org/cheatsheet/Python</p></div></a></div><div class="tag link"><a class="link-card" title="Python Vs C" href="https://programming-idioms.org/cheatsheet/C/Python"><div class="left"><img src="https://programming-idioms.org/default_20220530t214654_/img/wheel.svg" class="lazyload placeholder" data-srcset="https://programming-idioms.org/default_20220530t214654_/img/wheel.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python Vs C</p><p class="url">https://programming-idioms.org/cheatsheet/C/Python</p></div></a></div>              </div>            </details><details open><summary> 提问或搜索 </summary>              <div class='content'>              <div class="tag link"><a class="link-card" title="Stack Overflow" href="https://stackoverflow.com/"><div class="left"><img src="https://cdn.sstatic.net/Sites/askubuntu/Img/apple-touch-icon.png?v=e16e1315edd6" class="lazyload placeholder" data-srcset="https://cdn.sstatic.net/Sites/askubuntu/Img/apple-touch-icon.png?v=e16e1315edd6" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Stack Overflow</p><p class="url">https://stackoverflow.com/</p></div></a></div>              </div>            </details></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;上次教程中，我们简要介绍了 Python 安装与快速入门，本次教程将对 Python 数据类型、面向对象编程技术（OOP）初步、Python 模块与包进行简要介绍，并向大家推荐 Python 后续学习资料。&lt;/p&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;本教程假定读者已经了解并学会使用 Python 的基本数据类型，运算符，输入输出，字符串，流程控制，函数。如果对这些基础知识尚感迷茫，可以阅读“Python 教程Ⅰ丨环境安装与快速入门”，并认真练习。&lt;/p&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="技术" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Python" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/Python/"/>
    
    
    <category term="Python" scheme="https://zypnb.top/tags/Python/"/>
    
    <category term="编程初步" scheme="https://zypnb.top/tags/%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Python 教程Ⅰ丨环境安装与快速入门</title>
    <link href="https://zypnb.top/tech/python_tutorial_1/"/>
    <id>https://zypnb.top/tech/python_tutorial_1/</id>
    <published>2021-08-08T16:00:00.000Z</published>
    <updated>2022-08-23T00:54:33.207Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你很有可能之前就听说过 Python，Python 目前已经是最流行的编程语言之一。无论在 IEEE Spectrum 编程语言排行榜还是 TIOBE 编程语言排行榜上，Python 都在很高的位置。</p><p>Python 是一种相当高级的语言，通常情况下，完成同一个任务，C 语言需要写 1000 行，使用 Python 只要 20~100 行。</p><p>虽然高级的 Python 程序设计有相当难度，但是 Python 依然对初学者很友好。在日常工作条件下，Python 相比其他语言更加简单易用。如果你对 Python 语言颇有兴趣，不妨花些时间看看这篇教程。</p><div class="note warning"><p>本教程假定读者已经学过 C&#x2F;C++ 语言，在此基础上再学习 Python 语言。本教程通过对比这两个编程语言解释 Python 基础语法，因此略去了一些基础知识。此前没有学习过 C&#x2F;C++ 的读者不建议看本篇教程。</p></div><span id="more"></span><div class="story post-story"><h2 id="Python-简介"><a href="#Python-简介" class="headerlink" title="Python 简介"></a>Python 简介</h2><p class='p red'>Python 是一种解释型语言</p><p>对比 C&#x2F;C++，Python 程序不需要编译即可运行，因此具有很强的跨平台性。另外，所有的命令都是逐行发送到 Python 解释器执行，不需要经过链接过程，因此代码顺序十分重要。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/python-c-compare.svg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/python-c-compare.svg" srcset="/images/placeholder.svg" alt="C/C++(左)与 Python(右)的程序执行对比"/></div><span class="image-caption">C/C++(左)与 Python(右)的程序执行对比</span></div><p class='p red'>Python 是一种强类型语言</p><p>Python 代码规范化程度高，可读性强。</p><br/><p class='p red'>Python 应用领域广阔</p><p>Python 在 Web 应用后端开发、云基础设施建设、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。</p><br/><p class='p red'>Python 也存在一些缺点</p><p>Python 执行效率稍低、代码无法加密以及框架太多，良莠不齐等。</p></div><div class="story post-story"><h2 id="如何学习-Python"><a href="#如何学习-Python" class="headerlink" title="如何学习 Python"></a>如何学习 Python</h2><p class='p red'>基于已学编程语言，如与 C/C++ 对比</p><p>本次教程将主要从已学的 C&#x2F;C++ 出发，讲解 Python 基本语法，大家也可以基于此学习流程控制、面向对象的编程方法（OOP）。</p><br/><p class='p red'>阅读 Python 教程</p><p>网络上 Python 教程良莠不齐，此处推荐</p><div class="tag link"><a class="link-card" title="廖雪峰的 Python 教程" href="https://www.liaoxuefeng.com/wiki/1016959663602400"><div class="left"><img src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">廖雪峰的 Python 教程</p><p class="url">https://www.liaoxuefeng.com/wiki/1016959663602400</p></div></a></div><p>官方文档本身就是不错的教程， 见</p><div class="tag link"><a class="link-card" title="Python 文档" href="https://docs.python.org/zh-cn/3/"><div class="left"><img src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python 文档</p><p class="url">https://docs.python.org/zh-cn/3/</p></div></a></div><br/><p class='p red'>观看视频学习，不建议，为什么？</p><p>观看视频更多是一种观察 + 模仿，而阅读文档是读书 + 思考，前者更适用于入门，但对于深入学习，往往后者效率更高。并且文档的时效性更强，有许多修正，需要培养阅读文档的能力。</p><br/><p class='p red'>多练习！！！</p></div><div class="story post-story"><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><div class="note info"><p>首先，让我们来安装环境！</p></div><p>对 Windows 系统，推荐使用 Anaconda 环境，对 Linux 或 Mac OS 系统，推荐使用 Miniconda 环境。</p><p>为什么不使用纯 Python 环境呢？尽管 Anaconda 也有体积较大等缺点，但首先，<span class='p red'>纯 Python 环境包版本管理不便</span>，例如进行机器学习时，学习他人代码往往需要不同版本的 TF 与 Pytorch，创建虚拟环境就可以很好解决这一问题；其次，<span class='p red'>纯 Python 环境需要自己安装需要数据科学必要的包</span>。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/anaconda.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/anaconda.png" srcset="/images/placeholder.svg" alt="Anaconda"/></div><span class="image-caption">Anaconda</span></div><p>如果你使用 Linux，那大概率你已经对 Python 安装相当熟练，因此本教程直接略去，只介绍 Windows 下 Anaconda 环境的安装。</p><h3 id="Anaconda-安装步骤"><a href="#Anaconda-安装步骤" class="headerlink" title="Anaconda 安装步骤"></a>Anaconda 安装步骤</h3><ol><li>下载 Anaconda 安装包</li></ol><p>在清华大学开源镜像站下载，参见</p><div class="tag link"><a class="link-card" title="Anaconda 镜像使用帮助" href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/"><div class="left"><img src="https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small.png" class="lazyload placeholder" data-srcset="https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small.png" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Anaconda 镜像使用帮助</p><p class="url">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</p></div></a></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/anaconda-archive.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/anaconda-archive.png" srcset="/images/placeholder.svg" alt="在开源镜像站下载安装包"/></div><span class="image-caption">在开源镜像站下载安装包</span></div><ol start="2"><li>添加环境变量</li></ol><p>在安装过程中，可以选择是否将 Anaconda 添加入环境变量。如果你想要在 Windows 自带的命令提示符中运行 Python 或不想在安装其他软件时额外配置 Python&#x2F;Conda 的路径，可以选择将 Anaconda 加入环境变量。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/anaconda-path.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/anaconda-path.png" srcset="/images/placeholder.svg" alt="将 Anaconda 添加到环境变量中"/></div><span class="image-caption">将 Anaconda 添加到环境变量中</span></div><details open><summary> 什么是环境变量？ </summary>              <div class='content'>              <p>环境变量可以认为是 Windows 搜索程序的路径，执行程序时，Windows 系统会在环境变量中逐个搜索，如果找不到，则会返回找不到可执行文件。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/environment-example.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/environment-example.png" srcset="/images/placeholder.svg" alt="环境变量说明"/></div><span class="image-caption">环境变量说明</span></div>              </div>            </details><ol start="3"><li>修改软件源</li></ol><p>修改 conda 源，具体参见</p><div class="tag link"><a class="link-card" title="Anaconda 镜像使用帮助" href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/"><div class="left"><img src="https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small.png" class="lazyload placeholder" data-srcset="https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small.png" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Anaconda 镜像使用帮助</p><p class="url">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</p></div></a></div><p>修改 pip 源，具体参见</p><div class="tag link"><a class="link-card" title="PyPI 镜像使用帮助" href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/"><div class="left"><img src="https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small.png" class="lazyload placeholder" data-srcset="https://mirrors.tuna.tsinghua.edu.cn/static/img/logo-small.png" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">PyPI 镜像使用帮助</p><p class="url">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</p></div></a></div><h3 id="环境测试"><a href="#环境测试" class="headerlink" title="环境测试"></a>环境测试</h3><ol><li>打开命令提示符</li></ol><kbd>Win</kbd> + <kbd>S</kbd> 搜索命令提示符打开，或 <kbd>Win</kbd> + <kbd>R</kbd> 输入 cmd 然后回车<ol start="2"><li>输入如下命令</li></ol><figure class="highlight shell"><figcaption><span>打开 Python 交互式命令行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate base</span><br><span class="line">python</span><br></pre></td></tr></table></figure><ol start="3"><li>打开交互式命令行</li></ol><p>试试输入 <code>1124 ** 122</code> 然后回车，这是在计算 1124 的 122 次方<del>（于是你就获得了一个强大的计算器）</del></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/python-caculator.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/python-caculator.png" srcset="/images/placeholder.svg" alt="测试环境代码"/></div><span class="image-caption">测试环境代码</span></div><h3 id="我不想在黑框框里编程！"><a href="#我不想在黑框框里编程！" class="headerlink" title="我不想在黑框框里编程！"></a>我不想在黑框框里编程！</h3><p class='p red'>可安装文本编辑器（或集成开发环境， IDE）</p><p>Python 脚本文件是纯文本文件，理论上只需要记事本即可编辑，编辑后即可使用 Python 解释器运行。但是记事本没有代码补全、代码高亮、代码警告等便于编程的功能。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/notepad-python.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/notepad-python.png" srcset="/images/placeholder.svg" alt="通过记事本编辑 Python 脚本文件"/></div><span class="image-caption">通过记事本编辑 Python 脚本文件</span></div><ol><li>使用 PyCharm</li></ol><p>JetBrain 公司出品，堪称神器，参考</p><div class="tag link"><a class="link-card" title="JetBrain PyCharm 官网" href="https://www.jetbrains.com/zh-cn/pycharm/"><div class="left"><img src="https://unpkg.com/volantis-static@0.0.1654736714924/media/org.volantis/logo/256/safari.png" class="lazyload placeholder" data-srcset="https://unpkg.com/volantis-static@0.0.1654736714924/media/org.volantis/logo/256/safari.png" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">JetBrain PyCharm 官网</p><p class="url">https://www.jetbrains.com/zh-cn/pycharm/</p></div></a></div><p>使用大学生身份可以申请专业版。</p><ol start="2"><li>使用 VS Code</li></ol><p>Microsoft 出品，支持多种编程语言，本身是个文本编辑器，可通过扩展支持各类 IDE 功能，参考</p><div class="tag link"><a class="link-card" title="VS Code 使用 Python 文档" href="https://code.visualstudio.com/docs/languages/python"><div class="left"><img src="https://code.visualstudio.com/assets/images/windows-logo.png" class="lazyload placeholder" data-srcset="https://code.visualstudio.com/assets/images/windows-logo.png" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">VS Code 使用 Python 文档</p><p class="url">https://code.visualstudio.com/docs/languages/python</p></div></a></div></div><div class="story post-story"><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="第一个-Python-程序"><a href="#第一个-Python-程序" class="headerlink" title="第一个 Python 程序"></a>第一个 Python 程序</h3><p>新建文件，修改文件名及后缀名为 <code>hello.py</code></p><p>用文本编辑软件或上文提到的 IDE 打开这个文件，添加内容</p><figure class="highlight python"><figcaption><span>我的第一个 Python 程序</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在此处打开命令提示符，输入 <code>python hello.py</code></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/python-hello-world.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/python-hello-world.png" srcset="/images/placeholder.svg" alt="第一个 Python 程序"/></div><span class="image-caption">第一个 Python 程序</span></div><p>恭喜你写出了第一个 Python 程序！</p><p>即使是这样一个简单的程序，对比 C，Python 显得非常简洁。</p><figure class="highlight c"><figcaption><span>与 C 语言对比</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-数据类型及变量"><a href="#Python-数据类型及变量" class="headerlink" title="Python 数据类型及变量"></a>Python 数据类型及变量</h3><p>Python 是一种<span class='p red'>强类型语言</span>同时也属于<span class='p red'>动态类型语言</span>，Python 的变量具有明确的类型，虽然这种类型可以改变。</p><figure class="highlight python"><figcaption><span>Python 的各种数据类型</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class &#x27;complex&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class &#x27;bool&#x27;&gt;</span></span><br></pre></td></tr></table></figure><div class="note info"><p>Python 中 <code>#</code> 后面写的内容不会被解释器执行，故 <code>#</code> 后内容为注释，类似于 C 中的 <code>//</code></p><p>如果要使用多段注释，使用 <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code> 包裹注释，类似于 C 中的 <code>/* 一些注释 */</code></p></div><figure class="highlight c"><figcaption><span>C 的数据类型</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">double</span> b = <span class="number">12.345</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex.h&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="type">_Complex</span> c = <span class="number">1.0</span>+<span class="number">5.0</span>*I;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* d = <span class="string">&quot;hello, world&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Python-运算符"><a href="#Python-运算符" class="headerlink" title="Python 运算符"></a>Python 运算符</h3><p>Python 运算符与 C 差异不大，需要注意的是除法与 C 定义不同。Python 中 <code>//</code> 被称为 floor divide（除之后向下取整）</p><figure class="highlight python"><figcaption><span>Python 中运算符</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">29</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))   <span class="comment"># 29 + 3 = 32</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d - %d = %d&#x27;</span> % (a, b, a - b))   <span class="comment"># 29 - 3 = 26</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d * %d = %d&#x27;</span> % (a, b, a * b))   <span class="comment"># 29 * 3 = 87</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d / %d = %f&#x27;</span> % (a, b, a / b))   <span class="comment"># 29 / 3 = 9.666667</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d // %d = %d&#x27;</span> % (a, b, a // b)) <span class="comment"># 29 // 3 = 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d %% %d = %d&#x27;</span> % (a, b, a % b))  <span class="comment"># 29 % 3 = 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d ** %d = %d&#x27;</span> % (a, b, a ** b)) <span class="comment"># 29 ** 3 = 24389</span></span><br></pre></td></tr></table></figure><p>那么，Python 中 <code>-1//2</code> 与 C 中 <code>-1/2</code> 结果相同吗？</p><details ><summary> 点击查看答案 </summary>              <div class='content'>              <p>Python 中 <code>//</code> 是除后向下取整，结果为 -1，C 的除法 <code>/</code> 采取截断，结果为 0。</p>              </div>            </details><figure class="highlight python"><figcaption><span>Python 其他运算符</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b       <span class="comment"># 相当于: a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>   <span class="comment"># 相当于: a = a * (a + 2)</span></span><br><span class="line"><span class="built_in">print</span>(a)     <span class="comment"># 算一下这里会输出什么</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>Python 逻辑运算符</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2</span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2</span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag0 =&#x27;</span>, flag0)  <span class="comment"># flag0 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag1 =&#x27;</span>, flag1)  <span class="comment"># flag1 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag2 =&#x27;</span>, flag2)  <span class="comment"># flag2 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag3 =&#x27;</span>, flag3)  <span class="comment"># flag3 = False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag4 =&#x27;</span>, flag4)  <span class="comment"># flag4 = True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag5 =&#x27;</span>, flag5)  <span class="comment"># flag5 = False</span></span><br></pre></td></tr></table></figure><p>Python 有一个神奇的运算符，但并不推荐使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> &lt;= x &lt;= <span class="number">11</span>)  <span class="comment"># True, which equals to (7 &lt;= x) and (x &lt;= 11)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">7</span> &lt;= x &lt;= <span class="number">9</span>)   <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>为什么不推荐使用呢？C&#x2F;C++ 的残留编程习惯可能会造成一些错误！比如说：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> == <span class="literal">False</span> == <span class="literal">False</span>) <span class="comment"># Is True or False?</span></span><br></pre></td></tr></table></figure><details ><summary> 点击查看答案 </summary>              <div class='content'>              <p>True，因为其相当于 <code>(False == False) and (False == False)</code></p>              </div>            </details><h3 id="Python-类型转换"><a href="#Python-类型转换" class="headerlink" title="Python 类型转换"></a>Python 类型转换</h3><p>Python 是一种强类型语言， Python 的变量具有明确的类型，虽然这种类型可以改变。</p><figure class="highlight python"><figcaption><span>Python 变量类型转换</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">a = b         <span class="comment"># a = 12.345</span></span><br><span class="line">a = <span class="built_in">int</span>(b)    <span class="comment"># a = 12</span></span><br><span class="line">a = <span class="built_in">float</span>(a)  <span class="comment"># a = 12.0</span></span><br><span class="line">c = <span class="string">&quot;12.045&quot;</span></span><br><span class="line">a = <span class="built_in">float</span>(c)  <span class="comment"># a = 12.045</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>C 变量类型转换</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="type">double</span> b = <span class="number">12.345</span>;</span><br><span class="line">    a = b;            <span class="comment">//Not allowed!</span></span><br><span class="line">    a = (<span class="type">int</span>)b;</span><br><span class="line">    a = (<span class="type">double</span>)a;    <span class="comment">//Not allowed!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-输入输出"><a href="#Python-输入输出" class="headerlink" title="Python 输入输出"></a>Python 输入输出</h3><p>输入输出比 C 更加便捷。</p><figure class="highlight python"><figcaption><span>Python 输入输出</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The quick brown fox&#x27;</span>, <span class="string">&#x27;jumps over&#x27;</span>, <span class="string">&#x27;the lazy dog&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;100 + 200 =&#x27;</span>, <span class="number">100</span> + <span class="number">200</span>)</span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(a) + <span class="string">&#x27; + &#x27;</span> + <span class="built_in">str</span>(b) + <span class="string">&#x27; = &#x27;</span> + <span class="built_in">str</span>(a + b))</span><br><span class="line"><span class="built_in">print</span>(a, <span class="string">&#x27;+&#x27;</span>, b, <span class="string">&#x27;=&#x27;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d + %d = %d&#x27;</span> % (a, b, a + b))</span><br><span class="line"></span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入名字：&quot;</span>)</span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入年龄：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(name,<span class="string">&quot;的年龄为&quot;</span>, age)</span><br></pre></td></tr></table></figure><h3 id="Python-字符串及常用数据结构"><a href="#Python-字符串及常用数据结构" class="headerlink" title="Python 字符串及常用数据结构"></a>Python 字符串及常用数据结构</h3><p>Python 中，字符串格式化与 C 类似</p><figure class="highlight python"><figcaption><span>Python 字符串格式化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hi, %s, you have $%d.&#x27;</span> % (<span class="string">&#x27;Michael&#x27;</span>, <span class="number">1000000</span>))</span><br><span class="line">A = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">if</span> A == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A is a empty string&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Python-流程控制"><a href="#Python-流程控制" class="headerlink" title="Python 流程控制"></a>Python 流程控制</h3><p>Python 使用缩进来表示代码块，一般我们使用 4 个空格作为缩进，请不要使用 <kbd>Tab</kbd>！严禁混用。流程控制语句如以下例子，<code>if</code>, <code>for</code>, <code>while</code> 后有冒号: 请不要遗漏！</p><div class="note bug red"><p>请不要在 Python 代码中使用 <kbd>Tab</kbd>！更不能将 <kbd>Tab</kbd> 与空格混用！</p><p><kbd>Tab</kbd> 与空格混用 Python 解释器会直接抛出语法错误！</p><p>不使用 <kbd>Tab</kbd> 的主要理由是在不同的终端设备上， <kbd>Tab</kbd> 的显示出现行为并不相同，部分终端设备可能 <kbd>Tab</kbd> 等同于 8 个空格，部分终端设备只能每行显示 80 个字符，为了保证显示效果，最好使用空格替代 <kbd>Tab</kbd>。</p><p>如果你使用 VS Code，那么在右下角可以更改 <kbd>Tab</kbd> 对应的空格数量，并在设置中 <code>Editor: Insert Spaces</code> 勾选“按 <kbd>Tab</kbd> 时插入空格”选项，这样就可以使用 <kbd>Tab</kbd> 快速插入缩进空格。</p></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">28</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>：</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;your age is&#x27;</span>, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="comment"># Other code...</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;your age is&#x27;</span>, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;your age is&#x27;</span>, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;teenager&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">3</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;teenager&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kid&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>for 循环（对象必须可以遍历）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>while 循环</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="Python-函数"><a href="#Python-函数" class="headerlink" title="Python 函数"></a>Python 函数</h3><p>Python 使用 <code>def</code> 关键字来定义函数</p><figure class="highlight python"><figcaption><span>定义函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>函数可返回多个返回值</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">acc</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> a, a + b, a + b + c</span><br></pre></td></tr></table></figure><p>读者可做一个小练习：编写一个函数 <code>fib(n)</code>，返回第 n 个斐波那契数</p><h3 id="Python-其他常用语法"><a href="#Python-其他常用语法" class="headerlink" title="Python 其他常用语法"></a>Python 其他常用语法</h3><p>交换两个对象的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><p>列表推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)])</span><br></pre></td></tr></table></figure><p>还有很多语法糖……</p></div><div class="story post-story"><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本教程简要介绍了 Python 的安装及快速入门，实际上，知道这些内容已经可以编写具有一定实用性的程序了。</p><p>当然，Python 的内容非常庞杂，还有很多对编程有益的特性本篇教程并未覆盖，例如：Python 面向对象编程、字典、集合、dunder（魔术方法）、Python 包管理工具等等，这些内容将在后续教程中介绍。</p><p>欢迎大家阅读本站的 Python 教程Ⅱ，点击下面的连接即可访问。</p><div class="tag link"><a class="link-card" title="Python 教程Ⅱ丨面向对象编程初步" href="/tech/python_tutorial_2/"><div class="left"><img src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Python.svg" srcset="/images/placeholder.svg"/></div><div class="right"><p class="text">Python 教程Ⅱ丨面向对象编程初步</p><p class="url">/tech/python_tutorial_2/</p></div></a></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;你很有可能之前就听说过 Python，Python 目前已经是最流行的编程语言之一。无论在 IEEE Spectrum 编程语言排行榜还是 TIOBE 编程语言排行榜上，Python 都在很高的位置。&lt;/p&gt;
&lt;p&gt;Python 是一种相当高级的语言，通常情况下，完成同一个任务，C 语言需要写 1000 行，使用 Python 只要 20~100 行。&lt;/p&gt;
&lt;p&gt;虽然高级的 Python 程序设计有相当难度，但是 Python 依然对初学者很友好。在日常工作条件下，Python 相比其他语言更加简单易用。如果你对 Python 语言颇有兴趣，不妨花些时间看看这篇教程。&lt;/p&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;本教程假定读者已经学过 C&amp;#x2F;C++ 语言，在此基础上再学习 Python 语言。本教程通过对比这两个编程语言解释 Python 基础语法，因此略去了一些基础知识。此前没有学习过 C&amp;#x2F;C++ 的读者不建议看本篇教程。&lt;/p&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="技术" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Python" scheme="https://zypnb.top/categories/%E6%8A%80%E6%9C%AF/Python/"/>
    
    
    <category term="Python" scheme="https://zypnb.top/tags/Python/"/>
    
    <category term="环境配置" scheme="https://zypnb.top/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>贝多芬悲怆奏鸣曲第三乐章</title>
    <link href="https://zypnb.top/novels/beethoven_piano_sonata/"/>
    <id>https://zypnb.top/novels/beethoven_piano_sonata/</id>
    <published>2020-12-18T20:20:06.000Z</published>
    <updated>2022-08-23T00:54:33.204Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>进入文章页面右上角可以播放本曲</p></div><p>当这首曲子响起的时候，我突然意识到这首曲子小时候在哪听过，而且还是听过很多次。可是到底是在哪里？能让一个小孩安静地坐在那里，一遍又一遍地听着古典钢琴曲的地方，到底哪里有呢？</p><p>我循着曲调摸索着。曲子开头的部分很明快，同时有张有弛，让人不得不赞叹演奏者的水准。随着两下轻弹，曲子的第一部分完成了收尾。</p><p>紧接着，不给任何反应的空间，是一下重音，伴随着舒缓的琴声，曲子的第二部分拉开序幕。伴奏用力地敲了几下低音，节奏也急了，好像想要表达出什么情感，但并没有加重，而是转换成舒缓的调调，绕了一个大圈，在平和的 C 小调中结束了。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/beethoven_piano_sonata.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/beethoven_piano_sonata.png" srcset="/images/placeholder.svg" alt="这个位置"/></div><span class="image-caption">这个位置</span></div><p>在短暂的间隔后，轻柔的乐声再次响起，好似在轻轻敲门，或者是一位温柔的母亲想要唤醒熟睡中的孩子。曲调也是逐渐加快，又在最后戛然而止。</p><span id="more"></span><p>主体的旋律在此后明朗，就是开头轻快的旋律，之后进行了不同的变调，时而转为沉闷，时而回归柔和。</p><p>整体听下来，感觉是偏轻巧明快的，在这样的曲调中逐渐生发出来的低音、重音，让人感觉出紧张感的音调，也都在出现过后消失了。我的思绪也飘在半空中，没有落地就随着乐声的结束就消失了。</p><p>听完一遍后，我仍然没有头绪，甚至对曲子的后半部分感觉没什么映像。能回忆起来的曲调只到第二段的几下重音了。曲子非常优美，而且光听就感觉演奏难度很高。我自己也因为兴趣，偶尔摸一摸吉他，遇到那些节奏很快，需要不停变换和弦的歌时，就会打开别人的视频，看着人家的手指上下翻飞辗转腾挪灵敏至极，感叹自己是个手残。这首歌同样，因为大部分节奏很轻快，所以可想而知，对演奏者熟练度的要求也是很高的。</p><p>这时我脑海中突然出现了这样的画面：我趴在沙发上，逐渐入睡，听的就是这首曲子。我将倍速调成了 0.75，缓慢些许的节奏触碰到了记忆的开关。可以确定了，印像中的钢琴曲是没有这样熟练的，而是需要放慢一些，甚至加上节拍器哒哒哒声音才能弹奏出来的。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/metronome_sm.jpg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/metronome_sm.jpg" srcset="/images/placeholder.svg" alt="image" style="width:90%;"/></div></div><p>哦，是我那个从小认识的老朋友啊。</p><p>记忆中的场景完全复原了。那是小学的时候，他总是邀请我到他家玩，可他严格的母亲却总是会在我们玩得正开心的时候把他撵过去练钢琴。他调好节拍器，随着“哒、哒、哒、叮——”的声音，《悲怆》的钢琴声响起。而我则坐在一旁的沙发上看他的《福尔摩斯探案集》，看累了就闭上眼，细细地听这首曲子。</p><p>那时候听这首曲子，是什么心境呢？八九岁的我只是想着每天要怎么玩，这周的零花钱要用来买什么，最喜欢的歌是迪迦奥特曼的主题曲《奇迹再现》……而趴在沙发上等待他完成练习的时光里，这首《悲怆》，也跟着被刻在了脑海里，就储存在《奇迹再现》的旁边。对我而言，听到这首《悲怆》响起，就代表我俩欢乐的玩耍时间结束了，我们不再能在沙发上一边跳一边看奥特曼，而是要假装乖乖地练钢琴、看书。</p><p>这时间并不是太难熬，毕竟弹琴的不是我，我只要躺在沙发上，心情好的话继续读一读福尔摩斯，无聊了就眯着眼睡觉。对他而言，情况就不太妙。指尖流出的音乐是优美的，琴键上的小手却是痛苦的。他本就不是那种坐的住的脾性——或许正是因此，他家才从小就把他送去老师家学钢琴。乐曲配上节拍器的哒、哒、哒、叮的节奏或许很好听，可是离了曲调，节拍器的声音难免枯燥。更枯燥的是练习的过程。对我来说，琴声或许很美妙，欣赏乐曲是无聊时刻的消遣，听腻了大可闭眼睡觉；于他，琴声却是需要全副精神对待的任务，弹错的每一个音都会带来层层加深的挫败感。这是演奏者特有的负担，或许只有演奏者本人才无法做到欣赏自己的音乐吧，在成为大师之前。</p><p>因此，每次坐上钢琴凳时，他总是一副心不甘情不愿的样子，多半要和母亲拌一会儿嘴，就练习的时间讨价还价一番，在得到一个否定的答复之后悻悻地掀开钢琴盖开始弹奏。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/mfcd022forblogg.jpg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/mfcd022forblogg.jpg" srcset="/images/placeholder.svg" alt="image" style="width:60%;"/></div></div><p>我点开另一个演奏版本的《悲怆》第三乐章。熟悉的旋律再次进入耳中，曲调轻快柔和。我的歌单中还是有一些很中意的古典乐曲的，典雅如巴赫的《G 弦上的咏叹调》《无伴奏大提琴第一组曲前奏曲》（Cello Suite No. 1, in G Major, BWV 1007），安逸如肖邦的夜曲（Nocturne No. 2 in E-Flat Major, Op. 9, No. 2），深沉如贝多芬的月光奏鸣曲……无一不是在别处听到，惊觉曲中饱含深情，遂添加到歌单，反复品味。可是《悲怆》这一曲，我竟无法准确地言明它表达了何种感情。它明快的曲调下找不到欢喜，在后面旋律转缓后也没有表现悲伤或者哀怨，而是再次被无表情的欢快曲调改写，只有在最后，才以一串突然下落的重音结尾。漠不关心，或许是回旋的主旋律中的感情——我只是谱写着我的曲，并没有披露真心；你只是听着我的调，并没有付出感情。我为了施展才华，自顾自地挥写我的篇章；你不愿耳中孤寂，人云亦云按下播放。乐圣和我们的距离，大概如此。爱的反义词是漠不关心，这话或许有点问题，爱的对立面应该有恨。然而爱、恨，都是一种强烈的情感，用于表现弱情感的漠不关心在某种定义下确实可以作为爱的反义词。漠不关心的对立面，是爱，也是恨。漠不关心的曲调中，或许有爱，或许有恨。爱初生而被恨浇灭，恨萌发而被爱感化，交融在一起，就将自己的内心封闭，一副爱理不理的样子。</p><p>人与人之间是无法相互理解的。从古至今都是。</p><p>兄弟啊，我对你的钢琴声漠不关心，你对这样练琴的时光，又究竟是爱，还是恨？你爱这从你指尖汩汩流出的音乐吗？你恨逼着你日夜练习的母亲吗？</p><p>他在钢琴前，我在沙发上，贝多芬在乐谱里，这样定格在童年记忆的画面中，还少了一个人——他的母亲，在厨房里。她会打开厨房的门忙活饭菜，因为这样可以时刻倾听儿子的练习成果。当然，也可以说监听，儿子有没有偷懒啊，有没有和我在聊天耽误练习啊……有时他会以上厕所为由偷一会儿懒，还要经过百般拉扯，才能征得同意。作为旁观者的我早已习以为常，默默注视着他们母子之间的博弈。这合理吗？母亲望子成龙，严加管教，很合理；孩子想要挣脱束缚，自由玩耍，也很合理。没有正确与错误的一方，矛盾，只是在这样的环境下形成了，并长久地存在着。</p><p>朋友脾气犟，他们也经常爆发争吵。年少的我会迷茫：我到底应该以什么立场，介入这场争斗中？是他的朋友，还是她家的客人？大多数时候是默不作声，等着他闹完吃完晚饭，能得到允许玩一会儿电脑游戏，然后一起回房睡觉。他生性好动，总是会在睡前跟我讲说不完的话，跟我讨论奥特曼的强弱，给我讲他想要买的玩具。而后他总是很快进入睡眠，我却反被他“长妈妈”式的睡姿搞得难以入眠。偏偏这时，脑海中还会循环播放白天听到的曲子——是这首《悲怆》。那时候并不觉得这曲子好听，没有朗朗上口，能哼出来的旋律，只有变换回旋，捉摸不透的曲调，甚至觉得它有些怪。但因为听得太多便记下来了，这时也在耳边嗡嗡地播放。这是贝多芬的曲子，贝多芬是伟人书上出现的人物，他的曲子会不好听？小时候的我并没有觉得这有什么不妥，当你告诉我这是出自那样的天才之手的曲子，我只会说一句：好厉害！然后继续想我的心事吧。厉害的东西，就交给大人去研究吧，对我来说还太早了。我还是会一个人唱着奥特曼们的主题曲，有它们，就够了。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Old-piano.jpg" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Old-piano.jpg" srcset="/images/placeholder.svg" alt="image" style="width:90%;"/></div></div><p>曲调还是带有一些小亢奋，我仍然没有睡着。我起身，打开房门，朝厕所走去。路过楼梯时，我的目光看向那月光下的钢琴——盖子关闭着，上面铺着防尘的布，肃穆地等待下一次的演奏。这一瞥中，我会不会透过幽邃的时光，看到多年后的一个夜晚，我也会因睡不着而听着这首《悲怆》，敲下这些文字？正呼呼大睡的兄弟，你有没有想过，在某一天，母亲终于不再管着你，逼着你每天练习了，到那天你可否有心情，独自坐在钢琴前，再来一曲，献给小时候的自己？</p><p>不，这些不该是一个小孩子能看到的。眼前的世界只有明天的早餐，以及上午的钢琴补习班。也许他以后也会像补习的老师一样，靠着翩飞的双手找一份工作，吃一碗饱饭；或是终成大器，成为一代音乐大师，在维也纳演奏贝多芬的曲子；或者是，成为一个巨人，让几个世纪后的人在维也纳演奏他的曲子；又或者跟完全没学过乐曲的我一样，走上其他的道路。这些都无从知晓。钢琴是一种可能性，许多分叉的道路摆在孩子的面前。只是直到走上某条路之前，孩子都无法意识到。回过神来，道路已经走了将近过半了。这时才发现，为你铺起这条路的，是母亲，还有自己的双手。</p><p>如果是走上钢琴家那样的道路，你会忘记么，忘记趴在沙发上听你演奏的我，忘记人在厨房却仍不忘监督你弹钢琴的母亲？你会像这首猜不透心情的《悲怆》一样，整一整你的燕尾服，面无表情地鞠躬，在掌声中结束演奏，将这样的时光藏在最心底处吧。也许那时候，或者在那之前，你我都读懂了这首曲子真正埋藏于深处的情感，但也不会把它诉诸文字，写得明明白白；而是会心一笑，等着多年后，别家练琴的孩子能在某一天猛然醒悟，热泪盈眶地奏着这首曲子。</p><p>百年后我们都将归为尘土，而这首《悲怆》第三乐章的旋律不会停止，它流淌在一架又一架钢琴上，给我们带来每一架琴，每个有钢琴的家庭，它们背后的故事。</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;进入文章页面右上角可以播放本曲&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;当这首曲子响起的时候，我突然意识到这首曲子小时候在哪听过，而且还是听过很多次。可是到底是在哪里？能让一个小孩安静地坐在那里，一遍又一遍地听着古典钢琴曲的地方，到底哪里有呢？&lt;/p&gt;
&lt;p&gt;我循着曲调摸索着。曲子开头的部分很明快，同时有张有弛，让人不得不赞叹演奏者的水准。随着两下轻弹，曲子的第一部分完成了收尾。&lt;/p&gt;
&lt;p&gt;紧接着，不给任何反应的空间，是一下重音，伴随着舒缓的琴声，曲子的第二部分拉开序幕。伴奏用力地敲了几下低音，节奏也急了，好像想要表达出什么情感，但并没有加重，而是转换成舒缓的调调，绕了一个大圈，在平和的 C 小调中结束了。&lt;/p&gt;
&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; src=&quot;https://xiaospace.oss-cn-beijing.aliyuncs.com/img/beethoven_piano_sonata.png&quot; alt=&quot;这个位置&quot;/&gt;&lt;/div&gt;&lt;span class=&quot;image-caption&quot;&gt;这个位置&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;在短暂的间隔后，轻柔的乐声再次响起，好似在轻轻敲门，或者是一位温柔的母亲想要唤醒熟睡中的孩子。曲调也是逐渐加快，又在最后戛然而止。&lt;/p&gt;</summary>
    
    
    
    <category term="散文" scheme="https://zypnb.top/categories/%E6%95%A3%E6%96%87/"/>
    
    
    <category term="散文" scheme="https://zypnb.top/tags/%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>主题团日 | TikTok 收购事件——从短兵相接到中美博弈</title>
    <link href="https://zypnb.top/community/activities/"/>
    <id>https://zypnb.top/community/activities/</id>
    <published>2020-11-23T16:00:00.000Z</published>
    <updated>2022-08-23T00:54:33.187Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info"><p>2020 年 11 月 21 日，土木 85 班开展了以“TikTok 收购事件——从短兵相接到中美博弈”为主题的团日活动。本次活动由团支书顾燚同学主持，并邀请土木 85 班班主任杨赞老师与土木 18 党支部书记林涛学长参加活动。</p></div><span id="more"></span><div class="story post-story"><h2 id="知识预热"><a href="#知识预热" class="headerlink" title="知识预热"></a>知识预热</h2><h3 id="知识竞赛"><a href="#知识竞赛" class="headerlink" title="知识竞赛"></a>知识竞赛</h3><p>本次主题团日以知识竞答环节为开场，支部同学一起回答了 8 个有关 TikTok 与字节跳动公司以及本次 TikTok 收购门中其他公司情况的小问题。<strong>沈方垠、魏佳钿</strong>独领风骚，答对 7 题，获得了支部奖励的小奖品。</p><p>以下是所有题目：</p><div class="tabs" id="tab-tab-id"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1">题目一</a></li><li class="tab"><a class="#tab-id-2">题目二</a></li><li class="tab"><a class="#tab-id-3">题目三</a></li><li class="tab"><a class="#tab-id-4">题目四</a></li><li class="tab"><a class="#tab-id-5">题目五</a></li><li class="tab"><a class="#tab-id-6">题目六</a></li><li class="tab"><a class="#tab-id-7">题目七</a></li><li class="tab"><a class="#tab-id-8">题目八</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><ol><li>TikTok 的母公司是</li></ol><div class='checkbox'><input type="radio" />            <p>A. 字节推动</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>B. 字节跳动</p>            </div><div class='checkbox'><input type="radio" />            <p>C. 字节舞动</p>            </div></div><div class="tab-pane" id="tab-id-2"><ol start="2"><li>字节跳动 Logo 内英文部分是？</li></ol><div class='checkbox'><input type="radio" />            <p>A. Bytedance</p>            </div><div class='checkbox'><input type="radio" />            <p>B. Bitdance</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>C. ByteDance</p>            </div></div><div class="tab-pane" id="tab-id-3"><ol start="3"><li>下列哪个不是字节跳动的 logo？</li></ol><div class='checkbox'><input type="radio" />            <p>A. <img src=https://xiaospace.oss-cn-beijing.aliyuncs.com/img/A31.png></p>            </div><div class='checkbox'><input type="radio" />            <p>B. <img src=https://xiaospace.oss-cn-beijing.aliyuncs.com/img/A32.jpg></p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>C. <img src=https://xiaospace.oss-cn-beijing.aliyuncs.com/img/A33.jpg></p>            </div></div><div class="tab-pane" id="tab-id-4"><ol start="4"><li>下列哪个不是字节跳动公司的产品？</li></ol><div class='checkbox'><input type="radio" />            <p>A. 抖音</p>            </div><div class='checkbox'><input type="radio" />            <p>B. 今日头条</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>C. Magi</p>            </div></div><div class="tab-pane" id="tab-id-5"><ol start="5"><li>甲骨文公司的英文是？</li></ol><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>A. Oracle</p>            </div><div class='checkbox'><input type="radio" />            <p>B. JiaguWen</p>            </div><div class='checkbox'><input type="radio" />            <p>C. <img src=https://xiaospace.oss-cn-beijing.aliyuncs.com/img/A53.jpg></p>            </div></div><div class="tab-pane" id="tab-id-6"><ol start="6"><li>TikTok 于哪一年发布？</li></ol><div class='checkbox'><input type="radio" />            <p>A. 2014</p>            </div><div class='checkbox'><input type="radio" />            <p>B. 2015</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>C. 2016</p>            </div></div><div class="tab-pane" id="tab-id-7"><ol start="7"><li>截至 2020 年上半年，字节跳动公司估值约为？</li></ol><div class='checkbox'><input type="radio" />            <p>A. 100 亿美元</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>B. 1000 亿美元</p>            </div><div class='checkbox'><input type="radio" />            <p>C. 10000 亿美元</p>            </div></div><div class="tab-pane" id="tab-id-8"><ol start="8"><li>截至 2020 年 1 月，抖音日活跃用户？</li></ol><div class='checkbox'><input type="radio" />            <p>A. 1 亿</p>            </div><div class='checkbox'><input type="radio" />            <p>B. 2 亿</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>C. 4 亿</p>            </div></div></div></div><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05857.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05857.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>大家在认真学习</span><h3 id="观看视频"><a href="#观看视频" class="headerlink" title="观看视频"></a>观看视频</h3><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?bvid=BV1sK411n7Y9&high_quality=1&as_wide=1&danmaku=0"  scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div></div><div class="story post-story"><h2 id="小组展示"><a href="#小组展示" class="headerlink" title="小组展示"></a>小组展示</h2><p>接下来分别是<strong>TikTok 事件背景组和 TikTok 事件机理分析组</strong>的展示，由殷欣茹和覃忠甜作代表向大家分享自己小组的思考。</p><h3 id="TikTok-事件背景组"><a href="#TikTok-事件背景组" class="headerlink" title="TikTok 事件背景组"></a>TikTok 事件背景组</h3><p>殷欣茹同学从<strong>美国政府与中国政府、字节跳动公司、美国公司</strong>四个方面对整个事件进行了梳理。</p><p>殷欣茹同学首先介绍了 TikTok 事件的时间线。</p><h4 id="TikTok-时间线"><a href="#TikTok-时间线" class="headerlink" title="TikTok 时间线"></a>TikTok 时间线</h4><div class="timeline"><div class="timenode"><div class="meta"><p><p>2020 年 7 月 7 日</p></p></div><div class="body"><p>美国国务卿蓬佩奥透露美国正在考虑禁止中国社交软件的使用，其中包括 TikTok。</p></div></div><div class="timenode"><div class="meta"><p><p>7 月 8 日</p></p></div><div class="body"><p>美国联邦贸易委员会和司法部对 TikTok 进行调查，调查内容是“违反保护儿童隐私协议”。</p></div></div><div class="timenode"><div class="meta"><p><p>7 月 22 日</p></p></div><div class="body"><p>美国众议院与参议院国土安全和政府事务委员会一致通过了”禁止在联邦政府设备上使用 TikTok”的法案。</p></div></div><div class="timenode"><div class="meta"><p><p>8 月 1 日</p></p></div><div class="body"><p>特朗普宣布计划动用行政命令禁止 TikTok 在美运营，并反对微软收购。</p></div></div><div class="timenode"><div class="meta"><p><p>8 月 8 日</p></p></div><div class="body"><p>美国中央情报局：没有证据显示中国政府获取 TikTok 用户数据。</p></div></div><div class="timenode"><div class="meta"><p><p>8 月 23 日</p></p></div><div class="body"><p>字节跳动表态：正式对美国总统特朗普 8 月 6 日颁布的第一道行政令提起诉讼。</p></div></div><div class="timenode"><div class="meta"><p><p>8 月 28 日</p></p></div><div class="body"><p>中国商务部、科技部调整发布《中国禁止出口限制出口技术目录》。</p></div></div><div class="timenode"><div class="meta"><p><p>7 月 22 日</p></p></div><div class="body"><p>9 月 20 日，特朗普批准 TikTok 与甲骨文交易，美国将禁止下载 TikTok 禁令推迟至 9 月 27 日</p></div></div><div class="timenode"><div class="meta"><p><p>9 月 21 日</p></p></div><div class="body"><p>TikTok 保留在美业务、微信避免被禁，外交部回应，沃尔玛宣布购买 TikTok 全球 7.5%股份。</p></div></div><div class="timenode"><div class="meta"><p><p>9 月 28 日</p></p></div><div class="body"><p>美国联邦法官裁定暂缓实施特朗普 TikTok“下架令”。</p></div></div><div class="timenode"><div class="meta"><p><p>11 月 2 日</p></p></div><div class="body"><p>美国地方法院阻止美国商务部 TikTok 禁令。</p></div></div><div class="timenode"><div class="meta"><p><p>11 月 12 日</p></p></div><div class="body"><p>美国商务部决定暂不执行 TikTok 禁令。</p></div></div></div><br/><p>此后殷欣茹同学详细介绍了<strong>字节跳动起诉美国政府、及其在市场和舆论上遇到的双重压力</strong>。</p><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05860.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05860.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>殷欣茹同学在展示</span><h3 id="TikTok-事件机理分析组"><a href="#TikTok-事件机理分析组" class="headerlink" title="TikTok 事件机理分析组"></a>TikTok 事件机理分析组</h3><p>覃忠甜同学从<strong>机理分析角度</strong>详细解释了 TikTok 收购门中的各方博弈。</p><p>覃忠甜小组认为，影响 TikTok 收购的主要有以下几点：</p><ol><li>美国大选<ul><li>特朗普自身的政治需求</li></ul></li><li>政治环境<ul><li>对维护世界霸权的焦虑</li><li>美国国内舆论环境因素</li></ul></li><li>国家安全与霸权主义</li><li>中国政府</li></ol><p>覃忠甜小组也提出相应的教训和启示：</p><ol><li>加强机关立法</li><li>坚守底线、积极合作</li><li>当今世界的逆全球化趋势<ul><li>TikTok 收购事件，实际上反映出以欧美霸权为主导的国际体系陷入衰退与动荡</li><li>在这样的背景下，世界亟须一个有能力、负责任的大国带头建立新的、合作共赢的全球经济体系。</li></ul></li></ol><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05872.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05872.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>覃忠甜同学在展示</span><br/><p>学生展示后，杨赞老师表示，自己对 TikTok 知之甚少，目前中国企业遇到了美国的打压，在中国崛起之路上是<strong>必然</strong>。我们应当正视这种现象，努力突破科技壁垒，为中国崛起贡献自己的力量！</p><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05847.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05847.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>杨赞老师发言</span></div><div class="story post-story"><h2 id="角色扮演"><a href="#角色扮演" class="headerlink" title="角色扮演"></a>角色扮演</h2><p>随后，支部同学进行了角色扮演，分为三组，身份分别为<strong>“字节跳动公司”，“中国政府”和“美国政府与资本”</strong>。大家踊跃发言，气氛热烈。</p><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05893.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05893.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>蒋依润同学发言</span><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05917.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05917.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>沈方垠同学发言</span><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05927.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05927.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>赵宇鹏同学发言</span></div><div class="story post-story"><h2 id="讨论与思考"><a href="#讨论与思考" class="headerlink" title="讨论与思考"></a>讨论与思考</h2><p>讨论与思考环节是团日的核心，本次团日我们思考了以下三个问题：</p><details cyan open><summary> 问题 </summary>              <div class='content'>              <ol><li>面对美国的极限施压，在中国政府未能及时干预的“空窗期”，中国企业应当怎么做？</li><li>中国政府在这类突发性施压中，如何迅速反击？</li><li>美国极限施压政策的成功，会对世界格局产生何影响？</li></ol>              </div>            </details><p>大家经过紧张热烈的讨论后，每组均表达了自己的观点。</p><details cyan open><summary> 赵宇鹏 </summary>              <div class='content'>              <p><em><strong>美国要制裁中国、封锁中国是必然的</strong></em>，一旦进入角逐，资本的发展受阻，导致资本增值减缓或者停止也将成为必然。这时候，作为资本增值的工具人——资本家，其首要考虑的当然是如何保证将来资本增值的空间以及不在封锁和制裁中过度受损。这时，选择向资本强权的一方妥协、退让就是再合理不过的事了，美其名曰：企业全球化。</p><p>跳动字节向美国屈服，微软强行收购 TikTok，其背后仿佛都有美国政府的影子，但在这个影子的身后，<em><strong>真正潜藏着的，是资本主义的阴魂。</strong></em></p>              </div>            </details><details cyan open><summary> 陈泳帆 </summary>              <div class='content'>              <p>我们再次回顾一下这整个收购事件，不禁会问到：为什么美国政府想要封禁 TikTok？这么做对他们来说有什么好处？美国资本对待收购 TikTok 的态度又是怎样的？当 TikTok 在海外面临多重压力的时候，我国政府作为字节跳动的祖国又应该抱着什么样的立场？</p><p>首先，我认为美国资本之所以想要介入的原因主要有以下几点：</p><ol><li>未能深入社交媒体市场的玩家想趁机介入 TikTok 资本。</li><li>看重 TikTok 背后的海量数据</li><li>利用政治形势和美国政府的支持</li><li>通过危机进行压价，谋取商业利益</li></ol><p>而美国政府打压 TikTok 背后的目的如下：</p><ol><li>为大选“铺路”</li><li>打压中国是对美国来说是利大于弊的“常规操作”</li><li>国家安全-霸权主义的幌子</li></ol><p>针对以上种种示例的施压和打击，字节跳动公司提出了一种让大家意想不到的“第三种方案”——<strong>既不屈从威逼胁迫贱卖</strong>，保住了企业核心技术，也回应了美国政府提出的所谓国家安全关切。这个方案在许多评论的眼中是一个“相对最优”的“多赢”方案。</p><p>首先，这个方案本身体现出了一个拥抱全球化的跨国公司的正确姿态——<strong>依法合规努力维护自身利益，并积极寻求多方共赢的解决办法</strong>。</p><p>其二，这次事件虽是发生在一个企业身上，但却对当下的世界有着重要启示。一场举世哗然的一国政府强权对企业的公然围猎，却能被转变成一个多赢的方案，也让人从中体悟到大国博弈在胜负之外还有第三种出路。</p><p>第三，TikTok 与中国政府拿出的第三种选择，在中美博弈日渐紧张、越来越多非此即彼、分拨站队的气氛下，对<strong>更多抱着“零和博弈”视角</strong>来看此次事件的人们，无疑也是一次认知的冲击。一些人习惯用“谁赢了”的简单化结论来看中美之间的一次次过招，殊不知，在今天的经济全球化程度下，各国在经济利益上已经没有截然的输赢对立，在各种国家间的冲撞中，只有遭受伤害的程度差别。只有深刻认知到当今世界经济全球化一荣俱荣、一损俱损的本质，才可能在出现极端环境时做出真正对维护全球化有利的选择。</p><p><strong>希望通过这样的方案，TikTok 能够走出困境，从这场战争中金蝉脱壳。</strong></p>              </div>            </details><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05934.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05934.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>何俊毅同学发言</span></div><div class="story post-story"><h2 id="活动总结"><a href="#活动总结" class="headerlink" title="活动总结"></a>活动总结</h2><p>本次团日的最后，林涛学长对此次活动作了简单的总结。林涛学长充分肯定了本次主题团日的筹备工作，并且肯定了本次主题团日的思想深度。林涛学长认为，TikTok 收购门折射出的是中国<strong>日渐加强的综合国力与话语权</strong>。欧美国家的已经颇感威胁。在这一关键的历史节点，<strong>我们需要进一步抓住机遇，迎接挑战</strong>，不断攻克“卡脖子”工程，将中国科技创新再上一个新台阶。</p><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05974.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05974.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>林涛学长总结</span></div><div class="story post-story"><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在此次团日活动中，土木 85 的同学通过对“TikTok 收购门”的深入讨论，深入理解了习近平总书记所说“<strong>抓创新就是抓发展，谋创新就是谋未来。</strong>”国家重大科技创新往往会带来巨大的生产力。土木 85 支部的同学也应将自身个人发展与国家前途命运相结合。</p><br/><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05988.JPG" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/DSC05988.JPG" srcset="/images/placeholder.svg" alt="image"/></div></div><span class='p center small'>合影</span></div><div class="story post-story"><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>[1] <a href="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/reading.pdf">主题团日阅读材料</a></p></div>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;2020 年 11 月 21 日，土木 85 班开展了以“TikTok 收购事件——从短兵相接到中美博弈”为主题的团日活动。本次活动由团支书顾燚同学主持，并邀请土木 85 班班主任杨赞老师与土木 18 党支部书记林涛学长参加活动。&lt;/p&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="大学" scheme="https://zypnb.top/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    <category term="团支部" scheme="https://zypnb.top/categories/%E5%A4%A7%E5%AD%A6/%E5%9B%A2%E6%94%AF%E9%83%A8/"/>
    
    
    <category term="主题团日" scheme="https://zypnb.top/tags/%E4%B8%BB%E9%A2%98%E5%9B%A2%E6%97%A5/"/>
    
    <category term="TikTok" scheme="https://zypnb.top/tags/TikTok/"/>
    
  </entry>
  
  <entry>
    <title>一道小题-#02 2020-07-25</title>
    <link href="https://zypnb.top/faq/high_school/02/"/>
    <id>https://zypnb.top/faq/high_school/02/</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2021-02-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一道比较有趣的三角问题</p><span id="more"></span><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>在$\Delta ABC$中，$a,b,c$分别为内角$A,B,C$对应的边，且满足$\displaystyle\frac{2}{a}+\frac{1}{b}&#x3D;1$，$\displaystyle cos(A-B)&#x3D;\frac{2sinAsinB}{sinC}$，求$\Delta ABC$周长的最小值.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="note warning"><p>本题有严重的拼合成绩，可看作是两道中档题组合而成</p></div><p>因此，本解析分为两大部分，第一部分为如何得到$\displaystyle C&#x3D;\frac{\pi}{2}$，第二部分为求周长最小值.</p><h4 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h4><div class="note warning"><p>本部分有解法超纲，不需深究</p></div><div class="tabs" id="tab-taba"><ul class="nav-tabs"><li class="tab active"><a class="#taba-1">法一 正常展开</a></li><li class="tab"><a class="#taba-2">法二 积化和差 1</a></li><li class="tab"><a class="#taba-3">法三 积化和差 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="taba-1"><p>由条件，有</p><p>$$<br>\begin{aligned}<br>\frac{2sinAsinB}{sinC} &amp;&#x3D; cos(A-B) \newline<br>2sinAsinB &amp;&#x3D; cos(A-B)sin(A+B) \newline<br>&amp;&#x3D; (cosAcosB + sinAsinB)(sinAcosB + cosAsinB) \newline<br>&amp;&#x3D; sinAcosAcos^2B + sinBcosBcos^2A +\newline<br>&amp;\quad \ sinBcosBsin^2A +sinAcosAsin^2B \newline<br>&amp;&#x3D; sinAcosA + sinBcosB<br>\end{aligned}<br>$$</p><p>两边同除$sinAsinB$，有</p><p>$$<br>\begin{aligned}<br>2&#x3D;\frac{cosA}{sinB}+\frac{cosB}{sinA}<br>\end{aligned}<br>$$</p><p>若$\displaystyle A+B&gt;\frac{\pi}{2}$，则$sinA&gt;cosB,\ sinB&gt;cosA$，即$\displaystyle\frac{cosA}{sinB}+\frac{cosB}{sinA}&lt;2$，显然不成立.</p><p>若$\displaystyle A+B&lt;\frac{\pi}{2}$，则$sinA&lt;cosB,\ sinB&lt;cosA$，即$\displaystyle\frac{cosA}{sinB}+\frac{cosB}{sinA}&gt;2$，显然不成立.</p><p>因此$\displaystyle A+B&#x3D;\frac{\pi}{2}$，即$\displaystyle C&#x3D;\frac{\pi}{2}$.</p></div><div class="tab-pane" id="taba-2"><p>由条件，有</p><p>$$<br>\begin{aligned}<br>\frac{2sinAsinB}{sinC} &amp;&#x3D; cos(A-B) \newline<br>2sinAsinB &amp;&#x3D; cos(A-B)sin(A+B) \newline<br>&amp;&#x3D; \frac{1}{2}(sin2A+sin2B) \newline<br>&amp;&#x3D; sinAcosA + sinBcosB<br>\end{aligned}<br>$$</p><p>两边同除$sinAsinB$，有</p><p>$$<br>\begin{aligned}<br>2&#x3D;\frac{cosA}{sinB}+\frac{cosB}{sinA}<br>\end{aligned}<br>$$</p><p>若$\displaystyle A+B&gt;\frac{\pi}{2}$，则$sinA&gt;cosB,\ sinB&gt;cosA$，即$\displaystyle\frac{cosA}{sinB}+\frac{cosB}{sinA}&lt;2$，显然不成立.</p><p>若$\displaystyle A+B&lt;\frac{\pi}{2}$，则$sinA&lt;cosB,\ sinB&lt;cosA$，即$\displaystyle\frac{cosA}{sinB}+\frac{cosB}{sinA}&gt;2$，显然不成立.</p><p>因此$\displaystyle A+B&#x3D;\frac{\pi}{2}$，即$\displaystyle C&#x3D;\frac{\pi}{2}$.</p></div><div class="tab-pane" id="taba-3"><p>$$<br>\begin{aligned}<br>\frac{2sinAsinB}{sinC} &amp;&#x3D; cos(A-B) \newline<br>2sinAsinB &amp;&#x3D; cos(A-B)sin(A+B) \newline<br>cos(A-B) - cos(A+B) &amp;&#x3D; cos(A-B)sin(A+B) \newline<br>cos(A-B)(1-sin(A+B)) &amp;&#x3D;cos(A+B) \newline<br>cos(A-B)&#x3D;\frac{cos(A+B)}{1-sin(A+B)}&amp;\quad 或\quad A+B&#x3D;\frac{\pi}{2}<br>\end{aligned}<br>$$</p><p>令$\displaystyle tan\left(\frac{A+B}{2}\right) &#x3D; t \in(0, +\infty)$，因此利用万能公式，原式可以变形为</p><p>$$<br>\begin{aligned}<br>\frac{cos(A+B)}{1-sin(A+B)} &amp;&#x3D; \frac{\frac{1-t^2}{1+t^2}}{1-\frac{2t}{1+t^2}} \newline<br>&amp;&#x3D;\frac{1-t^2}{(t+1)^2} \newline<br>&amp;&#x3D;\frac{1-t}{1+t}\newline<br>&amp;&#x3D;\frac{2}{1+t} -1 \in(-\infty,-1)\cup (1,+\infty)<br>\end{aligned}<br>$$</p><p>而$cos(A-B)\in(-1,1\ ]$，故该情况方程无解，即$\displaystyle A+B&#x3D;\frac{\pi}{2}$，即$\displaystyle C&#x3D;\frac{\pi}{2}$.</p></div></div></div><h4 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h4><div class="note warning"><p>本部分有解法超纲，不需深究</p></div><div class="tabs" id="tab-tabb"><ul class="nav-tabs"><li class="tab active"><a class="#tabb-1">法一 三角代换</a></li><li class="tab"><a class="#tabb-2">法二 柯西不等式</a></li><li class="tab"><a class="#tabb-3">法三 数形结合</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tabb-1"><p>请先自己思考哦~</p></div><div class="tab-pane" id="tabb-2"><p>请先自己思考哦~</p></div><div class="tab-pane" id="tabb-3"><p>请先自己思考哦~</p></div></div></div><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><div class="note done"><p>本题答案为$10$</p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道比较有趣的三角问题&lt;/p&gt;</summary>
    
    
    
    <category term="小题" scheme="https://zypnb.top/categories/%E5%B0%8F%E9%A2%98/"/>
    
    <category term="高中" scheme="https://zypnb.top/categories/%E5%B0%8F%E9%A2%98/%E9%AB%98%E4%B8%AD/"/>
    
    
    <category term="三角" scheme="https://zypnb.top/tags/%E4%B8%89%E8%A7%92/"/>
    
    <category term="柯西不等式" scheme="https://zypnb.top/tags/%E6%9F%AF%E8%A5%BF%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
    
    <category term="积化和差" scheme="https://zypnb.top/tags/%E7%A7%AF%E5%8C%96%E5%92%8C%E5%B7%AE/"/>
    
    <category term="基本不等式" scheme="https://zypnb.top/tags/%E5%9F%BA%E6%9C%AC%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一道小题-#01 2020-07-24</title>
    <link href="https://zypnb.top/faq/high_school/01/"/>
    <id>https://zypnb.top/faq/high_school/01/</id>
    <published>2020-07-23T16:00:00.000Z</published>
    <updated>2022-08-23T00:54:33.187Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一道可能不太简单的解三角形题</p><span id="more"></span><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>已知$a,b,c$分别为$\Delta ABC$的内角$A,B,C$对应的边，$BC$边上的高为$\displaystyle \frac{a}{2}$，求$\displaystyle \frac{c}{b}$最大值.</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><div class="note warning"><p>本题有多种解法，部分解法较难想到</p></div><div class="tabs" id="tab-taba"><ul class="nav-tabs"><li class="tab active"><a class="#taba-1">法一 余弦定理</a></li><li class="tab"><a class="#taba-2">法二 数形结合</a></li><li class="tab"><a class="#taba-3">法三 阿氏圆</a></li></ul><div class="tab-content"><div class="tab-pane active" id="taba-1"><p>在$\Delta ABC$中，由余弦定理，有</p><p>$$<br>\begin{equation}\label{equationa}<br>\begin{aligned}<br>b^2+c^2&amp;&#x3D;a^2+2bc\ cosA \newline<br>\Rightarrow 1+\left(\frac{c}{b}\right)^2&amp;&#x3D;\left(\frac{a}{b}\right)^2 + 2\frac{c}{b}cosA<br>\end{aligned}<br>\end{equation}<br>$$</p><p>又有</p><p>$$<br>\begin{equation}\label{equationb}<br>\begin{aligned}<br>S_{\Delta ABC} &#x3D; \frac{1}{2}bc\ sinA&amp;&#x3D;\frac{1}{2}a\cdot\frac{a}{2} \newline<br>\Rightarrow \left(\frac{a}{b}\right)^2&amp;&#x3D;2\frac{c}{b}sinA<br>\end{aligned}<br>\end{equation}<br>$$</p><p>由公式$(\ref{equationa})$、$(\ref{equationb})$，得</p><p>$$<br>\begin{equation}<br>\begin{aligned}<br>1+\left(\frac{c}{b}\right)^2&amp;&#x3D;2\frac{c}{b}sinA + 2\frac{c}{b}cosA<br>\end{aligned}<br>\end{equation}<br>$$</p><p>令$\displaystyle \frac{c}{b} &#x3D; t$，得</p><p>$$<br>\begin{equation}<br>\begin{aligned}<br>1+t^2&amp;&#x3D;2t(sinA+cosA)&#x3D;2\sqrt{2}tsin\left(A+\frac{\pi}{4}\right) \newline<br>\Rightarrow t+\frac{1}{t}&amp;&#x3D;2\sqrt{2}sin\left(A+\frac{\pi}{4}\right)\in [\ 2,2\sqrt{2}\ ] \newline<br>\Rightarrow t_{max} &amp;&#x3D; \sqrt{2} + 1<br>\end{aligned}<br>\end{equation}<br>$$</p><p>故$\displaystyle \frac{c}{b}$最大值为$\sqrt{2} + 1$.</p></div><div class="tab-pane" id="taba-2"><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200724093152834.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200724093152834.png" srcset="/images/placeholder.svg" alt="image"/></div></div><p>如图，利用勾股定理有</p><p>$$<br>\begin{aligned}<br>AB&amp;&#x3D;\sqrt{\left(\frac{a}{2}+x\right)^2+\left(\frac{a}{2}\right)^2} \newline<br>AC&amp;&#x3D;\sqrt{\left(\frac{a}{2}-x\right)^2+\left(\frac{a}{2}\right)^2} \newline<br>\Rightarrow\quad \frac{c}{b}&amp;&#x3D;\frac{\sqrt{\left(\frac{a}{2}+x\right)^2+\left(\frac{a}{2}\right)^2}}{\sqrt{\left(\frac{a}{2}-x\right)^2+\left(\frac{a}{2}\right)^2}} \newline<br>&amp;&#x3D;\sqrt{\frac{\frac{a^2}{2}+ax+x^2}{\frac{a^2}{2}-ax+x^2}} \newline<br>&amp;&#x3D;\sqrt{1+\frac{2ax}{\frac{a^2}{2}-ax+x^2}} \newline<br>&amp;&#x3D;\sqrt{1+\frac{2}{\frac{a}{2x}+\frac{x}{a}-1}}\newline<br>&amp;\leq\sqrt{1+\frac{2}{2\sqrt{\frac{a}{2x}\cdot\frac{x}{a}}-1}}\newline<br>&amp;&#x3D;\sqrt{1+\frac{2}{\sqrt{2}-1}}\newline<br>&amp;&#x3D;\sqrt{2}+1<br>\end{aligned}<br>$$</p><p>当且仅当$\displaystyle\frac{a}{2x}&#x3D;\frac{x}{a}$时取得最大值，即</p><p>当$\displaystyle x&#x3D;\frac{\sqrt{2}a}{2}$时，$\displaystyle \frac{c}{b}$最大，为$\sqrt{2} + 1$.</p></div><div class="tab-pane" id="taba-3"><p>根据阿氏圆，及数形结合方法，可知，阿氏圆半径需不小于$\displaystyle \frac{a}{2}$，由半径公式，即</p><p>$$<br>\begin{aligned}<br>\left|\frac{\mu}{\mu^2-1}\right|\cdot a &amp;\geq \frac{a}{2} \ , \quad \mu &gt; 0 \newline<br>\mu_{max} &amp;&#x3D;\sqrt{2}+1<br>\end{aligned}<br>$$</p><p>又由于$\displaystyle \frac{c}{b}&#x3D;\mu$，故</p><p>$\displaystyle \frac{c}{b}$最大值为$\sqrt{2} + 1$.</p></div></div></div><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><div class="note done"><p>本题答案为$\sqrt{2} + 1$</p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道可能不太简单的解三角形题&lt;/p&gt;</summary>
    
    
    
    <category term="小题" scheme="https://zypnb.top/categories/%E5%B0%8F%E9%A2%98/"/>
    
    <category term="高中" scheme="https://zypnb.top/categories/%E5%B0%8F%E9%A2%98/%E9%AB%98%E4%B8%AD/"/>
    
    
    <category term="三角" scheme="https://zypnb.top/tags/%E4%B8%89%E8%A7%92/"/>
    
    <category term="基本不等式" scheme="https://zypnb.top/tags/%E5%9F%BA%E6%9C%AC%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>测量误差</title>
    <link href="https://zypnb.top/learn/survey/delta/"/>
    <id>https://zypnb.top/learn/survey/delta/</id>
    <published>2020-05-22T06:43:57.000Z</published>
    <updated>2022-08-23T00:54:33.202Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="误差来源"><a href="#误差来源" class="headerlink" title="误差来源"></a>误差来源</h3><ul><li>测量中的被观测量，客观上都存在着一个真实值， 简称<strong>真值</strong>。对该量进行观测得到<strong>观测值</strong>。</li><li>观测值与真值之差，称为<strong>真误差</strong>。  </li><li>仪器原因</li><li>观测人员的原因</li><li>外界环境影响</li><li>观测者、测量仪器和外界条件称为观测条件。</li></ul></div><div class="story post-story"><h2 id="偶然误差特性"><a href="#偶然误差特性" class="headerlink" title="偶然误差特性"></a>偶然误差特性</h2><ol><li>有界性：</li></ol><ul><li>在一定的条件下，偶然误差的绝对值不会超过一定的限度；</li></ul><ol start="2"><li>离散性：</li></ol><ul><li>绝对值小的误差比绝对值大的误差出现的机会多；</li></ul><ol start="3"><li>对称性：</li></ol><ul><li>绝对值相等的正负误差出现的机会相等；</li></ul><ol start="4"><li>抵偿性：</li></ol><span id="more"></span><ul><li>偶然误差的算术平均值趋近于零，即</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522133636389.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522133636389.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="衡量精度的标准"><a href="#衡量精度的标准" class="headerlink" title="衡量精度的标准"></a>衡量精度的标准</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522133922883.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522133922883.png" srcset="/images/placeholder.svg" alt="image"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522133930670.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522133930670.png" srcset="/images/placeholder.svg" alt="image"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522133955662.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522133955662.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>注意本题给出了真值</li></ul></div><div class="story post-story"><h2 id="误差传播定律"><a href="#误差传播定律" class="headerlink" title="误差传播定律"></a>误差传播定律</h2><ul><li>倍乘——乘法</li></ul></div><div class="story post-story"><h2 id="等精度观测值数据处理"><a href="#等精度观测值数据处理" class="headerlink" title="等精度观测值数据处理"></a>等精度观测值数据处理</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/FiCAwuULi98u-eHj0XqFxdpxAJEl.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/FiCAwuULi98u-eHj0XqFxdpxAJEl.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="不同精度观测值的数据处理"><a href="#不同精度观测值的数据处理" class="headerlink" title="不同精度观测值的数据处理"></a>不同精度观测值的数据处理</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Fn4-3x-Iu7gxSNBX-C9magH6i3RH.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/Fn4-3x-Iu7gxSNBX-C9magH6i3RH.png" srcset="/images/placeholder.svg" alt="image"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/FlczcYAy_0xGmCPhiIsb1XKzpK51.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/FlczcYAy_0xGmCPhiIsb1XKzpK51.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="点位误差的概念"><a href="#点位误差的概念" class="headerlink" title="点位误差的概念"></a>点位误差的概念</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522143756577.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200522143756577.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h2></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;误差来源&quot;&gt;&lt;a href=&quot;#误差来源&quot; class=&quot;headerlink&quot; title=&quot;误差来源&quot;&gt;&lt;/a&gt;误差来源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;测量中的被观测量，客观上都存在着一个真实值， 简称&lt;strong&gt;真值&lt;/strong&gt;。对该量进行观测得到&lt;strong&gt;观测值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;观测值与真值之差，称为&lt;strong&gt;真误差&lt;/strong&gt;。  &lt;/li&gt;
&lt;li&gt;仪器原因&lt;/li&gt;
&lt;li&gt;观测人员的原因&lt;/li&gt;
&lt;li&gt;外界环境影响&lt;/li&gt;
&lt;li&gt;观测者、测量仪器和外界条件称为观测条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;偶然误差特性&quot;&gt;&lt;a href=&quot;#偶然误差特性&quot; class=&quot;headerlink&quot; title=&quot;偶然误差特性&quot;&gt;&lt;/a&gt;偶然误差特性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;有界性：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在一定的条件下，偶然误差的绝对值不会超过一定的限度；&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;离散性：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;绝对值小的误差比绝对值大的误差出现的机会多；&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;对称性：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;绝对值相等的正负误差出现的机会相等；&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;抵偿性：&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="测量学" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E9%87%8F%E5%AD%A6/"/>
    
    
    <category term="误差" scheme="https://zypnb.top/tags/%E8%AF%AF%E5%B7%AE/"/>
    
  </entry>
  
  <entry>
    <title>不同的坐标表示及转换</title>
    <link href="https://zypnb.top/learn/survey/axis/"/>
    <id>https://zypnb.top/learn/survey/axis/</id>
    <published>2020-05-22T05:32:02.000Z</published>
    <updated>2022-08-23T00:54:33.201Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="不同的坐标表示及转换"><a href="#不同的坐标表示及转换" class="headerlink" title="不同的坐标表示及转换"></a>不同的坐标表示及转换</h2><ul><li>此处的大地坐标系与上文不同，上文所指与天文坐标系相对（一簇）</li><li>大地地理坐标又称大地坐标，表示地面点在参考椭球面上的位置</li><li>基准是参考椭球面和法线，用大地经度 L 和大地纬度 B 表示</li><li>P 点大地经度 L：过 P 点的大地子午面和首子午面所夹的两面角</li><li>P 点大地纬度 B：过 P 点的法线与赤道面的夹角</li><li>P 点大地高 H ：P 点沿法线到参考椭球面的距离（注意与海拔的区别）</li></ul><p><strong>空间直角坐标系</strong>：</p><ul><li>坐标原点 O：地球椭球体中心（与质心重合）</li><li>Z 轴方向： 指向地球北极</li><li>X 轴方向： 指向格林尼治子午面与地球赤道面之交点</li><li>Y 轴方向： 垂直于 XOZ 平面，构成右手坐标系。</li></ul><p><strong>空间直角坐标与大地坐标间的转换</strong>：</p><p>卯酉圈：纬圈，N 为卯酉圈的偏心率</p><p>左右都有 B，需要迭代求解——达到一定精度停止</p><span id="more"></span><p><strong>平面直角坐标系</strong>：</p><ul><li><p>大地坐标计算复杂，小范围内使用不够方便——所以局部地区测量最好用平面直角坐标系。</p></li><li><p>我国采用的高斯-克吕格正形投影(简称<strong>高斯投影</strong>)</p></li><li><p>变形</p></li><li><p>（B，L）——&gt;（x，y）</p></li><li><p>即$x&#x3D;f_x(B. L)$，$y&#x3D;f_y(B, L)$</p></li><li><p>需要设定一定的边界条件——中央子午线不变、保角？</p></li><li><p>高斯投影属于保角投影——地球上方位与地图上方位保持不变，球面上的角度投影到横椭圆柱面上后保持不变，而距离将变长</p></li><li><p>分带投影——带宽问题——变形与误差——分带越多——效率越低</p></li><li><p>最好分为 6°带</p></li><li><p>因此带号 N 与中央子午线经度$L_0$的关系：$L_0&#x3D;6N-3$，$N&#x3D;INT(L&#x2F;6)+1$</p></li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200225155220322.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200225155220322.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li><p><em>x</em>轴与<em>y</em>轴互换了位置</p><p>象限按顺时针方向编号，以保证各类三角函数计算可直接在高斯平面直角坐标系中进行</p></li><li><p>把中央子午线移动 500km</p></li><li><p>为确定投影带的位置，还在<em>y</em>坐标前冠以带号</p></li><li><p>例：xm&#x3D;1346216.985m    ym&#x3D;19634527.165m  19 为带号数</p></li><li><p>真实坐标(1346216.985, 134527.165)</p></li><li><p>如果选用 3°带</p></li><li><p>三度带奇数中央子午线与六度带重合</p></li><li><p>因此带号 N 与中央子午线经度$L_0$的关系：$L_0&#x3D;3N$，$N&#x3D;INT((L-1.5)&#x2F;3)+1$</p></li><li><p>我国大陆所处的经度范围是东经 73°27′~东经 135°09′</p></li><li><p>统一 6°带投影与统一 3°带投影的带号范围分别为 13~23，25~45</p></li><li><p>两种投影带的带号不重复，根据<em>y</em>坐标前的带号可以判断属于何种投影带</p></li></ul><p><strong>独立坐标系</strong>：</p><ul><li>原点、坐标轴、坐标轴的尺度</li><li>为什么？——国家安全、减小投影变形、使用方便</li><li>保密作用——把中央子午线定在城市中心位置——形成独立坐标系——抬高投影面——平均海拔较高——地球、参考椭球——计算出的长度基本一致等等</li><li>例如长江大桥建桥——桥轴线为 x 轴</li><li>地面点的高程系统<ul><li>绝对高程：地面点沿铅垂线到大地水准面的距离，也称<strong>海拔</strong>，简称<strong>高程</strong></li><li>相对高程：地面上一点到假定水准面的铅垂距离（H′）</li><li>高  差：地面上两点间的高程之差（h）</li><li>在海边设立验潮站(tide gauge station)，进行长期观测，求得海水面的平均高度作为高程零点，以通过该点的大地水准面为高程基准面(height datum)。建在海边——测量海面高度的站——验潮站——测量水准点与</li><li>大地水准面上的高程恒为<strong>零</strong></li><li>我国有两个国家高程系统：(1)1956 年黄海高程系（2）“1985 国家高程基准”</li></ul></li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200225162542962.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200225162542962.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="确定地面点的坐标"><a href="#确定地面点的坐标" class="headerlink" title="确定地面点的坐标"></a>确定地面点的坐标</h2><h3 id="地面点的坐标表示"><a href="#地面点的坐标表示" class="headerlink" title="地面点的坐标表示"></a>地面点的坐标表示</h3><ul><li><p>坐标系：54 坐标系&#x2F;80 坐标系&#x2F;CGCS2000&#x2F;WGS84</p></li><li><p>可以直接采用三维坐标表示（空间直角坐标、大地坐标）</p><ul><li>空间直角坐标（XYZ，简单但不直观）</li><li>大地坐标（BLH，直观但不方便，大地高不能在工程中直接应用）</li><li>是采用空间定位技术（如卫星定位）时最常用的点的表示方法</li></ul></li><li><p>平面和高程分别表示（2+1 维）</p><ul><li>平面坐标：xy 高斯投影或独立坐标</li><li>高程：h 海拔高程</li><li>简单、直观，方便工程应用</li><li>缺点：平面与高程分离，不是真三维坐标，不利于空间定位技术（如卫星定位）的发展</li><li>是我国目前最常用的地面点的表示方法</li></ul></li><li><p>确定地面某点的平面坐标</p><ul><li>首先需要确定坐标系，常采用平面直角坐标<ul><li>国家坐标系（高斯平面直角坐标）</li><li>独立坐标系（通常以西南角为原点，X 指北，Y 指东）</li></ul></li><li>需要足够的起算数据（没有时可假定）</li><li>需要采用一定的测量方法</li><li>需要有足够的观测量</li></ul></li><li><p>确定地面某点高程</p></li><li><p><strong>常规测量的基本工作</strong></p><ul><li>测距离 D </li><li>测角度β</li><li>测高差 h</li></ul></li></ul><h3 id="确定地面点坐标的基本概念"><a href="#确定地面点坐标的基本概念" class="headerlink" title="确定地面点坐标的基本概念"></a>确定地面点坐标的基本概念</h3><ol><li>地球表面的形状</li></ol><ul><li>地貌：地球表面高低起伏的形态，例如：高山、峡谷等</li><li>地物：地面上人造或天然固定物体，例如：建筑、桥梁、道路等</li></ul><ol start="2"><li>测量的主要任务是测定和测设，变形监测</li></ol><ul><li><p>测定——将地物和地貌按一定的比例尺缩小绘制成地形图</p></li><li><p>测设——将设计图纸上的点放到实地上</p></li><li><p>变形监测——需要看各类物的变形</p></li></ul><ol start="3"><li>碎部测量与控制测量</li></ol><ul><li>地物、地貌的特征点又称碎部点，测量碎部点坐标的方法与过程称为碎部测量</li><li>例如测量房子就叫碎步测量</li><li>在测量碎部点坐标之前需要布设一些已知点，测量上将这些已知点称为控制点，测量与计算控制点坐标的方法与过程称为控制测量</li></ul><h4 id="方位角"><a href="#方位角" class="headerlink" title="方位角"></a>方位角</h4><ul><li>由直线一端–标准方向的北端起，顺时针量至某一直线的水平夹角，称为该直线的方位角，其取值范围是 0°~360°</li><li>标准方向：<ul><li>真北方向:过真子午线上任一点所作的切线方向。采用天文测量的方法测定，如观测太阳、北极星等，也可用陀螺经纬仪测定。在北半球，不同点处的真北方向收敛于地球的北极。（方位角称为真方位角用$A$表示）</li><li>磁北方向:过磁子午线上任一点所作的切线方向。可用指南针测定。磁针自由静止时，其北端所指方向即为磁北方向。在北半球，不同点处的磁北方向收敛地球的磁北极（称为磁方位角用$A_m$表示）</li><li>坐标北方向:坐标纵轴（x 轴）正向所示方向，称为坐标北方向。在同一坐标系中，各点处的坐标北方向是相互平行的。</li></ul></li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200225165759400.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200225165759400.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>坐标北方位角——本学期主要</li></ul><p><strong>方位角的计算：</strong></p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228133311199.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228133311199.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>注意值域的映射——方位角的关系</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228133518264.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228133518264.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li><p>由于地面两点真(磁)子午线<strong>不平行</strong>，存在<strong>子午线收敛角</strong>和<strong>磁偏角</strong>，则真(磁)方位角的正、反方位角不是差 180°只有<strong>坐标方位角</strong>才满足上式关系。</p></li><li><p>坐标方位角的确定：通过已知坐标反算；通过与已知边的连测推算</p></li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134104512.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134104512.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>非常<emp>重要</emp></li><li>坐标正算</li><li>已知：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134432668.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134432668.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>求：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134454165.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134454165.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>坐标反算</li><li>已知：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134529247.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134529247.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>求：</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134542789.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228134542789.png" srcset="/images/placeholder.svg" alt="image"/></div></div><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>极坐标法，已知两点坐标，求另一点坐标</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/FjEjRLL_mmsHOCPldTeNjRh0N6Kp.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/FjEjRLL_mmsHOCPldTeNjRh0N6Kp.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>前方交会</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228135443270.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228135443270.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>后方交会</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228140133960.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228140133960.png" srcset="/images/placeholder.svg" alt="image"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228140141283.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228140141283.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>注意：前方交会顺序必须是顺时针！逆时针需要将角度反号</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228135944690.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200228135944690.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li><p>后方交会要注意危险圆！</p></li><li><p>后方交会有其现实意义</p></li><li><p>距离交汇</p></li><li><p>按交汇的图形来分：</p><ul><li>前方交会</li><li>测方交会</li><li>后方交会</li></ul></li><li><p>按观测值类型分：</p><ul><li>测角交会</li><li>侧边交会</li><li>边角交会</li></ul></li></ul><h4 id="卫星定位方法"><a href="#卫星定位方法" class="headerlink" title="卫星定位方法"></a>卫星定位方法</h4><ul><li>控制点放到卫星上，测距离——定位置</li><li>利用卫星信号接受机，同时接受多颗定位卫星发射的信号进行定位，称为卫星定位。</li><li>每颗卫星播发独立的无线电信号进行距离测量: 距离 &#x3D; 光速 x 时间</li><li>为了精确测定时间，卫星上常使用高精度原子钟，GPS 接收机内置较廉价的钟，其计时精度比原子钟的精度低得多，设想一下接收机上钟的误差对距离测定的影响：1&#x2F;1,000,000 秒的测时误差将引起 300m 的距离误差</li><li>因此一般需要同时观测 4 颗以上的卫星，求解 3 个坐标参数及 1 个接收机钟差参数</li></ul><h3 id="测量工作的原则"><a href="#测量工作的原则" class="headerlink" title="测量工作的原则"></a>测量工作的原则</h3><ul><li>从整体到局部，先控制后碎部，从高精度到低精度（控制点），逐级加密，层层检核。</li><li>减小误差积累，保证测图精度</li><li>可以分幅测绘，加快测图进度</li><li>防止错漏发生，保证成果正确</li></ul><h3 id="什么是小地区？"><a href="#什么是小地区？" class="headerlink" title="什么是小地区？"></a>什么是小地区？</h3><ul><li>地球曲率对测量工作的影响<ul><li>当测区范围较小时，可以将大地水准面近似当作水平平面看待</li><li>看作水平面是，需要考虑水平距离和高程影响</li></ul></li><li>结论：在半径为 10km 的园内距离，可用切平面代替大地水准面</li><li>对水平角的影响<ul><li>从球面三角可知，球面上三角形内角之和比平面上相应三角形内角之和多出球面角超 ，其值可用多边形面积求得。</li><li>当测区范围在 100km2 时，用平面代替水准面时，对角度影响仅为 0.51″，在普通测量工作中可以忽略不计</li></ul></li><li>对高差影响<ul><li>在高程测量中,即使距离很短也应考虑地球曲率的影响.</li></ul></li><li>参考椭球面是测量计算的基准面</li></ul></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;不同的坐标表示及转换&quot;&gt;&lt;a href=&quot;#不同的坐标表示及转换&quot; class=&quot;headerlink&quot; title=&quot;不同的坐标表示及转换&quot;&gt;&lt;/a&gt;不同的坐标表示及转换&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;此处的大地坐标系与上文不同，上文所指与天文坐标系相对（一簇）&lt;/li&gt;
&lt;li&gt;大地地理坐标又称大地坐标，表示地面点在参考椭球面上的位置&lt;/li&gt;
&lt;li&gt;基准是参考椭球面和法线，用大地经度 L 和大地纬度 B 表示&lt;/li&gt;
&lt;li&gt;P 点大地经度 L：过 P 点的大地子午面和首子午面所夹的两面角&lt;/li&gt;
&lt;li&gt;P 点大地纬度 B：过 P 点的法线与赤道面的夹角&lt;/li&gt;
&lt;li&gt;P 点大地高 H ：P 点沿法线到参考椭球面的距离（注意与海拔的区别）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;空间直角坐标系&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;坐标原点 O：地球椭球体中心（与质心重合）&lt;/li&gt;
&lt;li&gt;Z 轴方向： 指向地球北极&lt;/li&gt;
&lt;li&gt;X 轴方向： 指向格林尼治子午面与地球赤道面之交点&lt;/li&gt;
&lt;li&gt;Y 轴方向： 垂直于 XOZ 平面，构成右手坐标系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;空间直角坐标与大地坐标间的转换&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;卯酉圈：纬圈，N 为卯酉圈的偏心率&lt;/p&gt;
&lt;p&gt;左右都有 B，需要迭代求解——达到一定精度停止&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="测量学" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E9%87%8F%E5%AD%A6/"/>
    
    
    <category term="坐标换算" scheme="https://zypnb.top/tags/%E5%9D%90%E6%A0%87%E6%8D%A2%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>能量方法</title>
    <link href="https://zypnb.top/learn/mechanics_materials/energy/"/>
    <id>https://zypnb.top/learn/mechanics_materials/energy/</id>
    <published>2020-05-19T06:14:44.000Z</published>
    <updated>2022-08-23T00:54:33.198Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>功与余功</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513001416286.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513001416286.png" srcset="/images/placeholder.svg" alt="image"/></div></div><span id="more"></span><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513001839311.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513001839311.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>上述就是功的互等定理</li><li>应变能与应变余能</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513002027079.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513002027079.png" srcset="/images/placeholder.svg" alt="image"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513002259739.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513002259739.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="功与位移的互等定理"><a href="#功与位移的互等定理" class="headerlink" title="功与位移的互等定理"></a>功与位移的互等定理</h2><ul><li>功的互等定理</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200519135724931.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200519135724931.png" srcset="/images/placeholder.svg" alt="image"/></div></div><p><u><strong>例题 1</strong></u>：捏土豆问题</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200519135933763.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200519135933763.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>非常有意思的一个案例</li></ul></div><div class="story post-story"><h2 id="虚位移原理"><a href="#虚位移原理" class="headerlink" title="虚位移原理"></a>虚位移原理</h2><p>对刚体平衡力系，当给刚体一微小的虚位移时，仍然保持平衡，则该力系中所有的力(包括力偶)在各自的虚位移上所做之总功为零。<br>应用于刚体，可确定未知的约束力 (平衡)；类似地可以有对于变形体的虚位移原理，用于确定其变形或者位移。</p></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;功与余功&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; src=&quot;https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200513001416286.png&quot; alt=&quot;image&quot;/&gt;&lt;/div&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="材料力学" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/"/>
    
    
    <category term="能量" scheme="https://zypnb.top/tags/%E8%83%BD%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>稳定性问题</title>
    <link href="https://zypnb.top/learn/mechanics_materials/stability/"/>
    <id>https://zypnb.top/learn/mechanics_materials/stability/</id>
    <published>2020-05-12T07:51:38.000Z</published>
    <updated>2022-08-23T00:54:33.199Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="压杆的稳定性问题"><a href="#压杆的稳定性问题" class="headerlink" title="压杆的稳定性问题"></a>压杆的稳定性问题</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200512151535548.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200512151535548.png" srcset="/images/placeholder.svg" alt="image"/></div></div><span id="more"></span></div><div class="story post-story"><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200512151635208.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200512151635208.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="两端铰支压杆的临界载荷"><a href="#两端铰支压杆的临界载荷" class="headerlink" title="两端铰支压杆的临界载荷"></a>两端铰支压杆的临界载荷</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200512152054358.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200512152054358.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="支承对压杆临界载荷的影响"><a href="#支承对压杆临界载荷的影响" class="headerlink" title="支承对压杆临界载荷的影响"></a>支承对压杆临界载荷的影响</h2></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;压杆的稳定性问题&quot;&gt;&lt;a href=&quot;#压杆的稳定性问题&quot; class=&quot;headerlink&quot; title=&quot;压杆的稳定性问题&quot;&gt;&lt;/a&gt;压杆的稳定性问题&lt;/h2&gt;&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; src=&quot;https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200512151535548.png&quot; alt=&quot;image&quot;/&gt;&lt;/div&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="材料力学" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E6%9D%90%E6%96%99%E5%8A%9B%E5%AD%A6/"/>
    
    
    <category term="稳定性" scheme="https://zypnb.top/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>工程地质勘察</title>
    <link href="https://zypnb.top/learn/engineering_geology/walk/"/>
    <id>https://zypnb.top/learn/engineering_geology/walk/</id>
    <published>2020-05-12T02:24:21.000Z</published>
    <updated>2022-08-23T00:54:33.191Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="分级"><a href="#分级" class="headerlink" title="分级"></a>分级</h2><p>为了工程建设的安全和高效，须对工程勘察分级。不同等级的勘查，其勘察内容、勘察精度有不同的要求。</p><p>分级依据：工程重要性，场地复杂程度，地基复杂程度。</p></div><div class="story post-story"><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ol><li>地形地貌</li><li>地层岩土性质</li></ol><span id="more"></span><ul><li>松散沉积物的类型、工程地质性质：岩石性质、力学性质、水理性质、风化情况</li><li>松散沉积物：颗粒成分、颗粒结构、力学性质、水理性质</li></ul><ol start="3"><li>地质构造</li></ol><ul><li>区域稳定性（基本烈度）</li><li>场地地质构造：土体结构，地层产状，褶皱，断层，裂隙的发育情况</li></ul><ol start="4"><li>水文地质条件</li></ol><ul><li><p>地下水的类型和赋存状态；</p></li><li><p>主要含水层的分布规律；</p></li><li><p>区域性气候水文资料；</p></li><li><p>地下水的补给排泄条件，地表水与地下水的补排关系；</p></li><li><p>地下水位，历史变化规律及影响因素；</p></li><li><p>地下水的化学性质（侵蚀性评价）；</p></li></ul><ol start="5"><li>不良地质现象</li></ol><ul><li>岩溶（不均匀地基，岩溶地面塌陷）</li><li>滑坡（选址）</li><li>危岩和崩塌（选址）</li><li>泥石流（选址）</li><li>采空区（矿山地面沉陷、塌陷）地面沉降（成因、趋势、治理）</li><li>活动断裂（重大工程选址）</li><li>其他（地裂缝、场地地震效应）</li><li>威胁工程安全，关系治理造价。</li></ul></div><div class="story post-story"><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>踏勘</li><li>测绘</li><li>物探</li><li>勘探</li><li>测试</li></ol></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;分级&quot;&gt;&lt;a href=&quot;#分级&quot; class=&quot;headerlink&quot; title=&quot;分级&quot;&gt;&lt;/a&gt;分级&lt;/h2&gt;&lt;p&gt;为了工程建设的安全和高效，须对工程勘察分级。不同等级的勘查，其勘察内容、勘察精度有不同的要求。&lt;/p&gt;
&lt;p&gt;分级依据：工程重要性，场地复杂程度，地基复杂程度。&lt;/p&gt;
&lt;h2 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;地形地貌&lt;/li&gt;
&lt;li&gt;地层岩土性质&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="工程地质" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E7%A8%8B%E5%9C%B0%E8%B4%A8/"/>
    
    
    <category term="勘察" scheme="https://zypnb.top/tags/%E5%8B%98%E5%AF%9F/"/>
    
  </entry>
  
  <entry>
    <title>绪论</title>
    <link href="https://zypnb.top/learn/materials/intro/"/>
    <id>https://zypnb.top/learn/materials/intro/</id>
    <published>2020-05-09T11:32:11.000Z</published>
    <updated>2022-08-23T00:54:33.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="我们重点关注的问题"><a href="#我们重点关注的问题" class="headerlink" title="我们重点关注的问题"></a>我们重点关注的问题</h3><h4 id="21-世纪土木工程材料面临的挑战"><a href="#21-世纪土木工程材料面临的挑战" class="headerlink" title="21 世纪土木工程材料面临的挑战"></a>21 世纪土木工程材料面临的挑战</h4><ul><li>生态污染</li><li>生产破坏</li><li>自然资源消耗</li></ul><h4 id="3D-打印建筑材料与-3D-打印建筑"><a href="#3D-打印建筑材料与-3D-打印建筑" class="headerlink" title="3D 打印建筑材料与 3D 打印建筑"></a>3D 打印建筑材料与 3D 打印建筑</h4><ul><li>3D 打印建筑的耐久性大于现浇混凝土？——谣言</li><li>要严谨</li><li>防守——确保基本建筑安全性、强度</li><li>优点——不规则建筑<ul><li>传统方法需要先制作模具——钢模板</li><li>不能使用塑料模版</li></ul></li><li>很难做出高层建筑</li><li>很难做成抗震建筑</li><li>与现浇混凝土差异很大！<ul><li>整体性差</li><li>没有钢筋</li></ul></li><li>缺点</li></ul><span id="more"></span><p><img src="https://qn-st0.yuketang.cn/Fqjso7z3Df5c6ObfTi8sQN-4QW6B" class="lazyload placeholder" data-srcset="https://qn-st0.yuketang.cn/Fqjso7z3Df5c6ObfTi8sQN-4QW6B" srcset="/images/placeholder.svg"></p><ul><li>3D 打印设备</li><li>效率不是主要</li></ul><h4 id="艺术建材与建筑装饰"><a href="#艺术建材与建筑装饰" class="headerlink" title="艺术建材与建筑装饰"></a>艺术建材与建筑装饰</h4><ul><li>透光混凝土</li><li>混凝土的颜色</li><li>获得比较好的观感</li></ul><h4 id="工业固废与生态建材"><a href="#工业固废与生态建材" class="headerlink" title="工业固废与生态建材"></a>工业固废与生态建材</h4><ul><li>城市周围堆满“渣”山</li><li>fly ash 粉煤灰——火力发电排放，可飘至 10km 远，对环境污染严重</li><li>泥石膏——可溶性氟</li><li>可用作什么？</li></ul><p><img src="https://qn-st0.yuketang.cn/FmkfS0XH7OKCrWIj_zx6-ifVBm3B" class="lazyload placeholder" data-srcset="https://qn-st0.yuketang.cn/FmkfS0XH7OKCrWIj_zx6-ifVBm3B" srcset="/images/placeholder.svg"></p><ul><li>强度较高——才可做骨料</li><li>具有一定活性——才可做水泥</li><li>砌块——可以，需要一个高温的过程<ul><li>好处：能在工厂中</li><li>压蒸工艺——温度较高</li><li>蒸养——用水蒸气养护</li><li>容易在周边销售</li></ul></li></ul><h4 id="保温材料与工程事故"><a href="#保温材料与工程事故" class="headerlink" title="保温材料与工程事故"></a>保温材料与工程事故</h4><ul><li>外保温材料</li><li>混凝土导热系数大——窗户导热比混凝土差</li><li>举例——办公室</li><li>P1——外墙外保温材料容易脱落，谁来维修？</li><li>P2——央视大火，外保温材料抗火能力很差</li><li>聚苯板抗火能力很差，为什么工程上仍然大量使用？<ul><li>燃烧后，产生大量有毒气体，包裹大楼，造成危险</li><li>成本低、性价比高</li><li>强度高，耐火性能好，导热差不多，但生产能耗很大，成本很高——岩棉：无机的</li></ul></li><li>混凝土抗火性</li></ul><h4 id="高性能结构材料与耐久性"><a href="#高性能结构材料与耐久性" class="headerlink" title="高性能结构材料与耐久性"></a>高性能结构材料与耐久性</h4><ul><li>关注超高性能的结构材料，能用于特殊建筑中，高耐久性</li><li>保温材料有很高的密实度，而且<strong>不开裂</strong></li><li>西直门桥——耐久性原因重建<ul><li>只使用了三十年，腐蚀严重</li></ul></li><li>提高钢筋混凝土耐久性可以采取哪些措施？<ul><li>采用混凝土防护涂层</li><li>采用钢筋阻锈剂</li><li>采用抗裂性能优异的混凝土</li></ul></li></ul><h4 id="高速铁路关键材料与建造"><a href="#高速铁路关键材料与建造" class="headerlink" title="高速铁路关键材料与建造"></a>高速铁路关键材料与建造</h4><ul><li><p>高架路、高架桥</p></li><li><p>90%以上都是预制拼装的</p></li><li><p>预制构件的好处：蒸养的技术（空气相对湿度接近 100%），表面比较平滑，没有裂缝的</p></li><li><p>水泥沥青砂浆——粘弹性比较好的材料，沥青路面——比较舒适，水泥混凝土路面——不舒适</p><ul><li>强度比沥青高，柔韧性比水泥好</li></ul></li></ul><h4 id="透水混凝土与海绵城市"><a href="#透水混凝土与海绵城市" class="headerlink" title="透水混凝土与海绵城市"></a>透水混凝土与海绵城市</h4><ul><li>透水路面+湖泊+……</li></ul><p><img src="https://qn-st0.yuketang.cn/FtR3tkksxJ7kVGYJ6yMznfSsSrFP" class="lazyload placeholder" data-srcset="https://qn-st0.yuketang.cn/FtR3tkksxJ7kVGYJ6yMznfSsSrFP" srcset="/images/placeholder.svg"></p><ul><li><p>混凝土本身的不透水的，地下室漏水？</p><ul><li>混凝土<strong>不密实</strong>，<strong>开裂</strong></li><li>因此混凝土、卫生间做防水处理</li></ul></li><li><p>透水混凝土缺点</p><ul><li>强度低</li><li>耐久性差</li><li>流动性差，不能浇筑施工</li><li>容易堵孔，透水性降低</li></ul></li><li><p>孔隙连通性很重要，生产时需要连通孔隙多，所以流动性不可能较好 <code>堵孔</code></p></li><li><p>沙尘——透水混凝土的维护，维护成本会很高</p></li><li><p>透水混凝土，很多时候都有 <code>色彩</code>，为了美观——功能性，艺术性相融合</p></li><li><p>海绵城市离不开透水混凝土，如何解决这些问题？</p><ul><li>使用透水砖，戳成直孔，透水混凝土是曲折的孔，另外透水砖施工简单</li><li>利用模具做透水混凝土</li></ul></li><li><p>耐久性差——为什么？</p><ul><li>水泥用量少，孔隙多，散失水分多，水化程度达不到预期。</li></ul></li></ul><h4 id="膜材料与建筑"><a href="#膜材料与建筑" class="headerlink" title="膜材料与建筑"></a>膜材料与建筑</h4><p>膜材料的发展十分迅速，比如混凝土从 C10 到 C80，性能改善速率十分快，美观能契合建筑师的要求。</p><ul><li>具有可施工性</li><li>能满足各项力学性能等</li></ul><p>我们要对特殊材料有所认识</p><h4 id="建筑防护与修复材料"><a href="#建筑防护与修复材料" class="headerlink" title="建筑防护与修复材料"></a>建筑防护与修复材料</h4><p>汶川地震，很多结构需要重建，需要加固，如何加固？用什么材料加固？</p><ul><li>frp 材料——冯鹏教授</li><li>微生物加固</li><li>自修复材料，微米级胶囊放入混凝土均匀分布，成本？代价？</li><li>钻井，油井特殊工程使用</li></ul><blockquote><p>研究源于工程</p><p>——聂建国</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;我们重点关注的问题&quot;&gt;&lt;a href=&quot;#我们重点关注的问题&quot; class=&quot;headerlink&quot; title=&quot;我们重点关注的问题&quot;&gt;&lt;/a&gt;我们重点关注的问题&lt;/h3&gt;&lt;h4 id=&quot;21-世纪土木工程材料面临的挑战&quot;&gt;&lt;a href=&quot;#21-世纪土木工程材料面临的挑战&quot; class=&quot;headerlink&quot; title=&quot;21 世纪土木工程材料面临的挑战&quot;&gt;&lt;/a&gt;21 世纪土木工程材料面临的挑战&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;生态污染&lt;/li&gt;
&lt;li&gt;生产破坏&lt;/li&gt;
&lt;li&gt;自然资源消耗&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3D-打印建筑材料与-3D-打印建筑&quot;&gt;&lt;a href=&quot;#3D-打印建筑材料与-3D-打印建筑&quot; class=&quot;headerlink&quot; title=&quot;3D 打印建筑材料与 3D 打印建筑&quot;&gt;&lt;/a&gt;3D 打印建筑材料与 3D 打印建筑&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;3D 打印建筑的耐久性大于现浇混凝土？——谣言&lt;/li&gt;
&lt;li&gt;要严谨&lt;/li&gt;
&lt;li&gt;防守——确保基本建筑安全性、强度&lt;/li&gt;
&lt;li&gt;优点——不规则建筑&lt;ul&gt;
&lt;li&gt;传统方法需要先制作模具——钢模板&lt;/li&gt;
&lt;li&gt;不能使用塑料模版&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;很难做出高层建筑&lt;/li&gt;
&lt;li&gt;很难做成抗震建筑&lt;/li&gt;
&lt;li&gt;与现浇混凝土差异很大！&lt;ul&gt;
&lt;li&gt;整体性差&lt;/li&gt;
&lt;li&gt;没有钢筋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="现代土木工程材料" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E7%8E%B0%E4%BB%A3%E5%9C%9F%E6%9C%A8%E5%B7%A5%E7%A8%8B%E6%9D%90%E6%96%99/"/>
    
    
    <category term="绪论" scheme="https://zypnb.top/tags/%E7%BB%AA%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>透水混凝土与生态混凝土</title>
    <link href="https://zypnb.top/learn/materials/water_concrete/"/>
    <id>https://zypnb.top/learn/materials/water_concrete/</id>
    <published>2020-05-09T11:21:05.000Z</published>
    <updated>2022-08-23T00:54:33.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>都做功能材料，而非结构材料</li><li>都有较高的孔隙率</li></ul><div class="story post-story"><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><ul><li>北京暴雨</li><li>2012 年，7·21 北京特大暴雨</li></ul></div><div class="story post-story"><h2 id="地下施工技术"><a href="#地下施工技术" class="headerlink" title="地下施工技术"></a>地下施工技术</h2><ul><li>快速冷冻技术（试验阶段）</li><li>北京施工——抽水不可直接回灌</li><li>交水费——消耗很大</li><li>水位又涨回来了——地铁渗水（北京地铁很多地方在滴水）</li></ul><span id="more"></span></div><div class="story post-story"><h2 id="透水混凝土简介"><a href="#透水混凝土简介" class="headerlink" title="透水混凝土简介"></a>透水混凝土简介</h2><ul><li><p>是一种多孔混凝土——通常指用于地面铺装，满足路面施工性能和路用要求的多孔混凝土</p></li><li><p>直孔排水</p></li><li><p>新型透水路面</p></li><li><p>从技术上讲——不能使用细骨料——必须使用粗骨料</p></li><li><p>最好使用粗骨料——针片状最好不要有</p></li><li><p>矿物掺合料</p></li><li><p>可以用少量的树脂——无机材料掺入——如果想增加强度</p></li></ul></div>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;都做功能材料，而非结构材料&lt;/li&gt;
&lt;li&gt;都有较高的孔隙率&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;北京暴雨&lt;/li&gt;
&lt;li&gt;2012 年，7·21 北京特大暴雨&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;地下施工技术&quot;&gt;&lt;a href=&quot;#地下施工技术&quot; class=&quot;headerlink&quot; title=&quot;地下施工技术&quot;&gt;&lt;/a&gt;地下施工技术&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;快速冷冻技术（试验阶段）&lt;/li&gt;
&lt;li&gt;北京施工——抽水不可直接回灌&lt;/li&gt;
&lt;li&gt;交水费——消耗很大&lt;/li&gt;
&lt;li&gt;水位又涨回来了——地铁渗水（北京地铁很多地方在滴水）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="现代土木工程材料" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E7%8E%B0%E4%BB%A3%E5%9C%9F%E6%9C%A8%E5%B7%A5%E7%A8%8B%E6%9D%90%E6%96%99/"/>
    
    
    <category term="混凝土" scheme="https://zypnb.top/tags/%E6%B7%B7%E5%87%9D%E5%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>工业固废与生态建材</title>
    <link href="https://zypnb.top/learn/materials/env_material/"/>
    <id>https://zypnb.top/learn/materials/env_material/</id>
    <published>2020-05-09T11:21:04.000Z</published>
    <updated>2022-08-23T00:54:33.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>背景——我国工业化进程中排放了大量的工业废渣</p><div class="story post-story"><h2 id="粉煤灰的综合利用"><a href="#粉煤灰的综合利用" class="headerlink" title="粉煤灰的综合利用"></a>粉煤灰的综合利用</h2><ul><li>大掺量粉煤灰混凝土</li><li>强度高、温升小、弹性模量低、受缩小、结构密实</li><li>水泥种类：天山 P.O42.5</li><li>胶凝材料总量：400kg&#x2F;m^3^</li><li>粉煤灰掺量：45%</li><li>水胶比 0.42</li><li>砂率 43%</li></ul><span id="more"></span></div><div class="story post-story"><h2 id="钢渣的综合利用"><a href="#钢渣的综合利用" class="headerlink" title="钢渣的综合利用"></a>钢渣的综合利用</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200420200248675.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200420200248675.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>这是一个失败的工程，非常失败</li><li>钢渣的问题<ul><li>缓凝现象</li></ul></li></ul></div><div class="story post-story"><h2 id="磷石膏的综合应用"><a href="#磷石膏的综合应用" class="headerlink" title="磷石膏的综合应用"></a>磷石膏的综合应用</h2><ul><li>磷石膏修路</li><li>磷石膏还有**的问题（行业秘密）</li></ul></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;背景——我国工业化进程中排放了大量的工业废渣&lt;/p&gt;
&lt;h2 id=&quot;粉煤灰的综合利用&quot;&gt;&lt;a href=&quot;#粉煤灰的综合利用&quot; class=&quot;headerlink&quot; title=&quot;粉煤灰的综合利用&quot;&gt;&lt;/a&gt;粉煤灰的综合利用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;大掺量粉煤灰混凝土&lt;/li&gt;
&lt;li&gt;强度高、温升小、弹性模量低、受缩小、结构密实&lt;/li&gt;
&lt;li&gt;水泥种类：天山 P.O42.5&lt;/li&gt;
&lt;li&gt;胶凝材料总量：400kg&amp;#x2F;m^3^&lt;/li&gt;
&lt;li&gt;粉煤灰掺量：45%&lt;/li&gt;
&lt;li&gt;水胶比 0.42&lt;/li&gt;
&lt;li&gt;砂率 43%&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="现代土木工程材料" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E7%8E%B0%E4%BB%A3%E5%9C%9F%E6%9C%A8%E5%B7%A5%E7%A8%8B%E6%9D%90%E6%96%99/"/>
    
    
    <category term="生态建材" scheme="https://zypnb.top/tags/%E7%94%9F%E6%80%81%E5%BB%BA%E6%9D%90/"/>
    
  </entry>
  
  <entry>
    <title>保温材料与工程事故</title>
    <link href="https://zypnb.top/learn/materials/disaster/"/>
    <id>https://zypnb.top/learn/materials/disaster/</id>
    <published>2020-05-09T11:21:02.000Z</published>
    <updated>2022-08-23T00:54:33.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="建筑节能"><a href="#建筑节能" class="headerlink" title="建筑节能"></a>建筑节能</h2><ul><li>430 亿平方米的存量建筑中，仅 5%为节能建筑</li><li>新建筑中 90%仍为高耗能建筑</li><li>建筑使用能耗占全社会能耗的 30%</li><li>建筑节能——以节约建筑能耗为核心，对建筑物的围护结构和采暖系统进行控制。——冬暖夏凉、节约能源</li><li>节能建筑设计 7 大节能技术——小区布局、建筑单体设计、外墙、门窗、屋面、遮阳、通风，涉及到上百条细则</li><li>主要分为——主动节能和被动节能两类</li><li>前端与后端（减少能源的损失：保温隔热）</li></ul><p><u><strong>住宅建筑耗热</strong></u>：</p><ul><li>建筑节能是总体考虑墙、窗、室内电器、燃气等的总能耗减少</li><li>在整个外立面，窗散热占 30%，其余为墙</li></ul><p><u><strong>例：西坝河小区“住宅节能平改坡”</strong></u>：</p><span id="more"></span></div><div class="story post-story"><h2 id="导热系数与冷桥"><a href="#导热系数与冷桥" class="headerlink" title="导热系数与冷桥"></a>导热系数与冷桥</h2><p><u><strong>材料的导热系数</strong></u>：</p><ul><li>材料热传导能力的度量</li><li>材料的密度越小，孔隙率越高，导热系数越小</li><li>导热系数低于 0.175——绝热</li><li>水的导热系数是空气的 20 倍，湿度也是关键</li><li>砖墙的导热系数约为 0.81（W&#x2F;m·K）</li><li>混凝土材料的导热系数为 1.74（W&#x2F;m·K）</li></ul><p><u><strong>冷桥（热桥）</strong></u>：</p><ul><li>某些部位的导热系数明显大于其他部位，因此热量集中地从这些部位快速传递，从而增大了建筑物的空调等等。</li></ul></div><div class="story post-story"><h2 id="保温材料"><a href="#保温材料" class="headerlink" title="保温材料"></a>保温材料</h2><ul><li><p>XPS、EPS</p></li><li><p>聚氨酯保温板（PU 保温板）</p></li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413194114565.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413194114565.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>岩棉<ul><li>岩棉保温板难于生产，高耗能</li></ul></li><li>夹心保温砌块</li><li>酚醛保温板</li><li>保温砂浆</li></ul></div><div class="story post-story"><h2 id="建筑保温施工"><a href="#建筑保温施工" class="headerlink" title="建筑保温施工"></a>建筑保温施工</h2><ul><li>外墙外保温（优点最显著，是我国墙体保温的主要形式、发展方向）</li><li>外墙内保温（无法完全解决冷桥、热桥问题）</li><li>夹心保温</li><li>采用空心砖、空心砌块等轻质材料的自保温墙体</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413195014125.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413195014125.png" srcset="/images/placeholder.svg" alt="image"/></div></div><h3 id="外墙外保温体系"><a href="#外墙外保温体系" class="headerlink" title="外墙外保温体系"></a>外墙外保温体系</h3><ul><li>点粘法</li></ul><h3 id="外墙内保温体系"><a href="#外墙内保温体系" class="headerlink" title="外墙内保温体系"></a>外墙内保温体系</h3><ul><li>屋内进行，较为简单</li><li>但是效果不好</li></ul><h3 id="夹心保温体系"><a href="#夹心保温体系" class="headerlink" title="夹心保温体系"></a>夹心保温体系</h3><ul><li>浇筑混凝土，聚苯板</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413200229922.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413200229922.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>寿命高，永久</li></ul><h3 id="自保温体系"><a href="#自保温体系" class="headerlink" title="自保温体系"></a>自保温体系</h3><ul><li>保温性能比钢筋混凝土好</li><li>但不适用于特别冷、特别热的地区</li><li>具有不可回避的冷桥和热桥</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413200526202.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413200526202.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="配件"><a href="#配件" class="headerlink" title="配件"></a>配件</h2><ul><li>托架</li><li>护脚</li><li>网格布（把力均匀的传导）</li><li>塑料锚栓</li><li>饰面</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413201859403.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200413201859403.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div><div class="story post-story"><h2 id="开裂"><a href="#开裂" class="headerlink" title="开裂"></a>开裂</h2><ul><li>相邻材料导热系数差过大易引起开裂</li><li>沈阳某工程——聚苯板表面抹灰</li><li>饰面材料不匹配引起开裂<ul><li>柔性释放应力的技术路线</li><li>糯米石灰浆——长城的砌法</li></ul></li></ul></div><div class="story post-story"><h2 id="各种灾害"><a href="#各种灾害" class="headerlink" title="各种灾害"></a>各种灾害</h2><p>。。。</p><h3 id="火灾"><a href="#火灾" class="headerlink" title="火灾"></a>火灾</h3><ul><li>CCTV 新址——北配楼火灾</li><li>沈阳皇朝万鑫酒店火灾</li></ul></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;建筑节能&quot;&gt;&lt;a href=&quot;#建筑节能&quot; class=&quot;headerlink&quot; title=&quot;建筑节能&quot;&gt;&lt;/a&gt;建筑节能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;430 亿平方米的存量建筑中，仅 5%为节能建筑&lt;/li&gt;
&lt;li&gt;新建筑中 90%仍为高耗能建筑&lt;/li&gt;
&lt;li&gt;建筑使用能耗占全社会能耗的 30%&lt;/li&gt;
&lt;li&gt;建筑节能——以节约建筑能耗为核心，对建筑物的围护结构和采暖系统进行控制。——冬暖夏凉、节约能源&lt;/li&gt;
&lt;li&gt;节能建筑设计 7 大节能技术——小区布局、建筑单体设计、外墙、门窗、屋面、遮阳、通风，涉及到上百条细则&lt;/li&gt;
&lt;li&gt;主要分为——主动节能和被动节能两类&lt;/li&gt;
&lt;li&gt;前端与后端（减少能源的损失：保温隔热）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;住宅建筑耗热&lt;/strong&gt;&lt;/u&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建筑节能是总体考虑墙、窗、室内电器、燃气等的总能耗减少&lt;/li&gt;
&lt;li&gt;在整个外立面，窗散热占 30%，其余为墙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;&lt;strong&gt;例：西坝河小区“住宅节能平改坡”&lt;/strong&gt;&lt;/u&gt;：&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="现代土木工程材料" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E7%8E%B0%E4%BB%A3%E5%9C%9F%E6%9C%A8%E5%B7%A5%E7%A8%8B%E6%9D%90%E6%96%99/"/>
    
    
    <category term="灾害" scheme="https://zypnb.top/tags/%E7%81%BE%E5%AE%B3/"/>
    
    <category term="保温材料" scheme="https://zypnb.top/tags/%E4%BF%9D%E6%B8%A9%E6%9D%90%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>超高性能混凝土</title>
    <link href="https://zypnb.top/learn/materials/uhpc/"/>
    <id>https://zypnb.top/learn/materials/uhpc/</id>
    <published>2020-05-09T11:20:59.000Z</published>
    <updated>2022-08-23T00:54:33.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>Ultra High Performance Concrete</strong></p><ul><li><p>1993 年法国 Bouygues 公司研制出超高性能水泥基复合材料——活性粉末混凝土（RPC）</p></li><li><p>现在欧洲通常称为超高性能混凝土（UHPC）</p></li><li><p>究竟是何结构？</p></li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200323192556760.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200323192556760.png" srcset="/images/placeholder.svg" alt="image"/></div></div><span id="more"></span><ul><li>活性粉末混凝土——胶凝材料——填充空隙</li><li>往往没有石子、很少使用石子（否则难以密实堆积）</li><li>重要因素——水胶比——E.g. RPC100——小于 0.22，RPC180——小于 0.14</li><li>因而必须使用高性能减水剂，这是<emp>第一个特点</emp>。</li><li>胶凝材料用量大——收缩大（控制开裂有难度）</li><li>需要掺入钢纤维——韧性、抗折强度（抗冲击的能力）破坏时不容易爆裂</li></ul><h3 id="机理"><a href="#机理" class="headerlink" title="机理"></a>机理</h3><ul><li>去除粗骨料——减少缺陷尺寸、增强过渡区</li><li>优化粉体颗粒级配，提高硬化体的密实度</li><li>掺加微细高强钢纤维——增加韧性、强度</li><li>使用高性能减水剂——降低水胶比</li><li>高温养护——促进胶凝材料水化反应，控制混凝土的收缩</li></ul><h3 id="How-to？"><a href="#How-to？" class="headerlink" title="How to？"></a>How to？</h3><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200323193410636.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200323193410636.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>钢纤维——易扎手、易成团</li><li>所以一定要搅拌均匀，注意加料方式，钢纤维的光滑——拔出失效？</li><li>因为粘结力不太大——所以需要加多</li><li>注意砂——干净</li><li>硅灰——非常轻（原状硅灰）——加密硅灰（还需要打散）不然就不如原状硅灰</li><li>高强混凝土——爆裂——需要<emp>收拾</emp></li><li>而对于 RPC 混凝土——由于纤维的存在，故不会产生爆裂</li></ul><p>加入减水剂时，同时也在加入水（固含量高）</p><ul><li>UHPC 强度高，因而自重较小</li></ul></div><div class="story post-story"><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="桥墩"><a href="#桥墩" class="headerlink" title="桥墩"></a>桥墩</h3><ul><li>超高性能混凝土修复桥墩</li></ul><h3 id="雨棚"><a href="#雨棚" class="headerlink" title="雨棚"></a>雨棚</h3><ul><li>超高性能混凝土制作雨棚——加拿大</li><li>很好的耐久性</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>大型筒仓的顶板——加拿大<ul><li>钢桁架与超高性能混凝土的对比</li></ul></li><li>UHPC 狗窝——壁厚只有 2cm，养藏獒也没有问题</li><li>重载工业地坪表面 UHPC 增强层</li><li>冲击试验（用一颗子弹撞击到材料上，来看材料性能）<ul><li>RPC 混凝土有很强的完整性</li><li>防爆装置，防止袭击</li><li>抗核爆的项目——需要的性能比较大所以可以使用这种</li></ul></li><li>地铁的防撞墙</li><li>镂空材料</li><li>轻便的楼梯</li><li>井盖</li><li>电缆槽盖板</li></ul><h3 id="桥梁"><a href="#桥梁" class="headerlink" title="桥梁"></a>桥梁</h3><ul><li>苗条的桥</li><li>沪通长江大桥</li><li>石首长江大桥</li><li>金沙江特大桥</li><li>株洲枫溪大桥——悬索桥——减少自重</li><li>益阳青龙洲大桥</li><li>上海装配式高架桥——C100 做罐装料</li><li>长沙北辰三角洲跨街天桥（里程碑）</li><li>铁路桥</li><li>萨拉戈萨桥——西班牙桥</li><li>马赛曲办公大楼</li></ul><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200323203914444.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200323203914444.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>欧洲和地中海文明博物馆——通体采用超高性能混凝土</li><li>吉博恩茵体育场）位于法国昂热——非常艺术</li><li>米兰世博会意大利馆——UHPC 面板与玻璃钢架构虚实结合</li><li>RATP 公共汽车站</li><li>日间幼儿园</li><li>路易威登基金会艺术中心</li></ul></div><div class="story post-story"><h2 id="一个简单的总结"><a href="#一个简单的总结" class="headerlink" title="一个简单的总结"></a>一个简单的总结</h2><ul><li>更加强调力学性能或是耐久性</li><li>或者干脆就是很大的箱梁或者是拱</li></ul></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Ultra High Performance Concrete&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1993 年法国 Bouygues 公司研制出超高性能水泥基复合材料——活性粉末混凝土（RPC）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在欧洲通常称为超高性能混凝土（UHPC）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;究竟是何结构？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; src=&quot;https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200323192556760.png&quot; alt=&quot;image&quot;/&gt;&lt;/div&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="现代土木工程材料" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E7%8E%B0%E4%BB%A3%E5%9C%9F%E6%9C%A8%E5%B7%A5%E7%A8%8B%E6%9D%90%E6%96%99/"/>
    
    
    <category term="UHPC" scheme="https://zypnb.top/tags/UHPC/"/>
    
  </entry>
  
  <entry>
    <title>线路工程测量</title>
    <link href="https://zypnb.top/learn/survey/line/"/>
    <id>https://zypnb.top/learn/survey/line/</id>
    <published>2020-05-08T15:41:42.000Z</published>
    <updated>2022-08-23T00:54:33.203Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="story post-story"><h2 id="线路测量概述"><a href="#线路测量概述" class="headerlink" title="线路测量概述"></a>线路测量概述</h2><p>线路工程是指长宽比很大的工程，包括铁路、公路、渠道以及城市管线（如供水、供电等）的测量工作，线路测量除管道不设曲线外，各种线路测量的程序和方法大致相同。</p><p>线路测量的任务分初测和定测。为线路的初步设计提供带状地形图和有关资料, 称为初测；技术设计阶段进行中线测量、纵横断面测量, 为施工提供依据，称为定测。工程完成后, 还要进行竣工验收测量。以上所述, 线路工程的初步设计以及施工阶段的测量工作, 统称线路工程施工测量。</p><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200424133554290.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200424133554290.png" srcset="/images/placeholder.svg" alt="image"/></div></div><span id="more"></span><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200424134904617.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200424134904617.png" srcset="/images/placeholder.svg" alt="image"/></div></div><ul><li>初测——沿着设计线路测量带状地形图</li><li>定测——把中线放到实地并且测量纵横断面图</li><li>设计中线</li><li>还有一步！——竣工测量</li></ul></div><div class="story post-story"><h2 id="中线测量"><a href="#中线测量" class="headerlink" title="中线测量"></a>中线测量</h2><ul><li>线路工程的中心线由直线和曲线构成。中线测量就是通过线路的测设，将线路工程中心线标定在实地上，中线测量主要包括测设中心线的起点、终点，各交点和转点，量距和定桩，测量线路各偏角（α），测设圆曲线等。</li><li>转点——圆直点、直圆点</li></ul></div><div class="story post-story"><h2 id="路线纵、横断面图测绘"><a href="#路线纵、横断面图测绘" class="headerlink" title="路线纵、横断面图测绘"></a>路线纵、横断面图测绘</h2><ul><li>基平与中平测量</li></ul></div><div class="story post-story"><h2 id="线路工程施工测量"><a href="#线路工程施工测量" class="headerlink" title="线路工程施工测量"></a>线路工程施工测量</h2><h2 id="管道施工测量"><a href="#管道施工测量" class="headerlink" title="管道施工测量"></a>管道施工测量</h2><h2 id="隧道工程施工测量"><a href="#隧道工程施工测量" class="headerlink" title="隧道工程施工测量"></a>隧道工程施工测量</h2><div class="img-wrap"><div class="img-bg"><img class="img lazyload placeholder" src="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200424133448942.png" class="lazyload placeholder" data-srcset="https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200424133448942.png" srcset="/images/placeholder.svg" alt="image"/></div></div></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;线路测量概述&quot;&gt;&lt;a href=&quot;#线路测量概述&quot; class=&quot;headerlink&quot; title=&quot;线路测量概述&quot;&gt;&lt;/a&gt;线路测量概述&lt;/h2&gt;&lt;p&gt;线路工程是指长宽比很大的工程，包括铁路、公路、渠道以及城市管线（如供水、供电等）的测量工作，线路测量除管道不设曲线外，各种线路测量的程序和方法大致相同。&lt;/p&gt;
&lt;p&gt;线路测量的任务分初测和定测。为线路的初步设计提供带状地形图和有关资料, 称为初测；技术设计阶段进行中线测量、纵横断面测量, 为施工提供依据，称为定测。工程完成后, 还要进行竣工验收测量。以上所述, 线路工程的初步设计以及施工阶段的测量工作, 统称线路工程施工测量。&lt;/p&gt;
&lt;div class=&quot;img-wrap&quot;&gt;&lt;div class=&quot;img-bg&quot;&gt;&lt;img class=&quot;img&quot; src=&quot;https://xiaospace.oss-cn-beijing.aliyuncs.com/img/image-20200424133554290.png&quot; alt=&quot;image&quot;/&gt;&lt;/div&gt;&lt;/div&gt;</summary>
    
    
    
    <category term="学习" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="测量学" scheme="https://zypnb.top/categories/%E5%AD%A6%E4%B9%A0/%E6%B5%8B%E9%87%8F%E5%AD%A6/"/>
    
    
    <category term="线路测量" scheme="https://zypnb.top/tags/%E7%BA%BF%E8%B7%AF%E6%B5%8B%E9%87%8F/"/>
    
  </entry>
  
</feed>
